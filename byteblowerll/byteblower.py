# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_byteblower', [dirname(__file__)])
        except ImportError:
            import _byteblower
            return _byteblower
        if fp is not None:
            try:
                _mod = imp.load_module('_byteblower', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _byteblower = swig_import_helper()
    del swig_import_helper
else:
    import _byteblower
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _byteblower.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _byteblower.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _byteblower.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _byteblower.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _byteblower.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _byteblower.SwigPyIterator_equal(self, x)

    def copy(self):
        return _byteblower.SwigPyIterator_copy(self)

    def next(self):
        return _byteblower.SwigPyIterator_next(self)

    def __next__(self):
        return _byteblower.SwigPyIterator___next__(self)

    def previous(self):
        return _byteblower.SwigPyIterator_previous(self)

    def advance(self, n):
        return _byteblower.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _byteblower.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _byteblower.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _byteblower.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _byteblower.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _byteblower.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _byteblower.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _byteblower.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ByteBlowerAPIException(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteBlowerAPIException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ByteBlowerAPIException, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _byteblower.new_ByteBlowerAPIException()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _byteblower.delete_ByteBlowerAPIException
    __del__ = lambda self: None

    def getPublicName(self):
        return _byteblower.ByteBlowerAPIException_getPublicName(self)

    def getInfo(self):
        return _byteblower.ByteBlowerAPIException_getInfo(self)

    def getMessage(self):
        return _byteblower.ByteBlowerAPIException_getMessage(self)

    def what(self):
        return _byteblower.ByteBlowerAPIException_what(self)

    def setServer(self, server):
        return _byteblower.ByteBlowerAPIException_setServer(self, server)

    def setPublicName(self, name):
        return _byteblower.ByteBlowerAPIException_setPublicName(self, name)

    def setPrivateName(self, name):
        return _byteblower.ByteBlowerAPIException_setPrivateName(self, name)

    def setInfo(self, info):
        return _byteblower.ByteBlowerAPIException_setInfo(self, info)
ByteBlowerAPIException_swigregister = _byteblower.ByteBlowerAPIException_swigregister
ByteBlowerAPIException_swigregister(ByteBlowerAPIException)


def Demangle(inName):
    return _byteblower.Demangle(inName)
Demangle = _byteblower.Demangle
class TechnicalError(ByteBlowerAPIException):
    __swig_setmethods__ = {}
    for _s in [ByteBlowerAPIException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TechnicalError, name, value)
    __swig_getmethods__ = {}
    for _s in [ByteBlowerAPIException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TechnicalError, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _byteblower.new_TechnicalError(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _byteblower.delete_TechnicalError
    __del__ = lambda self: None
TechnicalError_swigregister = _byteblower.TechnicalError_swigregister
TechnicalError_swigregister(TechnicalError)

class DomainError(ByteBlowerAPIException):
    __swig_setmethods__ = {}
    for _s in [ByteBlowerAPIException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DomainError, name, value)
    __swig_getmethods__ = {}
    for _s in [ByteBlowerAPIException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DomainError, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _byteblower.new_DomainError(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _byteblower.delete_DomainError
    __del__ = lambda self: None
DomainError_swigregister = _byteblower.DomainError_swigregister
DomainError_swigregister(DomainError)

class ConfigError(DomainError):
    __swig_setmethods__ = {}
    for _s in [DomainError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigError, name, value)
    __swig_getmethods__ = {}
    for _s in [DomainError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigError, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _byteblower.new_ConfigError(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _byteblower.delete_ConfigError
    __del__ = lambda self: None
ConfigError_swigregister = _byteblower.ConfigError_swigregister
ConfigError_swigregister(ConfigError)

class InitializationError(DomainError):
    __swig_setmethods__ = {}
    for _s in [DomainError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InitializationError, name, value)
    __swig_getmethods__ = {}
    for _s in [DomainError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InitializationError, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _byteblower.new_InitializationError(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _byteblower.delete_InitializationError
    __del__ = lambda self: None
InitializationError_swigregister = _byteblower.InitializationError_swigregister
InitializationError_swigregister(InitializationError)

class InProgressError(DomainError):
    __swig_setmethods__ = {}
    for _s in [DomainError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InProgressError, name, value)
    __swig_getmethods__ = {}
    for _s in [DomainError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InProgressError, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _byteblower.new_InProgressError(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _byteblower.delete_InProgressError
    __del__ = lambda self: None
InProgressError_swigregister = _byteblower.InProgressError_swigregister
InProgressError_swigregister(InProgressError)

class AddressResolutionFailed(InitializationError):
    __swig_setmethods__ = {}
    for _s in [InitializationError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AddressResolutionFailed, name, value)
    __swig_getmethods__ = {}
    for _s in [InitializationError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AddressResolutionFailed, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _byteblower.new_AddressResolutionFailed(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _byteblower.delete_AddressResolutionFailed
    __del__ = lambda self: None
AddressResolutionFailed_swigregister = _byteblower.AddressResolutionFailed_swigregister
AddressResolutionFailed_swigregister(AddressResolutionFailed)

class DHCPFailed(InitializationError):
    __swig_setmethods__ = {}
    for _s in [InitializationError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DHCPFailed, name, value)
    __swig_getmethods__ = {}
    for _s in [InitializationError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DHCPFailed, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _byteblower.new_DHCPFailed(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _byteblower.delete_DHCPFailed
    __del__ = lambda self: None
DHCPFailed_swigregister = _byteblower.DHCPFailed_swigregister
DHCPFailed_swigregister(DHCPFailed)

class RouterRequired(InitializationError):
    __swig_setmethods__ = {}
    for _s in [InitializationError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RouterRequired, name, value)
    __swig_getmethods__ = {}
    for _s in [InitializationError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RouterRequired, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _byteblower.new_RouterRequired(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _byteblower.delete_RouterRequired
    __del__ = lambda self: None
RouterRequired_swigregister = _byteblower.RouterRequired_swigregister
RouterRequired_swigregister(RouterRequired)

class RouterSolicitationFailed(InitializationError):
    __swig_setmethods__ = {}
    for _s in [InitializationError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RouterSolicitationFailed, name, value)
    __swig_getmethods__ = {}
    for _s in [InitializationError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RouterSolicitationFailed, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _byteblower.new_RouterSolicitationFailed(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _byteblower.delete_RouterSolicitationFailed
    __del__ = lambda self: None
RouterSolicitationFailed_swigregister = _byteblower.RouterSolicitationFailed_swigregister
RouterSolicitationFailed_swigregister(RouterSolicitationFailed)

class TCPAlreadyConnected(InitializationError):
    __swig_setmethods__ = {}
    for _s in [InitializationError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TCPAlreadyConnected, name, value)
    __swig_getmethods__ = {}
    for _s in [InitializationError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TCPAlreadyConnected, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _byteblower.new_TCPAlreadyConnected(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _byteblower.delete_TCPAlreadyConnected
    __del__ = lambda self: None
TCPAlreadyConnected_swigregister = _byteblower.TCPAlreadyConnected_swigregister
TCPAlreadyConnected_swigregister(TCPAlreadyConnected)

class TCPConnectionRefused(InitializationError):
    __swig_setmethods__ = {}
    for _s in [InitializationError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TCPConnectionRefused, name, value)
    __swig_getmethods__ = {}
    for _s in [InitializationError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TCPConnectionRefused, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _byteblower.new_TCPConnectionRefused(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _byteblower.delete_TCPConnectionRefused
    __del__ = lambda self: None
TCPConnectionRefused_swigregister = _byteblower.TCPConnectionRefused_swigregister
TCPConnectionRefused_swigregister(TCPConnectionRefused)

class TCPConnectionTimout(InitializationError):
    __swig_setmethods__ = {}
    for _s in [InitializationError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TCPConnectionTimout, name, value)
    __swig_getmethods__ = {}
    for _s in [InitializationError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TCPConnectionTimout, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _byteblower.new_TCPConnectionTimout(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _byteblower.delete_TCPConnectionTimout
    __del__ = lambda self: None
TCPConnectionTimout_swigregister = _byteblower.TCPConnectionTimout_swigregister
TCPConnectionTimout_swigregister(TCPConnectionTimout)

class TCPConnectionResetByPeer(DomainError):
    __swig_setmethods__ = {}
    for _s in [DomainError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TCPConnectionResetByPeer, name, value)
    __swig_getmethods__ = {}
    for _s in [DomainError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TCPConnectionResetByPeer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _byteblower.new_TCPConnectionResetByPeer(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _byteblower.delete_TCPConnectionResetByPeer
    __del__ = lambda self: None
TCPConnectionResetByPeer_swigregister = _byteblower.TCPConnectionResetByPeer_swigregister
TCPConnectionResetByPeer_swigregister(TCPConnectionResetByPeer)

class TCPConnectionAborted(DomainError):
    __swig_setmethods__ = {}
    for _s in [DomainError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TCPConnectionAborted, name, value)
    __swig_getmethods__ = {}
    for _s in [DomainError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TCPConnectionAborted, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _byteblower.new_TCPConnectionAborted(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _byteblower.delete_TCPConnectionAborted
    __del__ = lambda self: None
TCPConnectionAborted_swigregister = _byteblower.TCPConnectionAborted_swigregister
TCPConnectionAborted_swigregister(TCPConnectionAborted)

class PortNumberAlreadyUsed(ConfigError):
    __swig_setmethods__ = {}
    for _s in [ConfigError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortNumberAlreadyUsed, name, value)
    __swig_getmethods__ = {}
    for _s in [ConfigError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PortNumberAlreadyUsed, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _byteblower.new_PortNumberAlreadyUsed(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _byteblower.delete_PortNumberAlreadyUsed
    __del__ = lambda self: None
PortNumberAlreadyUsed_swigregister = _byteblower.PortNumberAlreadyUsed_swigregister
PortNumberAlreadyUsed_swigregister(PortNumberAlreadyUsed)

class ByteBlowerServerUnreachable(DomainError):
    __swig_setmethods__ = {}
    for _s in [DomainError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteBlowerServerUnreachable, name, value)
    __swig_getmethods__ = {}
    for _s in [DomainError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ByteBlowerServerUnreachable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _byteblower.new_ByteBlowerServerUnreachable(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _byteblower.delete_ByteBlowerServerUnreachable
    __del__ = lambda self: None
ByteBlowerServerUnreachable_swigregister = _byteblower.ByteBlowerServerUnreachable_swigregister
ByteBlowerServerUnreachable_swigregister(ByteBlowerServerUnreachable)

class MeetingPointUnreachable(DomainError):
    __swig_setmethods__ = {}
    for _s in [DomainError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeetingPointUnreachable, name, value)
    __swig_getmethods__ = {}
    for _s in [DomainError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MeetingPointUnreachable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _byteblower.new_MeetingPointUnreachable(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _byteblower.delete_MeetingPointUnreachable
    __del__ = lambda self: None
MeetingPointUnreachable_swigregister = _byteblower.MeetingPointUnreachable_swigregister
MeetingPointUnreachable_swigregister(MeetingPointUnreachable)

class ByteBlowerServerIncompatible(DomainError):
    __swig_setmethods__ = {}
    for _s in [DomainError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteBlowerServerIncompatible, name, value)
    __swig_getmethods__ = {}
    for _s in [DomainError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ByteBlowerServerIncompatible, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _byteblower.new_ByteBlowerServerIncompatible(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _byteblower.delete_ByteBlowerServerIncompatible
    __del__ = lambda self: None
ByteBlowerServerIncompatible_swigregister = _byteblower.ByteBlowerServerIncompatible_swigregister
ByteBlowerServerIncompatible_swigregister(ByteBlowerServerIncompatible)

class UnsupportedFeature(DomainError):
    __swig_setmethods__ = {}
    for _s in [DomainError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsupportedFeature, name, value)
    __swig_getmethods__ = {}
    for _s in [DomainError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnsupportedFeature, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _byteblower.new_UnsupportedFeature(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _byteblower.delete_UnsupportedFeature
    __del__ = lambda self: None
UnsupportedFeature_swigregister = _byteblower.UnsupportedFeature_swigregister
UnsupportedFeature_swigregister(UnsupportedFeature)

class ResponseTimeout(DomainError):
    __swig_setmethods__ = {}
    for _s in [DomainError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResponseTimeout, name, value)
    __swig_getmethods__ = {}
    for _s in [DomainError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResponseTimeout, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _byteblower.new_ResponseTimeout(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _byteblower.delete_ResponseTimeout
    __del__ = lambda self: None
ResponseTimeout_swigregister = _byteblower.ResponseTimeout_swigregister
ResponseTimeout_swigregister(ResponseTimeout)


_byteblower.EXCENTIS_ARCHLIB_HAVE_COMPAT_WARNINGS_swigconstant(_byteblower)
EXCENTIS_ARCHLIB_HAVE_COMPAT_WARNINGS = _byteblower.EXCENTIS_ARCHLIB_HAVE_COMPAT_WARNINGS

_byteblower.EXCENTIS_COMPAT_HAS_CXX0X_swigconstant(_byteblower)
EXCENTIS_COMPAT_HAS_CXX0X = _byteblower.EXCENTIS_COMPAT_HAS_CXX0X

_byteblower.EXCENTIS_COMPAT_HAS_CPP0X_swigconstant(_byteblower)
EXCENTIS_COMPAT_HAS_CPP0X = _byteblower.EXCENTIS_COMPAT_HAS_CPP0X

_byteblower.EXCENTIS_COMPAT_HAS_CXX11_swigconstant(_byteblower)
EXCENTIS_COMPAT_HAS_CXX11 = _byteblower.EXCENTIS_COMPAT_HAS_CXX11
class DataSize(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataSize, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataSize, name)
    __repr__ = _swig_repr

    def __init__(self, bytes):
        this = _byteblower.new_DataSize(bytes)
        try:
            self.this.append(this)
        except:
            self.this = this

    def BytesGet(self):
        return _byteblower.DataSize_BytesGet(self)

    def KibiBytesGet(self):
        return _byteblower.DataSize_KibiBytesGet(self)

    def MebiBytesGet(self):
        return _byteblower.DataSize_MebiBytesGet(self)

    def GibiBytesGet(self):
        return _byteblower.DataSize_GibiBytesGet(self)

    def toString(self):
        return _byteblower.DataSize_toString(self)
    __swig_destroy__ = _byteblower.delete_DataSize
    __del__ = lambda self: None
DataSize_swigregister = _byteblower.DataSize_swigregister
DataSize_swigregister(DataSize)
cvar = _byteblower.cvar
MAX_U_INT16 = cvar.MAX_U_INT16
MAX_U_INT32 = cvar.MAX_U_INT32
MAX_U_INT64 = cvar.MAX_U_INT64
MAX_INT16 = cvar.MAX_INT16
MAX_INT32 = cvar.MAX_INT32
MAX_INT64 = cvar.MAX_INT64

class Duration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Duration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Duration, name)
    __repr__ = _swig_repr

    def __init__(self, ns):
        this = _byteblower.new_Duration(ns)
        try:
            self.this.append(this)
        except:
            self.this = this

    def NanosecondsGet(self):
        return _byteblower.Duration_NanosecondsGet(self)

    def MicrosecondsGet(self):
        return _byteblower.Duration_MicrosecondsGet(self)

    def MillisecondsGet(self):
        return _byteblower.Duration_MillisecondsGet(self)

    def SecondsGet(self):
        return _byteblower.Duration_SecondsGet(self)

    def toString(self):
        return _byteblower.Duration_toString(self)
    __swig_destroy__ = _byteblower.delete_Duration
    __del__ = lambda self: None
Duration_swigregister = _byteblower.Duration_swigregister
Duration_swigregister(Duration)


_byteblower.ResultDataType_Cumulative_swigconstant(_byteblower)
ResultDataType_Cumulative = _byteblower.ResultDataType_Cumulative

_byteblower.ResultDataType_Interval_swigconstant(_byteblower)
ResultDataType_Interval = _byteblower.ResultDataType_Interval
class DataRate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataRate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataRate, name)
    __repr__ = _swig_repr

    def __init__(self, inSize, inDuration):
        this = _byteblower.new_DataRate(inSize, inDuration)
        try:
            self.this.append(this)
        except:
            self.this = this

    def toString(self):
        return _byteblower.DataRate_toString(self)

    def ByteRateGet(self):
        return _byteblower.DataRate_ByteRateGet(self)

    def BitRateGet(self):
        return _byteblower.DataRate_BitRateGet(self)

    def KbpsGet(self):
        return _byteblower.DataRate_KbpsGet(self)

    def MbpsGet(self):
        return _byteblower.DataRate_MbpsGet(self)

    def GbpsGet(self):
        return _byteblower.DataRate_GbpsGet(self)

    def bitrate(self):
        return _byteblower.DataRate_bitrate(self)

    def byterate(self):
        return _byteblower.DataRate_byterate(self)
    __swig_destroy__ = _byteblower.delete_DataRate
    __del__ = lambda self: None
DataRate_swigregister = _byteblower.DataRate_swigregister
DataRate_swigregister(DataRate)


_byteblower.FrameTagType_TimeStamp_swigconstant(_byteblower)
FrameTagType_TimeStamp = _byteblower.FrameTagType_TimeStamp

_byteblower.FrameTagType_SequenceNumber_swigconstant(_byteblower)
FrameTagType_SequenceNumber = _byteblower.FrameTagType_SequenceNumber

_byteblower.TimeStampFormat_Microseconds_swigconstant(_byteblower)
TimeStampFormat_Microseconds = _byteblower.TimeStampFormat_Microseconds

_byteblower.TimeStampFormat_Microseconds_CRC_swigconstant(_byteblower)
TimeStampFormat_Microseconds_CRC = _byteblower.TimeStampFormat_Microseconds_CRC

_byteblower.TimeStampFormat_TenNanoseconds_swigconstant(_byteblower)
TimeStampFormat_TenNanoseconds = _byteblower.TimeStampFormat_TenNanoseconds

_byteblower.SequenceNumberFormat_SequenceNumber_0_swigconstant(_byteblower)
SequenceNumberFormat_SequenceNumber_0 = _byteblower.SequenceNumberFormat_SequenceNumber_0

_byteblower.SequenceNumberFormat_SequenceNumber_0_CRC_swigconstant(_byteblower)
SequenceNumberFormat_SequenceNumber_0_CRC = _byteblower.SequenceNumberFormat_SequenceNumber_0_CRC

_byteblower.LinkStatus_Offline_swigconstant(_byteblower)
LinkStatus_Offline = _byteblower.LinkStatus_Offline

_byteblower.LinkStatus_Online_swigconstant(_byteblower)
LinkStatus_Online = _byteblower.LinkStatus_Online

_byteblower.LinkStatus_Unplugged_swigconstant(_byteblower)
LinkStatus_Unplugged = _byteblower.LinkStatus_Unplugged

_byteblower.LinkStatus_Unknown_swigconstant(_byteblower)
LinkStatus_Unknown = _byteblower.LinkStatus_Unknown

def ConvertLinkStatusToString(inLinkStatus):
    return _byteblower.ConvertLinkStatusToString(inLinkStatus)
ConvertLinkStatusToString = _byteblower.ConvertLinkStatusToString

def ParseLinkStatus(arg1):
    return _byteblower.ParseLinkStatus(arg1)
ParseLinkStatus = _byteblower.ParseLinkStatus

_byteblower.LinkType_Ethernet_swigconstant(_byteblower)
LinkType_Ethernet = _byteblower.LinkType_Ethernet

_byteblower.LinkType_USB_swigconstant(_byteblower)
LinkType_USB = _byteblower.LinkType_USB

def ConvertLinkTypeToString(inLinkType):
    return _byteblower.ConvertLinkTypeToString(inLinkType)
ConvertLinkTypeToString = _byteblower.ConvertLinkTypeToString

def ParseLinkType(arg1):
    return _byteblower.ParseLinkType(arg1)
ParseLinkType = _byteblower.ParseLinkType

_byteblower.PhysicalInterfaceType_Trunk_swigconstant(_byteblower)
PhysicalInterfaceType_Trunk = _byteblower.PhysicalInterfaceType_Trunk

_byteblower.PhysicalInterfaceType_NonTrunk_swigconstant(_byteblower)
PhysicalInterfaceType_NonTrunk = _byteblower.PhysicalInterfaceType_NonTrunk

_byteblower.PhysicalInterfaceType_NonTrunkUSB_swigconstant(_byteblower)
PhysicalInterfaceType_NonTrunkUSB = _byteblower.PhysicalInterfaceType_NonTrunkUSB

def ConvertPhysicalInterfaceTypeToString(inType):
    return _byteblower.ConvertPhysicalInterfaceTypeToString(inType)
ConvertPhysicalInterfaceTypeToString = _byteblower.ConvertPhysicalInterfaceTypeToString

def ParsePhysicalInterfaceType(inString):
    return _byteblower.ParsePhysicalInterfaceType(inString)
ParsePhysicalInterfaceType = _byteblower.ParsePhysicalInterfaceType

_byteblower.IGMPVersion_IGMPv1_swigconstant(_byteblower)
IGMPVersion_IGMPv1 = _byteblower.IGMPVersion_IGMPv1

_byteblower.IGMPVersion_IGMPv2_swigconstant(_byteblower)
IGMPVersion_IGMPv2 = _byteblower.IGMPVersion_IGMPv2

_byteblower.IGMPVersion_IGMPv3_swigconstant(_byteblower)
IGMPVersion_IGMPv3 = _byteblower.IGMPVersion_IGMPv3

def ParseIGMPVersion(inIGMPVersion):
    return _byteblower.ParseIGMPVersion(inIGMPVersion)
ParseIGMPVersion = _byteblower.ParseIGMPVersion

def IGMPVersionToString(inIGMPVersion):
    return _byteblower.IGMPVersionToString(inIGMPVersion)
IGMPVersionToString = _byteblower.IGMPVersionToString

_byteblower.MLDVersion_MLDv1_swigconstant(_byteblower)
MLDVersion_MLDv1 = _byteblower.MLDVersion_MLDv1

_byteblower.MLDVersion_MLDv2_swigconstant(_byteblower)
MLDVersion_MLDv2 = _byteblower.MLDVersion_MLDv2

def ParseMLDVersion(inMLDVersion):
    return _byteblower.ParseMLDVersion(inMLDVersion)
ParseMLDVersion = _byteblower.ParseMLDVersion

def MLDVersionToString(inMLDVersion):
    return _byteblower.MLDVersionToString(inMLDVersion)
MLDVersionToString = _byteblower.MLDVersionToString

_byteblower.MulticastSourceFilter_Exclude_swigconstant(_byteblower)
MulticastSourceFilter_Exclude = _byteblower.MulticastSourceFilter_Exclude

_byteblower.MulticastSourceFilter_Include_swigconstant(_byteblower)
MulticastSourceFilter_Include = _byteblower.MulticastSourceFilter_Include

def ParseMulticastFilter(inMulticastFilter):
    return _byteblower.ParseMulticastFilter(inMulticastFilter)
ParseMulticastFilter = _byteblower.ParseMulticastFilter

def MulticastFilterToString(inMulticastFilter):
    return _byteblower.MulticastFilterToString(inMulticastFilter)
MulticastFilterToString = _byteblower.MulticastFilterToString

_byteblower.RetransmissionPolicy_Unknown_swigconstant(_byteblower)
RetransmissionPolicy_Unknown = _byteblower.RetransmissionPolicy_Unknown

_byteblower.RetransmissionPolicy_RfcSuggested_swigconstant(_byteblower)
RetransmissionPolicy_RfcSuggested = _byteblower.RetransmissionPolicy_RfcSuggested

_byteblower.RetransmissionPolicy_FixedTiming_swigconstant(_byteblower)
RetransmissionPolicy_FixedTiming = _byteblower.RetransmissionPolicy_FixedTiming

_byteblower.TimeUnit_Seconds_swigconstant(_byteblower)
TimeUnit_Seconds = _byteblower.TimeUnit_Seconds

_byteblower.TimeUnit_Milliseconds_swigconstant(_byteblower)
TimeUnit_Milliseconds = _byteblower.TimeUnit_Milliseconds

_byteblower.TimeUnit_Microseconds_swigconstant(_byteblower)
TimeUnit_Microseconds = _byteblower.TimeUnit_Microseconds

_byteblower.TimeUnit_Nanoseconds_swigconstant(_byteblower)
TimeUnit_Nanoseconds = _byteblower.TimeUnit_Nanoseconds

def ConvertTimeUnitToString(inTimeUnit):
    return _byteblower.ConvertTimeUnitToString(inTimeUnit)
ConvertTimeUnitToString = _byteblower.ConvertTimeUnitToString

def ParseTimeUnitFromString(arg1):
    return _byteblower.ParseTimeUnitFromString(arg1)
ParseTimeUnitFromString = _byteblower.ParseTimeUnitFromString

def ToNanoseconds(unit):
    return _byteblower.ToNanoseconds(unit)
ToNanoseconds = _byteblower.ToNanoseconds

_byteblower.DescriptionFormat_PlainText_swigconstant(_byteblower)
DescriptionFormat_PlainText = _byteblower.DescriptionFormat_PlainText
class AbstractObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def ParentGet(self):
        return _byteblower.AbstractObject_ParentGet(self)

    def DescriptionGet(self, *args, **kwargs):
        return _byteblower.AbstractObject_DescriptionGet(self, *args, **kwargs)

    def Refresh(self):
        return _byteblower.AbstractObject_Refresh(self)
AbstractObject_swigregister = _byteblower.AbstractObject_swigregister
AbstractObject_swigregister(AbstractObject)

class AbstractRefreshableResult(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractRefreshableResult, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractRefreshableResult, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _byteblower.delete_AbstractRefreshableResult
    __del__ = lambda self: None
AbstractRefreshableResult_swigregister = _byteblower.AbstractRefreshableResult_swigregister
AbstractRefreshableResult_swigregister(AbstractRefreshableResult)

class ByteBlowerInterface(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteBlowerInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ByteBlowerInterface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetPhysicalInterface(self):
        return _byteblower.ByteBlowerInterface_GetPhysicalInterface(self)

    def NameGet(self):
        return _byteblower.ByteBlowerInterface_NameGet(self)

    def SpeedGet(self):
        return _byteblower.ByteBlowerInterface_SpeedGet(self)

    def PortIdGet(self):
        return _byteblower.ByteBlowerInterface_PortIdGet(self)

    def PortCountGet(self):
        return _byteblower.ByteBlowerInterface_PortCountGet(self)

    def PortGet(self):
        return _byteblower.ByteBlowerInterface_PortGet(self)

    def PortCreate(self):
        return _byteblower.ByteBlowerInterface_PortCreate(self)

    def PortDestroy(self, inPort):
        return _byteblower.ByteBlowerInterface_PortDestroy(self, inPort)

    def PacketDumpCreate(self):
        return _byteblower.ByteBlowerInterface_PacketDumpCreate(self)

    def PacketDumpDestroy(self, packet_dump):
        return _byteblower.ByteBlowerInterface_PacketDumpDestroy(self, packet_dump)
ByteBlowerInterface_swigregister = _byteblower.ByteBlowerInterface_swigregister
ByteBlowerInterface_swigregister(ByteBlowerInterface)

class ByteBlower(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteBlower, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ByteBlower, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    DefaultTimeout = _byteblower.ByteBlower_DefaultTimeout
    __swig_getmethods__["InstanceGet"] = lambda x: _byteblower.ByteBlower_InstanceGet
    if _newclass:
        InstanceGet = staticmethod(_byteblower.ByteBlower_InstanceGet)

    def APIVersionGet(self):
        return _byteblower.ByteBlower_APIVersionGet(self)

    def ServerAdd(self, *args, **kwargs):
        return _byteblower.ByteBlower_ServerAdd(self, *args, **kwargs)

    def ServerGet(self):
        return _byteblower.ByteBlower_ServerGet(self)

    def ServerRemove(self, inByteBlowerServer):
        return _byteblower.ByteBlower_ServerRemove(self, inByteBlowerServer)

    def ServerRemoveAll(self):
        return _byteblower.ByteBlower_ServerRemoveAll(self)

    def MeetingPointAdd(self, *args, **kwargs):
        return _byteblower.ByteBlower_MeetingPointAdd(self, *args, **kwargs)

    def MeetingPointGet(self):
        return _byteblower.ByteBlower_MeetingPointGet(self)

    def MeetingPointRemove(self, inMeetingPoint):
        return _byteblower.ByteBlower_MeetingPointRemove(self, inMeetingPoint)

    def MeetingPointRemoveAll(self):
        return _byteblower.ByteBlower_MeetingPointRemoveAll(self)

    def ServerCount(self):
        return _byteblower.ByteBlower_ServerCount(self)

    def PortsStart(self, inPorts):
        return _byteblower.ByteBlower_PortsStart(self, inPorts)

    def PortsStop(self, inPorts):
        return _byteblower.ByteBlower_PortsStop(self, inPorts)

    def PortsStartAll(self):
        return _byteblower.ByteBlower_PortsStartAll(self)

    def PortsStopAll(self):
        return _byteblower.ByteBlower_PortsStopAll(self)

    def WirelessEndpointsStart(self, inWirelessEndpoints):
        return _byteblower.ByteBlower_WirelessEndpointsStart(self, inWirelessEndpoints)

    def WirelessEndpointsStartAndWait(self, inWirelessEndpoints):
        return _byteblower.ByteBlower_WirelessEndpointsStartAndWait(self, inWirelessEndpoints)

    def WirelessEndpointsPrepare(self, inWirelessEndpoints):
        return _byteblower.ByteBlower_WirelessEndpointsPrepare(self, inWirelessEndpoints)

    def WirelessEndpointsPrepareAsync(self, inWirelessEndpoints):
        return _byteblower.ByteBlower_WirelessEndpointsPrepareAsync(self, inWirelessEndpoints)

    def ResultsRefresh(self, inResults):
        return _byteblower.ByteBlower_ResultsRefresh(self, inResults)

    def SchedulesStart(self, inSchedules):
        return _byteblower.ByteBlower_SchedulesStart(self, inSchedules)

    def SchedulesStop(self, inSchedules):
        return _byteblower.ByteBlower_SchedulesStop(self, inSchedules)

    def ScheduleGroupCreate(self):
        return _byteblower.ByteBlower_ScheduleGroupCreate(self)

    def ScheduleGroupGet(self):
        return _byteblower.ByteBlower_ScheduleGroupGet(self)
    __swig_getmethods__["DestroyInstance"] = lambda x: _byteblower.ByteBlower_DestroyInstance
    if _newclass:
        DestroyInstance = staticmethod(_byteblower.ByteBlower_DestroyInstance)
ByteBlower_swigregister = _byteblower.ByteBlower_swigregister
ByteBlower_swigregister(ByteBlower)

def ByteBlower_InstanceGet():
    return _byteblower.ByteBlower_InstanceGet()
ByteBlower_InstanceGet = _byteblower.ByteBlower_InstanceGet

def ByteBlower_DestroyInstance():
    return _byteblower.ByteBlower_DestroyInstance()
ByteBlower_DestroyInstance = _byteblower.ByteBlower_DestroyInstance


def BB():
    return _byteblower.BB()
BB = _byteblower.BB
class User(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, User, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, User, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def NameGet(self):
        return _byteblower.User_NameGet(self)

    def InterfaceGet(self):
        return _byteblower.User_InterfaceGet(self)
User_swigregister = _byteblower.User_swigregister
User_swigregister(User)

class UserMobile(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserMobile, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UserMobile, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def NameGet(self):
        return _byteblower.UserMobile_NameGet(self)

    def UUIDGet(self):
        return _byteblower.UserMobile_UUIDGet(self)
UserMobile_swigregister = _byteblower.UserMobile_swigregister
UserMobile_swigregister(UserMobile)

class StreamResultSnapshot(AbstractRefreshableResult):
    __swig_setmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamResultSnapshot, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamResultSnapshot, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def TimestampGet(self):
        return _byteblower.StreamResultSnapshot_TimestampGet(self)

    def TimestampFirstGet(self):
        return _byteblower.StreamResultSnapshot_TimestampFirstGet(self)

    def TimestampLastGet(self):
        return _byteblower.StreamResultSnapshot_TimestampLastGet(self)

    def PacketCountGet(self):
        return _byteblower.StreamResultSnapshot_PacketCountGet(self)

    def ByteCountGet(self):
        return _byteblower.StreamResultSnapshot_ByteCountGet(self)

    def FramesizeMaximumGet(self):
        return _byteblower.StreamResultSnapshot_FramesizeMaximumGet(self)

    def FramesizeMinimumGet(self):
        return _byteblower.StreamResultSnapshot_FramesizeMinimumGet(self)

    def IntervalDurationGet(self):
        return _byteblower.StreamResultSnapshot_IntervalDurationGet(self)

    def RefreshTimestampGet(self):
        return _byteblower.StreamResultSnapshot_RefreshTimestampGet(self)
StreamResultSnapshot_swigregister = _byteblower.StreamResultSnapshot_swigregister
StreamResultSnapshot_swigregister(StreamResultSnapshot)

class StreamResultData(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamResultData, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamResultData, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def TimestampGet(self):
        return _byteblower.StreamResultData_TimestampGet(self)

    def TimestampFirstGet(self):
        return _byteblower.StreamResultData_TimestampFirstGet(self)

    def TimestampLastGet(self):
        return _byteblower.StreamResultData_TimestampLastGet(self)

    def PacketCountGet(self):
        return _byteblower.StreamResultData_PacketCountGet(self)

    def ByteCountGet(self):
        return _byteblower.StreamResultData_ByteCountGet(self)

    def FramesizeMaximumGet(self):
        return _byteblower.StreamResultData_FramesizeMaximumGet(self)

    def FramesizeMinimumGet(self):
        return _byteblower.StreamResultData_FramesizeMinimumGet(self)

    def IntervalDurationGet(self):
        return _byteblower.StreamResultData_IntervalDurationGet(self)
StreamResultData_swigregister = _byteblower.StreamResultData_swigregister
StreamResultData_swigregister(StreamResultData)

class StreamResultList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamResultList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamResultList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.StreamResultList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.StreamResultList___nonzero__(self)

    def __bool__(self):
        return _byteblower.StreamResultList___bool__(self)

    def __len__(self):
        return _byteblower.StreamResultList___len__(self)

    def pop(self):
        return _byteblower.StreamResultList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.StreamResultList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.StreamResultList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.StreamResultList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.StreamResultList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.StreamResultList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.StreamResultList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.StreamResultList_append(self, x)

    def empty(self):
        return _byteblower.StreamResultList_empty(self)

    def size(self):
        return _byteblower.StreamResultList_size(self)

    def clear(self):
        return _byteblower.StreamResultList_clear(self)

    def swap(self, v):
        return _byteblower.StreamResultList_swap(self, v)

    def get_allocator(self):
        return _byteblower.StreamResultList_get_allocator(self)

    def begin(self):
        return _byteblower.StreamResultList_begin(self)

    def end(self):
        return _byteblower.StreamResultList_end(self)

    def rbegin(self):
        return _byteblower.StreamResultList_rbegin(self)

    def rend(self):
        return _byteblower.StreamResultList_rend(self)

    def pop_back(self):
        return _byteblower.StreamResultList_pop_back(self)

    def erase(self, *args):
        return _byteblower.StreamResultList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_StreamResultList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.StreamResultList_push_back(self, x)

    def front(self):
        return _byteblower.StreamResultList_front(self)

    def back(self):
        return _byteblower.StreamResultList_back(self)

    def assign(self, n, x):
        return _byteblower.StreamResultList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.StreamResultList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.StreamResultList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.StreamResultList_reserve(self, n)

    def capacity(self):
        return _byteblower.StreamResultList_capacity(self)
    __swig_destroy__ = _byteblower.delete_StreamResultList
    __del__ = lambda self: None
StreamResultList_swigregister = _byteblower.StreamResultList_swigregister
StreamResultList_swigregister(StreamResultList)

class StreamResultHistory(AbstractRefreshableResult):
    __swig_setmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamResultHistory, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamResultHistory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SamplingIntervalDurationGet(self):
        return _byteblower.StreamResultHistory_SamplingIntervalDurationGet(self)

    def SamplingBufferLengthGet(self):
        return _byteblower.StreamResultHistory_SamplingBufferLengthGet(self)

    def SamplingIntervalDurationSet(self, inDuration):
        return _byteblower.StreamResultHistory_SamplingIntervalDurationSet(self, inDuration)

    def SamplingBufferLengthSet(self, inLength):
        return _byteblower.StreamResultHistory_SamplingBufferLengthSet(self, inLength)

    def Clear(self):
        return _byteblower.StreamResultHistory_Clear(self)

    def CumulativeGet(self):
        return _byteblower.StreamResultHistory_CumulativeGet(self)

    def CumulativeGetByIndex(self, index):
        return _byteblower.StreamResultHistory_CumulativeGetByIndex(self, index)

    def CumulativeGetByTime(self, timestamp):
        return _byteblower.StreamResultHistory_CumulativeGetByTime(self, timestamp)

    def CumulativeLatestGet(self):
        return _byteblower.StreamResultHistory_CumulativeLatestGet(self)

    def CumulativeLengthGet(self):
        return _byteblower.StreamResultHistory_CumulativeLengthGet(self)

    def IntervalGet(self):
        return _byteblower.StreamResultHistory_IntervalGet(self)

    def IntervalGetByIndex(self, index):
        return _byteblower.StreamResultHistory_IntervalGetByIndex(self, index)

    def IntervalGetByTime(self, timestamp):
        return _byteblower.StreamResultHistory_IntervalGetByTime(self, timestamp)

    def IntervalLatestGet(self):
        return _byteblower.StreamResultHistory_IntervalLatestGet(self)

    def IntervalLengthGet(self):
        return _byteblower.StreamResultHistory_IntervalLengthGet(self)

    def RefreshTimestampGet(self):
        return _byteblower.StreamResultHistory_RefreshTimestampGet(self)
StreamResultHistory_swigregister = _byteblower.StreamResultHistory_swigregister
StreamResultHistory_swigregister(StreamResultHistory)

class StreamRuntimeStatus(AbstractRefreshableResult):
    __swig_setmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamRuntimeStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamRuntimeStatus, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    transmit_error_status_UNKNOWN = _byteblower.StreamRuntimeStatus_transmit_error_status_UNKNOWN
    transmit_error_status_NONE = _byteblower.StreamRuntimeStatus_transmit_error_status_NONE
    transmit_error_status_OUT_OF_RESOURCES = _byteblower.StreamRuntimeStatus_transmit_error_status_OUT_OF_RESOURCES
    transmit_error_source_UNKNOWN = _byteblower.StreamRuntimeStatus_transmit_error_source_UNKNOWN
    transmit_error_source_NONE = _byteblower.StreamRuntimeStatus_transmit_error_source_NONE
    transmit_error_source_INTERFACE_HARDWARE = _byteblower.StreamRuntimeStatus_transmit_error_source_INTERFACE_HARDWARE
    transmit_error_source_SCHEDULING_CONFLICT = _byteblower.StreamRuntimeStatus_transmit_error_source_SCHEDULING_CONFLICT
    transmit_error_source_TXUSER = _byteblower.StreamRuntimeStatus_transmit_error_source_TXUSER
    transmit_status_UNKNOWN = _byteblower.StreamRuntimeStatus_transmit_status_UNKNOWN
    transmit_status_INACTIVE = _byteblower.StreamRuntimeStatus_transmit_status_INACTIVE
    transmit_status_ACTIVE = _byteblower.StreamRuntimeStatus_transmit_status_ACTIVE

    def StatusGet(self):
        return _byteblower.StreamRuntimeStatus_StatusGet(self)

    def ErrorStatusGet(self):
        return _byteblower.StreamRuntimeStatus_ErrorStatusGet(self)

    def ErrorSourceGet(self):
        return _byteblower.StreamRuntimeStatus_ErrorSourceGet(self)

    def RefreshTimestampGet(self):
        return _byteblower.StreamRuntimeStatus_RefreshTimestampGet(self)
StreamRuntimeStatus_swigregister = _byteblower.StreamRuntimeStatus_swigregister
StreamRuntimeStatus_swigregister(StreamRuntimeStatus)


def ConvertRuntimeTransmitStatus(inStatus):
    return _byteblower.ConvertRuntimeTransmitStatus(inStatus)
ConvertRuntimeTransmitStatus = _byteblower.ConvertRuntimeTransmitStatus

def ConvertRuntimeTransmitErrorStatus(inStatus):
    return _byteblower.ConvertRuntimeTransmitErrorStatus(inStatus)
ConvertRuntimeTransmitErrorStatus = _byteblower.ConvertRuntimeTransmitErrorStatus

def ConvertRuntimeTransmitErrorSource(inSource):
    return _byteblower.ConvertRuntimeTransmitErrorSource(inSource)
ConvertRuntimeTransmitErrorSource = _byteblower.ConvertRuntimeTransmitErrorSource
class AbstractStream(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractStream, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def NumberOfFramesGet(self):
        return _byteblower.AbstractStream_NumberOfFramesGet(self)

    def NumberOfFramesSet(self, nof):
        return _byteblower.AbstractStream_NumberOfFramesSet(self, nof)

    def InterFrameGapGet(self):
        return _byteblower.AbstractStream_InterFrameGapGet(self)

    def InterFrameGapSet(self, interFrameGap):
        return _byteblower.AbstractStream_InterFrameGapSet(self, interFrameGap)

    def InitialTimeToWaitGet(self):
        return _byteblower.AbstractStream_InitialTimeToWaitGet(self)

    def InitialTimeToWaitSet(self, initTimeToWait):
        return _byteblower.AbstractStream_InitialTimeToWaitSet(self, initTimeToWait)

    def ResultClear(self):
        return _byteblower.AbstractStream_ResultClear(self)

    def ResultGet(self):
        return _byteblower.AbstractStream_ResultGet(self)

    def ResultHistoryGet(self):
        return _byteblower.AbstractStream_ResultHistoryGet(self)
AbstractStream_swigregister = _byteblower.AbstractStream_swigregister
AbstractStream_swigregister(AbstractStream)

class Stream(AbstractStream, AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractStream, AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stream, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractStream, AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Stream, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def PortGet(self):
        return _byteblower.Stream_PortGet(self)

    def NumberOfFramesGet(self):
        return _byteblower.Stream_NumberOfFramesGet(self)

    def NumberOfFramesSet(self, nof):
        return _byteblower.Stream_NumberOfFramesSet(self, nof)

    def InterFrameGapGet(self):
        return _byteblower.Stream_InterFrameGapGet(self)

    def InterFrameGapSet(self, interFrameGap):
        return _byteblower.Stream_InterFrameGapSet(self, interFrameGap)

    def InitialTimeToWaitGet(self):
        return _byteblower.Stream_InitialTimeToWaitGet(self)

    def InitialTimeToWaitSet(self, initTimeToWait):
        return _byteblower.Stream_InitialTimeToWaitSet(self, initTimeToWait)

    def Start(self):
        return _byteblower.Stream_Start(self)

    def Stop(self):
        return _byteblower.Stream_Stop(self)

    def ResultClear(self):
        return _byteblower.Stream_ResultClear(self)

    def ResultGet(self):
        return _byteblower.Stream_ResultGet(self)

    def ResultHistoryGet(self):
        return _byteblower.Stream_ResultHistoryGet(self)

    def FrameAdd(self):
        return _byteblower.Stream_FrameAdd(self)

    def FrameGet(self):
        return _byteblower.Stream_FrameGet(self)

    def FrameDestroy(self, inFrame):
        return _byteblower.Stream_FrameDestroy(self, inFrame)

    def RandomSizeModifierAdd(self):
        return _byteblower.Stream_RandomSizeModifierAdd(self)

    def GrowingSizeModifierAdd(self):
        return _byteblower.Stream_GrowingSizeModifierAdd(self)

    def MultipleBurstModifierAdd(self):
        return _byteblower.Stream_MultipleBurstModifierAdd(self)

    def NormalDistributionTimingModifierAdd(self):
        return _byteblower.Stream_NormalDistributionTimingModifierAdd(self)

    def ModifierFrameGet(self):
        return _byteblower.Stream_ModifierFrameGet(self)

    def ModifierFrameDestroy(self):
        return _byteblower.Stream_ModifierFrameDestroy(self)

    def ModifierTimingGet(self):
        return _byteblower.Stream_ModifierTimingGet(self)

    def ModifierTimingDestroy(self):
        return _byteblower.Stream_ModifierTimingDestroy(self)

    def StatusGet(self):
        return _byteblower.Stream_StatusGet(self)
Stream_swigregister = _byteblower.Stream_swigregister
Stream_swigregister(Stream)

class StreamMobile(AbstractStream, AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractStream, AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamMobile, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractStream, AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamMobile, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def NumberOfFramesGet(self):
        return _byteblower.StreamMobile_NumberOfFramesGet(self)

    def NumberOfFramesSet(self, nof):
        return _byteblower.StreamMobile_NumberOfFramesSet(self, nof)

    def InterFrameGapGet(self):
        return _byteblower.StreamMobile_InterFrameGapGet(self)

    def InterFrameGapSet(self, interFrameGap):
        return _byteblower.StreamMobile_InterFrameGapSet(self, interFrameGap)

    def InitialTimeToWaitGet(self):
        return _byteblower.StreamMobile_InitialTimeToWaitGet(self)

    def InitialTimeToWaitSet(self, initTimeToWait):
        return _byteblower.StreamMobile_InitialTimeToWaitSet(self, initTimeToWait)

    def ResultClear(self):
        return _byteblower.StreamMobile_ResultClear(self)

    def ResultGet(self):
        return _byteblower.StreamMobile_ResultGet(self)

    def ResultHistoryGet(self):
        return _byteblower.StreamMobile_ResultHistoryGet(self)

    def FrameAdd(self):
        return _byteblower.StreamMobile_FrameAdd(self)

    def FrameGet(self):
        return _byteblower.StreamMobile_FrameGet(self)

    def FrameDestroy(self, inFrame):
        return _byteblower.StreamMobile_FrameDestroy(self, inFrame)

    def SourcePortSet(self, inPort):
        return _byteblower.StreamMobile_SourcePortSet(self, inPort)

    def SourcePortGet(self):
        return _byteblower.StreamMobile_SourcePortGet(self)

    def DestinationAddressSet(self, inAddress):
        return _byteblower.StreamMobile_DestinationAddressSet(self, inAddress)

    def DestinationAddressGet(self):
        return _byteblower.StreamMobile_DestinationAddressGet(self)

    def DestinationPortSet(self, inDestinationPort):
        return _byteblower.StreamMobile_DestinationPortSet(self, inDestinationPort)

    def DestinationPortGet(self):
        return _byteblower.StreamMobile_DestinationPortGet(self)

    def TypeOfServiceGet(self):
        return _byteblower.StreamMobile_TypeOfServiceGet(self)

    def TypeOfServiceSet(self, inTos):
        return _byteblower.StreamMobile_TypeOfServiceSet(self, inTos)
StreamMobile_swigregister = _byteblower.StreamMobile_swigregister
StreamMobile_swigregister(StreamMobile)

class Schedule(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schedule, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Schedule, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ServerGet(self):
        return _byteblower.Schedule_ServerGet(self)

    def InitialTimeToWaitGet(self):
        return _byteblower.Schedule_InitialTimeToWaitGet(self)

    def InitialTimeToWaitSet(self, ns):
        return _byteblower.Schedule_InitialTimeToWaitSet(self, ns)

    def Prepare(self):
        return _byteblower.Schedule_Prepare(self)

    def Start(self):
        return _byteblower.Schedule_Start(self)

    def Stop(self):
        return _byteblower.Schedule_Stop(self)

    def GetSchedulableObject(self):
        return _byteblower.Schedule_GetSchedulableObject(self)
Schedule_swigregister = _byteblower.Schedule_swigregister
Schedule_swigregister(Schedule)

class Rx(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rx, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rx, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def FilterSet(self, inFilter):
        return _byteblower.Rx_FilterSet(self, inFilter)

    def FilterGet(self):
        return _byteblower.Rx_FilterGet(self)
Rx_swigregister = _byteblower.Rx_swigregister
Rx_swigregister(Rx)

class TaggedRx(Rx):
    __swig_setmethods__ = {}
    for _s in [Rx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TaggedRx, name, value)
    __swig_getmethods__ = {}
    for _s in [Rx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TaggedRx, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def FrameTagGet(self):
        return _byteblower.TaggedRx_FrameTagGet(self)

    def FrameTagSet(self, fromFrameTagTx):
        return _byteblower.TaggedRx_FrameTagSet(self, fromFrameTagTx)

    def FrameTagDefaultSet(self):
        return _byteblower.TaggedRx_FrameTagDefaultSet(self)
TaggedRx_swigregister = _byteblower.TaggedRx_swigregister
TaggedRx_swigregister(TaggedRx)

class Capture(Rx):
    __swig_setmethods__ = {}
    for _s in [Rx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Capture, name, value)
    __swig_getmethods__ = {}
    for _s in [Rx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Capture, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def FileNameRemoteGet(self):
        return _byteblower.Capture_FileNameRemoteGet(self)

    def Start(self):
        return _byteblower.Capture_Start(self)

    def Stop(self):
        return _byteblower.Capture_Stop(self)

    def ResultGet(self):
        return _byteblower.Capture_ResultGet(self)
Capture_swigregister = _byteblower.Capture_swigregister
Capture_swigregister(Capture)

class SchedulableObject(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchedulableObject, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SchedulableObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _byteblower.delete_SchedulableObject
    __del__ = lambda self: None

    def ScheduleStart(self):
        return _byteblower.SchedulableObject_ScheduleStart(self)

    def ScheduleStop(self):
        return _byteblower.SchedulableObject_ScheduleStop(self)

    def ScheduleRemove(self, inSchedule):
        return _byteblower.SchedulableObject_ScheduleRemove(self, inSchedule)

    def ScheduleRemoveAll(self):
        return _byteblower.SchedulableObject_ScheduleRemoveAll(self)

    def ScheduleGet(self):
        return _byteblower.SchedulableObject_ScheduleGet(self)

    def ServerGet(self):
        return _byteblower.SchedulableObject_ServerGet(self)
SchedulableObject_swigregister = _byteblower.SchedulableObject_swigregister
SchedulableObject_swigregister(SchedulableObject)

class Layer25Configuration(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Layer25Configuration, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Layer25Configuration, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def PortGet(self):
        return _byteblower.Layer25Configuration_PortGet(self)
Layer25Configuration_swigregister = _byteblower.Layer25Configuration_swigregister
Layer25Configuration_swigregister(Layer25Configuration)

class DHCPv4SessionInfo(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DHCPv4SessionInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DHCPv4SessionInfo, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def TxGet(self):
        return _byteblower.DHCPv4SessionInfo_TxGet(self)

    def RxGet(self):
        return _byteblower.DHCPv4SessionInfo_RxGet(self)

    def DHCPOptionGet(self):
        return _byteblower.DHCPv4SessionInfo_DHCPOptionGet(self)

    def SiAddrGet(self):
        return _byteblower.DHCPv4SessionInfo_SiAddrGet(self)

    def GiAddrGet(self):
        return _byteblower.DHCPv4SessionInfo_GiAddrGet(self)

    def DHCPServerAddrGet(self):
        return _byteblower.DHCPv4SessionInfo_DHCPServerAddrGet(self)

    def LeaseTimeGet(self):
        return _byteblower.DHCPv4SessionInfo_LeaseTimeGet(self)

    def TransactionIDGet(self):
        return _byteblower.DHCPv4SessionInfo_TransactionIDGet(self)

    def RefreshTimestampGet(self):
        return _byteblower.DHCPv4SessionInfo_RefreshTimestampGet(self)
DHCPv4SessionInfo_swigregister = _byteblower.DHCPv4SessionInfo_swigregister
DHCPv4SessionInfo_swigregister(DHCPv4SessionInfo)

class DHCPv6SessionInfo(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DHCPv6SessionInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DHCPv6SessionInfo, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def TxGet(self):
        return _byteblower.DHCPv6SessionInfo_TxGet(self)

    def RxGet(self):
        return _byteblower.DHCPv6SessionInfo_RxGet(self)

    def RefreshTimestampGet(self):
        return _byteblower.DHCPv6SessionInfo_RefreshTimestampGet(self)
DHCPv6SessionInfo_swigregister = _byteblower.DHCPv6SessionInfo_swigregister
DHCPv6SessionInfo_swigregister(DHCPv6SessionInfo)

class DHCPv4Protocol(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DHCPv4Protocol, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DHCPv4Protocol, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Perform(self):
        return _byteblower.DHCPv4Protocol_Perform(self)

    def PerformAsync(self):
        return _byteblower.DHCPv4Protocol_PerformAsync(self)

    def Release(self):
        return _byteblower.DHCPv4Protocol_Release(self)

    def ReleaseEnable(self, inValue):
        return _byteblower.DHCPv4Protocol_ReleaseEnable(self, inValue)

    def ReleaseIsEnabled(self):
        return _byteblower.DHCPv4Protocol_ReleaseIsEnabled(self)

    def RetransmissionPolicyGet(self):
        return _byteblower.DHCPv4Protocol_RetransmissionPolicyGet(self)

    def RetransmissionPolicySet(self, policy):
        return _byteblower.DHCPv4Protocol_RetransmissionPolicySet(self, policy)

    def DiscoverInitialTimeoutGet(self):
        return _byteblower.DHCPv4Protocol_DiscoverInitialTimeoutGet(self)

    def DiscoverInitialTimeoutSet(self, inValue):
        return _byteblower.DHCPv4Protocol_DiscoverInitialTimeoutSet(self, inValue)

    def DiscoverMaxRetriesGet(self):
        return _byteblower.DHCPv4Protocol_DiscoverMaxRetriesGet(self)

    def DiscoverMaxRetriesSet(self, inValue):
        return _byteblower.DHCPv4Protocol_DiscoverMaxRetriesSet(self, inValue)

    def RequestInitialTimeoutGet(self):
        return _byteblower.DHCPv4Protocol_RequestInitialTimeoutGet(self)

    def RequestInitialTimeoutSet(self, inTime):
        return _byteblower.DHCPv4Protocol_RequestInitialTimeoutSet(self, inTime)

    def RequestMaxRetriesGet(self):
        return _byteblower.DHCPv4Protocol_RequestMaxRetriesGet(self)

    def RequestMaxRetriesSet(self, inValue):
        return _byteblower.DHCPv4Protocol_RequestMaxRetriesSet(self, inValue)

    def DHCPv4SessionInfoGet(self):
        return _byteblower.DHCPv4Protocol_DHCPv4SessionInfoGet(self)
DHCPv4Protocol_swigregister = _byteblower.DHCPv4Protocol_swigregister
DHCPv4Protocol_swigregister(DHCPv4Protocol)

class DHCPv6Protocol(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DHCPv6Protocol, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DHCPv6Protocol, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def PerformAsync(self):
        return _byteblower.DHCPv6Protocol_PerformAsync(self)

    def Perform(self):
        return _byteblower.DHCPv6Protocol_Perform(self)

    def Release(self):
        return _byteblower.DHCPv6Protocol_Release(self)

    def ReleaseEnable(self, inValue):
        return _byteblower.DHCPv6Protocol_ReleaseEnable(self, inValue)

    def ReleaseIsEnabled(self):
        return _byteblower.DHCPv6Protocol_ReleaseIsEnabled(self)

    def SolicitInitialTimeoutSet(self, arg2):
        return _byteblower.DHCPv6Protocol_SolicitInitialTimeoutSet(self, arg2)

    def SolicitInitialTimeoutGet(self):
        return _byteblower.DHCPv6Protocol_SolicitInitialTimeoutGet(self)

    def SolicitMaxTimeoutSet(self, arg2):
        return _byteblower.DHCPv6Protocol_SolicitMaxTimeoutSet(self, arg2)

    def SolicitMaxTimeoutGet(self):
        return _byteblower.DHCPv6Protocol_SolicitMaxTimeoutGet(self)

    def SolicitMaxRetriesSet(self, arg2):
        return _byteblower.DHCPv6Protocol_SolicitMaxRetriesSet(self, arg2)

    def SolicitMaxRetriesGet(self):
        return _byteblower.DHCPv6Protocol_SolicitMaxRetriesGet(self)

    def SolicitMaxDurationSet(self, arg2):
        return _byteblower.DHCPv6Protocol_SolicitMaxDurationSet(self, arg2)

    def SolicitMaxDurationGet(self):
        return _byteblower.DHCPv6Protocol_SolicitMaxDurationGet(self)

    def RequestInitialTimeoutSet(self, arg2):
        return _byteblower.DHCPv6Protocol_RequestInitialTimeoutSet(self, arg2)

    def RequestInitialTimeoutGet(self):
        return _byteblower.DHCPv6Protocol_RequestInitialTimeoutGet(self)

    def RequestMaxTimeoutSet(self, arg2):
        return _byteblower.DHCPv6Protocol_RequestMaxTimeoutSet(self, arg2)

    def RequestMaxTimeoutGet(self):
        return _byteblower.DHCPv6Protocol_RequestMaxTimeoutGet(self)

    def RequestMaxRetriesSet(self, arg2):
        return _byteblower.DHCPv6Protocol_RequestMaxRetriesSet(self, arg2)

    def RequestMaxRetriesGet(self):
        return _byteblower.DHCPv6Protocol_RequestMaxRetriesGet(self)

    def RequestMaxDurationSet(self, arg2):
        return _byteblower.DHCPv6Protocol_RequestMaxDurationSet(self, arg2)

    def RequestMaxDurationGet(self):
        return _byteblower.DHCPv6Protocol_RequestMaxDurationGet(self)

    def ConfirmInitialTimeoutSet(self, arg2):
        return _byteblower.DHCPv6Protocol_ConfirmInitialTimeoutSet(self, arg2)

    def ConfirmInitialTimeoutGet(self):
        return _byteblower.DHCPv6Protocol_ConfirmInitialTimeoutGet(self)

    def ConfirmMaxTimeoutSet(self, arg2):
        return _byteblower.DHCPv6Protocol_ConfirmMaxTimeoutSet(self, arg2)

    def ConfirmMaxTimeoutGet(self):
        return _byteblower.DHCPv6Protocol_ConfirmMaxTimeoutGet(self)

    def ConfirmMaxRetriesSet(self, arg2):
        return _byteblower.DHCPv6Protocol_ConfirmMaxRetriesSet(self, arg2)

    def ConfirmMaxRetriesGet(self):
        return _byteblower.DHCPv6Protocol_ConfirmMaxRetriesGet(self)

    def ConfirmMaxDurationSet(self, arg2):
        return _byteblower.DHCPv6Protocol_ConfirmMaxDurationSet(self, arg2)

    def ConfirmMaxDurationGet(self):
        return _byteblower.DHCPv6Protocol_ConfirmMaxDurationGet(self)

    def RenewInitialTimeoutSet(self, arg2):
        return _byteblower.DHCPv6Protocol_RenewInitialTimeoutSet(self, arg2)

    def RenewInitialTimeoutGet(self):
        return _byteblower.DHCPv6Protocol_RenewInitialTimeoutGet(self)

    def RenewMaxTimeoutSet(self, arg2):
        return _byteblower.DHCPv6Protocol_RenewMaxTimeoutSet(self, arg2)

    def RenewMaxTimeoutGet(self):
        return _byteblower.DHCPv6Protocol_RenewMaxTimeoutGet(self)

    def RenewMaxRetriesSet(self, arg2):
        return _byteblower.DHCPv6Protocol_RenewMaxRetriesSet(self, arg2)

    def RenewMaxRetriesGet(self):
        return _byteblower.DHCPv6Protocol_RenewMaxRetriesGet(self)

    def RenewMaxDurationSet(self, arg2):
        return _byteblower.DHCPv6Protocol_RenewMaxDurationSet(self, arg2)

    def RenewMaxDurationGet(self):
        return _byteblower.DHCPv6Protocol_RenewMaxDurationGet(self)

    def InformInitialTimeoutSet(self, arg2):
        return _byteblower.DHCPv6Protocol_InformInitialTimeoutSet(self, arg2)

    def InformInitialTimeoutGet(self):
        return _byteblower.DHCPv6Protocol_InformInitialTimeoutGet(self)

    def InformMaxTimeoutSet(self, arg2):
        return _byteblower.DHCPv6Protocol_InformMaxTimeoutSet(self, arg2)

    def InformMaxTimeoutGet(self):
        return _byteblower.DHCPv6Protocol_InformMaxTimeoutGet(self)

    def InformMaxRetriesSet(self, arg2):
        return _byteblower.DHCPv6Protocol_InformMaxRetriesSet(self, arg2)

    def InformMaxRetriesGet(self):
        return _byteblower.DHCPv6Protocol_InformMaxRetriesGet(self)

    def InformMaxDurationSet(self, arg2):
        return _byteblower.DHCPv6Protocol_InformMaxDurationSet(self, arg2)

    def InformMaxDurationGet(self):
        return _byteblower.DHCPv6Protocol_InformMaxDurationGet(self)

    def RetransmissionPolicyGet(self):
        return _byteblower.DHCPv6Protocol_RetransmissionPolicyGet(self)

    def RetransmissionPolicySet(self, policy):
        return _byteblower.DHCPv6Protocol_RetransmissionPolicySet(self, policy)

    def DHCPv6SessionInfoGet(self):
        return _byteblower.DHCPv6Protocol_DHCPv6SessionInfoGet(self)
DHCPv6Protocol_swigregister = _byteblower.DHCPv6Protocol_swigregister
DHCPv6Protocol_swigregister(DHCPv6Protocol)


_byteblower.TCPConnectionState_CLOSED_swigconstant(_byteblower)
TCPConnectionState_CLOSED = _byteblower.TCPConnectionState_CLOSED

_byteblower.TCPConnectionState_LISTEN_swigconstant(_byteblower)
TCPConnectionState_LISTEN = _byteblower.TCPConnectionState_LISTEN

_byteblower.TCPConnectionState_SYN_RECEIVED_swigconstant(_byteblower)
TCPConnectionState_SYN_RECEIVED = _byteblower.TCPConnectionState_SYN_RECEIVED

_byteblower.TCPConnectionState_SYN_SENT_swigconstant(_byteblower)
TCPConnectionState_SYN_SENT = _byteblower.TCPConnectionState_SYN_SENT

_byteblower.TCPConnectionState_ESTABLISHED_swigconstant(_byteblower)
TCPConnectionState_ESTABLISHED = _byteblower.TCPConnectionState_ESTABLISHED

_byteblower.TCPConnectionState_FIN_WAIT_1_swigconstant(_byteblower)
TCPConnectionState_FIN_WAIT_1 = _byteblower.TCPConnectionState_FIN_WAIT_1

_byteblower.TCPConnectionState_FIN_WAIT_2_swigconstant(_byteblower)
TCPConnectionState_FIN_WAIT_2 = _byteblower.TCPConnectionState_FIN_WAIT_2

_byteblower.TCPConnectionState_CLOSING_swigconstant(_byteblower)
TCPConnectionState_CLOSING = _byteblower.TCPConnectionState_CLOSING

_byteblower.TCPConnectionState_CLOSE_WAIT_swigconstant(_byteblower)
TCPConnectionState_CLOSE_WAIT = _byteblower.TCPConnectionState_CLOSE_WAIT

_byteblower.TCPConnectionState_LAST_ACK_swigconstant(_byteblower)
TCPConnectionState_LAST_ACK = _byteblower.TCPConnectionState_LAST_ACK

_byteblower.TCPConnectionState_TIME_WAIT_swigconstant(_byteblower)
TCPConnectionState_TIME_WAIT = _byteblower.TCPConnectionState_TIME_WAIT

def ConvertTCPConnectionStateToString(inState):
    return _byteblower.ConvertTCPConnectionStateToString(inState)
ConvertTCPConnectionStateToString = _byteblower.ConvertTCPConnectionStateToString

def ParseTCPConnectionStateFromString(inState):
    return _byteblower.ParseTCPConnectionStateFromString(inState)
ParseTCPConnectionStateFromString = _byteblower.ParseTCPConnectionStateFromString

_byteblower.TCPCongestionAvoidanceAlgorithm__None_swigconstant(_byteblower)
TCPCongestionAvoidanceAlgorithm__None = _byteblower.TCPCongestionAvoidanceAlgorithm__None

_byteblower.TCPCongestionAvoidanceAlgorithm_NewReno_swigconstant(_byteblower)
TCPCongestionAvoidanceAlgorithm_NewReno = _byteblower.TCPCongestionAvoidanceAlgorithm_NewReno

_byteblower.TCPCongestionAvoidanceAlgorithm_NewRenoWithCubic_swigconstant(_byteblower)
TCPCongestionAvoidanceAlgorithm_NewRenoWithCubic = _byteblower.TCPCongestionAvoidanceAlgorithm_NewRenoWithCubic

_byteblower.TCPCongestionAvoidanceAlgorithm_Sack_swigconstant(_byteblower)
TCPCongestionAvoidanceAlgorithm_Sack = _byteblower.TCPCongestionAvoidanceAlgorithm_Sack

_byteblower.TCPCongestionAvoidanceAlgorithm_SackWithCubic_swigconstant(_byteblower)
TCPCongestionAvoidanceAlgorithm_SackWithCubic = _byteblower.TCPCongestionAvoidanceAlgorithm_SackWithCubic

def ConvertTCPCongestionAvoidanceAlgorithmToString(inTCAA):
    return _byteblower.ConvertTCPCongestionAvoidanceAlgorithmToString(inTCAA)
ConvertTCPCongestionAvoidanceAlgorithmToString = _byteblower.ConvertTCPCongestionAvoidanceAlgorithmToString

def ParseTCPCongestionAvoidanceAlgorithmFromString(inValue):
    return _byteblower.ParseTCPCongestionAvoidanceAlgorithmFromString(inValue)
ParseTCPCongestionAvoidanceAlgorithmFromString = _byteblower.ParseTCPCongestionAvoidanceAlgorithmFromString

_byteblower.HTTPRequestMethod_Undefined_swigconstant(_byteblower)
HTTPRequestMethod_Undefined = _byteblower.HTTPRequestMethod_Undefined

_byteblower.HTTPRequestMethod_Options_swigconstant(_byteblower)
HTTPRequestMethod_Options = _byteblower.HTTPRequestMethod_Options

_byteblower.HTTPRequestMethod_Get_swigconstant(_byteblower)
HTTPRequestMethod_Get = _byteblower.HTTPRequestMethod_Get

_byteblower.HTTPRequestMethod_Head_swigconstant(_byteblower)
HTTPRequestMethod_Head = _byteblower.HTTPRequestMethod_Head

_byteblower.HTTPRequestMethod_Post_swigconstant(_byteblower)
HTTPRequestMethod_Post = _byteblower.HTTPRequestMethod_Post

_byteblower.HTTPRequestMethod_Put_swigconstant(_byteblower)
HTTPRequestMethod_Put = _byteblower.HTTPRequestMethod_Put

_byteblower.HTTPRequestMethod_Delete_swigconstant(_byteblower)
HTTPRequestMethod_Delete = _byteblower.HTTPRequestMethod_Delete

_byteblower.HTTPRequestMethod_Trace_swigconstant(_byteblower)
HTTPRequestMethod_Trace = _byteblower.HTTPRequestMethod_Trace

def ConvertHTTPRequestMethodToString(inHTTPRequestMethod):
    return _byteblower.ConvertHTTPRequestMethodToString(inHTTPRequestMethod)
ConvertHTTPRequestMethodToString = _byteblower.ConvertHTTPRequestMethodToString

def ParseHTTPRequestMethodFromString(inHTTPRequestMethod):
    return _byteblower.ParseHTTPRequestMethodFromString(inHTTPRequestMethod)
ParseHTTPRequestMethodFromString = _byteblower.ParseHTTPRequestMethodFromString

_byteblower.HTTPRequestStatus_Configuration_swigconstant(_byteblower)
HTTPRequestStatus_Configuration = _byteblower.HTTPRequestStatus_Configuration

_byteblower.HTTPRequestStatus_Scheduled_swigconstant(_byteblower)
HTTPRequestStatus_Scheduled = _byteblower.HTTPRequestStatus_Scheduled

_byteblower.HTTPRequestStatus_Connecting_swigconstant(_byteblower)
HTTPRequestStatus_Connecting = _byteblower.HTTPRequestStatus_Connecting

_byteblower.HTTPRequestStatus_Running_swigconstant(_byteblower)
HTTPRequestStatus_Running = _byteblower.HTTPRequestStatus_Running

_byteblower.HTTPRequestStatus_Finished_swigconstant(_byteblower)
HTTPRequestStatus_Finished = _byteblower.HTTPRequestStatus_Finished

_byteblower.HTTPRequestStatus_Stopped_swigconstant(_byteblower)
HTTPRequestStatus_Stopped = _byteblower.HTTPRequestStatus_Stopped

_byteblower.HTTPRequestStatus_Error_swigconstant(_byteblower)
HTTPRequestStatus_Error = _byteblower.HTTPRequestStatus_Error

def ConvertHTTPRequestStatusToString(inHTTPRequestStatus):
    return _byteblower.ConvertHTTPRequestStatusToString(inHTTPRequestStatus)
ConvertHTTPRequestStatusToString = _byteblower.ConvertHTTPRequestStatusToString

def ParseHTTPRequestStatusFromString(inStr):
    return _byteblower.ParseHTTPRequestStatusFromString(inStr)
ParseHTTPRequestStatusFromString = _byteblower.ParseHTTPRequestStatusFromString

_byteblower.HTTPMultiClientStatus_Configuration_swigconstant(_byteblower)
HTTPMultiClientStatus_Configuration = _byteblower.HTTPMultiClientStatus_Configuration

_byteblower.HTTPMultiClientStatus_Scheduled_swigconstant(_byteblower)
HTTPMultiClientStatus_Scheduled = _byteblower.HTTPMultiClientStatus_Scheduled

_byteblower.HTTPMultiClientStatus_Running_swigconstant(_byteblower)
HTTPMultiClientStatus_Running = _byteblower.HTTPMultiClientStatus_Running

_byteblower.HTTPMultiClientStatus_Finished_swigconstant(_byteblower)
HTTPMultiClientStatus_Finished = _byteblower.HTTPMultiClientStatus_Finished

_byteblower.HTTPMultiClientStatus_Stopped_swigconstant(_byteblower)
HTTPMultiClientStatus_Stopped = _byteblower.HTTPMultiClientStatus_Stopped

def ConvertHTTPMultiClientStatusToString(inHTTPRequestStatus):
    return _byteblower.ConvertHTTPMultiClientStatusToString(inHTTPRequestStatus)
ConvertHTTPMultiClientStatusToString = _byteblower.ConvertHTTPMultiClientStatusToString

_byteblower.HTTPRequestType_Size_swigconstant(_byteblower)
HTTPRequestType_Size = _byteblower.HTTPRequestType_Size

_byteblower.HTTPRequestType_Duration_swigconstant(_byteblower)
HTTPRequestType_Duration = _byteblower.HTTPRequestType_Duration

def ConvertHTTPRequestTypeToString(inHTTPRequestType):
    return _byteblower.ConvertHTTPRequestTypeToString(inHTTPRequestType)
ConvertHTTPRequestTypeToString = _byteblower.ConvertHTTPRequestTypeToString

def ParseHTTPRequestTypeFromString(s):
    return _byteblower.ParseHTTPRequestTypeFromString(s)
ParseHTTPRequestTypeFromString = _byteblower.ParseHTTPRequestTypeFromString
class CapturedFrame(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CapturedFrame, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CapturedFrame, name)
    __repr__ = _swig_repr

    def __init__(self, inAbstractObject, inTimestamp, bytes):
        this = _byteblower.new_CapturedFrame(inAbstractObject, inTimestamp, bytes)
        try:
            self.this.append(this)
        except:
            self.this = this

    def BufferGet(self):
        return _byteblower.CapturedFrame_BufferGet(self)

    def LengthGet(self):
        return _byteblower.CapturedFrame_LengthGet(self)

    def TimestampGet(self):
        return _byteblower.CapturedFrame_TimestampGet(self)

    def BytesGet(self):
        return _byteblower.CapturedFrame_BytesGet(self)
CapturedFrame_swigregister = _byteblower.CapturedFrame_swigregister
CapturedFrame_swigregister(CapturedFrame)

class CapturedHTTPData(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CapturedHTTPData, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CapturedHTTPData, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def HttpSizeGet(self):
        return _byteblower.CapturedHTTPData_HttpSizeGet(self)

    def HttpBytesGet(self):
        return _byteblower.CapturedHTTPData_HttpBytesGet(self)

    def HttpBytesSave(self, inFileName):
        return _byteblower.CapturedHTTPData_HttpBytesSave(self, inFileName)
CapturedHTTPData_swigregister = _byteblower.CapturedHTTPData_swigregister
CapturedHTTPData_swigregister(CapturedHTTPData)

class CaptureRawPacket(Capture):
    __swig_setmethods__ = {}
    for _s in [Capture]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CaptureRawPacket, name, value)
    __swig_getmethods__ = {}
    for _s in [Capture]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CaptureRawPacket, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def FilterSet(self, inFilter):
        return _byteblower.CaptureRawPacket_FilterSet(self, inFilter)

    def FilterGet(self):
        return _byteblower.CaptureRawPacket_FilterGet(self)

    def FileNameRemoteGet(self):
        return _byteblower.CaptureRawPacket_FileNameRemoteGet(self)

    def Start(self):
        return _byteblower.CaptureRawPacket_Start(self)

    def Stop(self):
        return _byteblower.CaptureRawPacket_Stop(self)

    def ResultGet(self):
        return _byteblower.CaptureRawPacket_ResultGet(self)
CaptureRawPacket_swigregister = _byteblower.CaptureRawPacket_swigregister
CaptureRawPacket_swigregister(CaptureRawPacket)

class CaptureResultSnapshot(AbstractRefreshableResult):
    __swig_setmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CaptureResultSnapshot, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CaptureResultSnapshot, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Clear(self):
        return _byteblower.CaptureResultSnapshot_Clear(self)

    def PacketCountGet(self):
        return _byteblower.CaptureResultSnapshot_PacketCountGet(self)

    def ByteCountGet(self):
        return _byteblower.CaptureResultSnapshot_ByteCountGet(self)

    def ErrorCountGet(self):
        return _byteblower.CaptureResultSnapshot_ErrorCountGet(self)

    def CaptureDurationGet(self):
        return _byteblower.CaptureResultSnapshot_CaptureDurationGet(self)

    def StateNameGet(self):
        return _byteblower.CaptureResultSnapshot_StateNameGet(self)

    def FramesGet(self):
        return _byteblower.CaptureResultSnapshot_FramesGet(self)

    def FramesGetByIndex(self, index):
        return _byteblower.CaptureResultSnapshot_FramesGetByIndex(self, index)

    def PcapLastFileNameGet(self):
        return _byteblower.CaptureResultSnapshot_PcapLastFileNameGet(self)

    def PcapSave(self, filename):
        return _byteblower.CaptureResultSnapshot_PcapSave(self, filename)

    def PcapNanoSave(self, filename):
        return _byteblower.CaptureResultSnapshot_PcapNanoSave(self, filename)

    def RefreshTimestampGet(self):
        return _byteblower.CaptureResultSnapshot_RefreshTimestampGet(self)
CaptureResultSnapshot_swigregister = _byteblower.CaptureResultSnapshot_swigregister
CaptureResultSnapshot_swigregister(CaptureResultSnapshot)

class TCPSessionInfo(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TCPSessionInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TCPSessionInfo, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ConnectionStateGet(self):
        return _byteblower.TCPSessionInfo_ConnectionStateGet(self)

    def CongestionAvoidanceAlgorithmGet(self):
        return _byteblower.TCPSessionInfo_CongestionAvoidanceAlgorithmGet(self)

    def MaximumSegmentSizeGet(self):
        return _byteblower.TCPSessionInfo_MaximumSegmentSizeGet(self)

    def ResultGet(self):
        return _byteblower.TCPSessionInfo_ResultGet(self)

    def ResultHistoryGet(self):
        return _byteblower.TCPSessionInfo_ResultHistoryGet(self)
TCPSessionInfo_swigregister = _byteblower.TCPSessionInfo_swigregister
TCPSessionInfo_swigregister(TCPSessionInfo)

class TCPTunnel(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TCPTunnel, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TCPTunnel, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def PortGet(self):
        return _byteblower.TCPTunnel_PortGet(self)

    def LocalPortSet(self, inLocalPort):
        return _byteblower.TCPTunnel_LocalPortSet(self, inLocalPort)

    def RemotePortSet(self, inLocalPort):
        return _byteblower.TCPTunnel_RemotePortSet(self, inLocalPort)

    def RemoteAddressSet(self, remote_address):
        return _byteblower.TCPTunnel_RemoteAddressSet(self, remote_address)

    def Start(self):
        return _byteblower.TCPTunnel_Start(self)

    def Stop(self):
        return _byteblower.TCPTunnel_Stop(self)
TCPTunnel_swigregister = _byteblower.TCPTunnel_swigregister
TCPTunnel_swigregister(TCPTunnel)

class TCPResultData(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TCPResultData, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TCPResultData, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ConnectionStateGet(self):
        return _byteblower.TCPResultData_ConnectionStateGet(self)

    def TxSegmentCountTotalGet(self):
        return _byteblower.TCPResultData_TxSegmentCountTotalGet(self)

    def RxSegmentCountTotalGet(self):
        return _byteblower.TCPResultData_RxSegmentCountTotalGet(self)

    def RxSegmentCountOutOfOrderGet(self):
        return _byteblower.TCPResultData_RxSegmentCountOutOfOrderGet(self)

    def TxByteCountHeaderGet(self):
        return _byteblower.TCPResultData_TxByteCountHeaderGet(self)

    def TxByteCountPayloadGet(self):
        return _byteblower.TCPResultData_TxByteCountPayloadGet(self)

    def TxByteCountTotalGet(self):
        return _byteblower.TCPResultData_TxByteCountTotalGet(self)

    def RxByteCountHeaderGet(self):
        return _byteblower.TCPResultData_RxByteCountHeaderGet(self)

    def RxByteCountPayloadGet(self):
        return _byteblower.TCPResultData_RxByteCountPayloadGet(self)

    def RxByteCountTotalGet(self):
        return _byteblower.TCPResultData_RxByteCountTotalGet(self)

    def ReceiverWindowCurrentGet(self):
        return _byteblower.TCPResultData_ReceiverWindowCurrentGet(self)

    def ReceiverWindowMinimumGet(self):
        return _byteblower.TCPResultData_ReceiverWindowMinimumGet(self)

    def ReceiverWindowMaximumGet(self):
        return _byteblower.TCPResultData_ReceiverWindowMaximumGet(self)

    def CongestionWindowCurrentGet(self):
        return _byteblower.TCPResultData_CongestionWindowCurrentGet(self)

    def CongestionWindowMinimumGet(self):
        return _byteblower.TCPResultData_CongestionWindowMinimumGet(self)

    def CongestionWindowMaximumGet(self):
        return _byteblower.TCPResultData_CongestionWindowMaximumGet(self)

    def FlightSizeCurrentGet(self):
        return _byteblower.TCPResultData_FlightSizeCurrentGet(self)

    def FlightSizeMinimumGet(self):
        return _byteblower.TCPResultData_FlightSizeMinimumGet(self)

    def FlightSizeMaximumGet(self):
        return _byteblower.TCPResultData_FlightSizeMaximumGet(self)

    def SlowStartThresholdCurrentGet(self):
        return _byteblower.TCPResultData_SlowStartThresholdCurrentGet(self)

    def SlowStartThresholdMinimumGet(self):
        return _byteblower.TCPResultData_SlowStartThresholdMinimumGet(self)

    def SlowStartThresholdMaximumGet(self):
        return _byteblower.TCPResultData_SlowStartThresholdMaximumGet(self)

    def RoundTripTimeMinimumGet(self):
        return _byteblower.TCPResultData_RoundTripTimeMinimumGet(self)

    def RoundTripTimeMaximumGet(self):
        return _byteblower.TCPResultData_RoundTripTimeMaximumGet(self)

    def RoundTripTimeCurrentGet(self):
        return _byteblower.TCPResultData_RoundTripTimeCurrentGet(self)

    def RetransmissionCountTotalGet(self):
        return _byteblower.TCPResultData_RetransmissionCountTotalGet(self)

    def RetransmissionCountFastGet(self):
        return _byteblower.TCPResultData_RetransmissionCountFastGet(self)

    def RetransmissionCountSlowGet(self):
        return _byteblower.TCPResultData_RetransmissionCountSlowGet(self)

    def TimestampSynSentGet(self):
        return _byteblower.TCPResultData_TimestampSynSentGet(self)

    def TimestampSynReceivedGet(self):
        return _byteblower.TCPResultData_TimestampSynReceivedGet(self)

    def TimestampEstablishedGet(self):
        return _byteblower.TCPResultData_TimestampEstablishedGet(self)

    def TimestampFinSentGet(self):
        return _byteblower.TCPResultData_TimestampFinSentGet(self)

    def TimestampFinReceivedGet(self):
        return _byteblower.TCPResultData_TimestampFinReceivedGet(self)

    def NumberOfSynSentGet(self):
        return _byteblower.TCPResultData_NumberOfSynSentGet(self)

    def NumberOfSynReceivedGet(self):
        return _byteblower.TCPResultData_NumberOfSynReceivedGet(self)

    def NumberOfFinSentGet(self):
        return _byteblower.TCPResultData_NumberOfFinSentGet(self)

    def NumberOfFinReceivedGet(self):
        return _byteblower.TCPResultData_NumberOfFinReceivedGet(self)

    def TxTimestampLastGet(self):
        return _byteblower.TCPResultData_TxTimestampLastGet(self)

    def RxTimestampLastGet(self):
        return _byteblower.TCPResultData_RxTimestampLastGet(self)

    def IntervalDurationGet(self):
        return _byteblower.TCPResultData_IntervalDurationGet(self)

    def TimestampGet(self):
        return _byteblower.TCPResultData_TimestampGet(self)
TCPResultData_swigregister = _byteblower.TCPResultData_swigregister
TCPResultData_swigregister(TCPResultData)

class TCPResultDataList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TCPResultDataList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TCPResultDataList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.TCPResultDataList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.TCPResultDataList___nonzero__(self)

    def __bool__(self):
        return _byteblower.TCPResultDataList___bool__(self)

    def __len__(self):
        return _byteblower.TCPResultDataList___len__(self)

    def pop(self):
        return _byteblower.TCPResultDataList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.TCPResultDataList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.TCPResultDataList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.TCPResultDataList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.TCPResultDataList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.TCPResultDataList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.TCPResultDataList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.TCPResultDataList_append(self, x)

    def empty(self):
        return _byteblower.TCPResultDataList_empty(self)

    def size(self):
        return _byteblower.TCPResultDataList_size(self)

    def clear(self):
        return _byteblower.TCPResultDataList_clear(self)

    def swap(self, v):
        return _byteblower.TCPResultDataList_swap(self, v)

    def get_allocator(self):
        return _byteblower.TCPResultDataList_get_allocator(self)

    def begin(self):
        return _byteblower.TCPResultDataList_begin(self)

    def end(self):
        return _byteblower.TCPResultDataList_end(self)

    def rbegin(self):
        return _byteblower.TCPResultDataList_rbegin(self)

    def rend(self):
        return _byteblower.TCPResultDataList_rend(self)

    def pop_back(self):
        return _byteblower.TCPResultDataList_pop_back(self)

    def erase(self, *args):
        return _byteblower.TCPResultDataList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_TCPResultDataList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.TCPResultDataList_push_back(self, x)

    def front(self):
        return _byteblower.TCPResultDataList_front(self)

    def back(self):
        return _byteblower.TCPResultDataList_back(self)

    def assign(self, n, x):
        return _byteblower.TCPResultDataList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.TCPResultDataList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.TCPResultDataList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.TCPResultDataList_reserve(self, n)

    def capacity(self):
        return _byteblower.TCPResultDataList_capacity(self)
    __swig_destroy__ = _byteblower.delete_TCPResultDataList
    __del__ = lambda self: None
TCPResultDataList_swigregister = _byteblower.TCPResultDataList_swigregister
TCPResultDataList_swigregister(TCPResultDataList)

class TCPResultSnapshot(AbstractRefreshableResult):
    __swig_setmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TCPResultSnapshot, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TCPResultSnapshot, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ConnectionStateGet(self):
        return _byteblower.TCPResultSnapshot_ConnectionStateGet(self)

    def TxSegmentCountTotalGet(self):
        return _byteblower.TCPResultSnapshot_TxSegmentCountTotalGet(self)

    def RxSegmentCountTotalGet(self):
        return _byteblower.TCPResultSnapshot_RxSegmentCountTotalGet(self)

    def RxSegmentCountOutOfOrderGet(self):
        return _byteblower.TCPResultSnapshot_RxSegmentCountOutOfOrderGet(self)

    def TxByteCountHeaderGet(self):
        return _byteblower.TCPResultSnapshot_TxByteCountHeaderGet(self)

    def TxByteCountPayloadGet(self):
        return _byteblower.TCPResultSnapshot_TxByteCountPayloadGet(self)

    def TxByteCountTotalGet(self):
        return _byteblower.TCPResultSnapshot_TxByteCountTotalGet(self)

    def RxByteCountHeaderGet(self):
        return _byteblower.TCPResultSnapshot_RxByteCountHeaderGet(self)

    def RxByteCountPayloadGet(self):
        return _byteblower.TCPResultSnapshot_RxByteCountPayloadGet(self)

    def RxByteCountTotalGet(self):
        return _byteblower.TCPResultSnapshot_RxByteCountTotalGet(self)

    def ReceiverWindowCurrentGet(self):
        return _byteblower.TCPResultSnapshot_ReceiverWindowCurrentGet(self)

    def ReceiverWindowMinimumGet(self):
        return _byteblower.TCPResultSnapshot_ReceiverWindowMinimumGet(self)

    def ReceiverWindowMaximumGet(self):
        return _byteblower.TCPResultSnapshot_ReceiverWindowMaximumGet(self)

    def CongestionWindowCurrentGet(self):
        return _byteblower.TCPResultSnapshot_CongestionWindowCurrentGet(self)

    def CongestionWindowMinimumGet(self):
        return _byteblower.TCPResultSnapshot_CongestionWindowMinimumGet(self)

    def CongestionWindowMaximumGet(self):
        return _byteblower.TCPResultSnapshot_CongestionWindowMaximumGet(self)

    def FlightSizeCurrentGet(self):
        return _byteblower.TCPResultSnapshot_FlightSizeCurrentGet(self)

    def FlightSizeMinimumGet(self):
        return _byteblower.TCPResultSnapshot_FlightSizeMinimumGet(self)

    def FlightSizeMaximumGet(self):
        return _byteblower.TCPResultSnapshot_FlightSizeMaximumGet(self)

    def SlowStartThresholdCurrentGet(self):
        return _byteblower.TCPResultSnapshot_SlowStartThresholdCurrentGet(self)

    def SlowStartThresholdMinimumGet(self):
        return _byteblower.TCPResultSnapshot_SlowStartThresholdMinimumGet(self)

    def SlowStartThresholdMaximumGet(self):
        return _byteblower.TCPResultSnapshot_SlowStartThresholdMaximumGet(self)

    def RoundTripTimeMinimumGet(self):
        return _byteblower.TCPResultSnapshot_RoundTripTimeMinimumGet(self)

    def RoundTripTimeMaximumGet(self):
        return _byteblower.TCPResultSnapshot_RoundTripTimeMaximumGet(self)

    def RoundTripTimeCurrentGet(self):
        return _byteblower.TCPResultSnapshot_RoundTripTimeCurrentGet(self)

    def RetransmissionCountTotalGet(self):
        return _byteblower.TCPResultSnapshot_RetransmissionCountTotalGet(self)

    def RetransmissionCountFastGet(self):
        return _byteblower.TCPResultSnapshot_RetransmissionCountFastGet(self)

    def RetransmissionCountSlowGet(self):
        return _byteblower.TCPResultSnapshot_RetransmissionCountSlowGet(self)

    def TimestampSynSentGet(self):
        return _byteblower.TCPResultSnapshot_TimestampSynSentGet(self)

    def TimestampSynReceivedGet(self):
        return _byteblower.TCPResultSnapshot_TimestampSynReceivedGet(self)

    def TimestampEstablishedGet(self):
        return _byteblower.TCPResultSnapshot_TimestampEstablishedGet(self)

    def TimestampFinSentGet(self):
        return _byteblower.TCPResultSnapshot_TimestampFinSentGet(self)

    def TimestampFinReceivedGet(self):
        return _byteblower.TCPResultSnapshot_TimestampFinReceivedGet(self)

    def NumberOfSynSentGet(self):
        return _byteblower.TCPResultSnapshot_NumberOfSynSentGet(self)

    def NumberOfSynReceivedGet(self):
        return _byteblower.TCPResultSnapshot_NumberOfSynReceivedGet(self)

    def NumberOfFinSentGet(self):
        return _byteblower.TCPResultSnapshot_NumberOfFinSentGet(self)

    def NumberOfFinReceivedGet(self):
        return _byteblower.TCPResultSnapshot_NumberOfFinReceivedGet(self)

    def TxTimestampLastGet(self):
        return _byteblower.TCPResultSnapshot_TxTimestampLastGet(self)

    def RxTimestampLastGet(self):
        return _byteblower.TCPResultSnapshot_RxTimestampLastGet(self)

    def IntervalDurationGet(self):
        return _byteblower.TCPResultSnapshot_IntervalDurationGet(self)

    def TimestampGet(self):
        return _byteblower.TCPResultSnapshot_TimestampGet(self)

    def RefreshTimestampGet(self):
        return _byteblower.TCPResultSnapshot_RefreshTimestampGet(self)
TCPResultSnapshot_swigregister = _byteblower.TCPResultSnapshot_swigregister
TCPResultSnapshot_swigregister(TCPResultSnapshot)

class TCPResultSnapshotList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TCPResultSnapshotList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TCPResultSnapshotList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.TCPResultSnapshotList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.TCPResultSnapshotList___nonzero__(self)

    def __bool__(self):
        return _byteblower.TCPResultSnapshotList___bool__(self)

    def __len__(self):
        return _byteblower.TCPResultSnapshotList___len__(self)

    def pop(self):
        return _byteblower.TCPResultSnapshotList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.TCPResultSnapshotList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.TCPResultSnapshotList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.TCPResultSnapshotList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.TCPResultSnapshotList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.TCPResultSnapshotList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.TCPResultSnapshotList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.TCPResultSnapshotList_append(self, x)

    def empty(self):
        return _byteblower.TCPResultSnapshotList_empty(self)

    def size(self):
        return _byteblower.TCPResultSnapshotList_size(self)

    def clear(self):
        return _byteblower.TCPResultSnapshotList_clear(self)

    def swap(self, v):
        return _byteblower.TCPResultSnapshotList_swap(self, v)

    def get_allocator(self):
        return _byteblower.TCPResultSnapshotList_get_allocator(self)

    def begin(self):
        return _byteblower.TCPResultSnapshotList_begin(self)

    def end(self):
        return _byteblower.TCPResultSnapshotList_end(self)

    def rbegin(self):
        return _byteblower.TCPResultSnapshotList_rbegin(self)

    def rend(self):
        return _byteblower.TCPResultSnapshotList_rend(self)

    def pop_back(self):
        return _byteblower.TCPResultSnapshotList_pop_back(self)

    def erase(self, *args):
        return _byteblower.TCPResultSnapshotList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_TCPResultSnapshotList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.TCPResultSnapshotList_push_back(self, x)

    def front(self):
        return _byteblower.TCPResultSnapshotList_front(self)

    def back(self):
        return _byteblower.TCPResultSnapshotList_back(self)

    def assign(self, n, x):
        return _byteblower.TCPResultSnapshotList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.TCPResultSnapshotList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.TCPResultSnapshotList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.TCPResultSnapshotList_reserve(self, n)

    def capacity(self):
        return _byteblower.TCPResultSnapshotList_capacity(self)
    __swig_destroy__ = _byteblower.delete_TCPResultSnapshotList
    __del__ = lambda self: None
TCPResultSnapshotList_swigregister = _byteblower.TCPResultSnapshotList_swigregister
TCPResultSnapshotList_swigregister(TCPResultSnapshotList)

class TCPResultHistory(AbstractRefreshableResult):
    __swig_setmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TCPResultHistory, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TCPResultHistory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def CumulativeGet(self):
        return _byteblower.TCPResultHistory_CumulativeGet(self)

    def CumulativeGetByIndex(self, index):
        return _byteblower.TCPResultHistory_CumulativeGetByIndex(self, index)

    def CumulativeLengthGet(self):
        return _byteblower.TCPResultHistory_CumulativeLengthGet(self)

    def IntervalGet(self):
        return _byteblower.TCPResultHistory_IntervalGet(self)

    def IntervalGetByIndex(self, index):
        return _byteblower.TCPResultHistory_IntervalGetByIndex(self, index)

    def IntervalLengthGet(self):
        return _byteblower.TCPResultHistory_IntervalLengthGet(self)

    def CumulativeGetByTime(self, timestamp):
        return _byteblower.TCPResultHistory_CumulativeGetByTime(self, timestamp)

    def IntervalGetByTime(self, timestamp):
        return _byteblower.TCPResultHistory_IntervalGetByTime(self, timestamp)

    def CumulativeLatestGet(self):
        return _byteblower.TCPResultHistory_CumulativeLatestGet(self)

    def IntervalLatestGet(self):
        return _byteblower.TCPResultHistory_IntervalLatestGet(self)

    def SamplingIntervalDurationGet(self):
        return _byteblower.TCPResultHistory_SamplingIntervalDurationGet(self)

    def SamplingBufferLengthGet(self):
        return _byteblower.TCPResultHistory_SamplingBufferLengthGet(self)

    def SamplingIntervalDurationSet(self, inDuration):
        return _byteblower.TCPResultHistory_SamplingIntervalDurationSet(self, inDuration)

    def SamplingBufferLengthSet(self, inLength):
        return _byteblower.TCPResultHistory_SamplingBufferLengthSet(self, inLength)

    def RefreshTimestampGet(self):
        return _byteblower.TCPResultHistory_RefreshTimestampGet(self)

    def Clear(self):
        return _byteblower.TCPResultHistory_Clear(self)
TCPResultHistory_swigregister = _byteblower.TCPResultHistory_swigregister
TCPResultHistory_swigregister(TCPResultHistory)

class HTTPResultData(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HTTPResultData, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HTTPResultData, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def AverageDataSpeedGet(self):
        return _byteblower.HTTPResultData_AverageDataSpeedGet(self)

    def RxByteCountHeaderGet(self):
        return _byteblower.HTTPResultData_RxByteCountHeaderGet(self)

    def RxByteCountPayloadGet(self):
        return _byteblower.HTTPResultData_RxByteCountPayloadGet(self)

    def RxByteCountRateGet(self):
        return _byteblower.HTTPResultData_RxByteCountRateGet(self)

    def RxByteCountTotalGet(self):
        return _byteblower.HTTPResultData_RxByteCountTotalGet(self)

    def TxByteCountHeaderGet(self):
        return _byteblower.HTTPResultData_TxByteCountHeaderGet(self)

    def TxByteCountRateGet(self):
        return _byteblower.HTTPResultData_TxByteCountRateGet(self)

    def TxByteCountPayloadGet(self):
        return _byteblower.HTTPResultData_TxByteCountPayloadGet(self)

    def TxByteCountTotalGet(self):
        return _byteblower.HTTPResultData_TxByteCountTotalGet(self)

    def TxTimestampFirstGet(self):
        return _byteblower.HTTPResultData_TxTimestampFirstGet(self)

    def TxTimestampLastGet(self):
        return _byteblower.HTTPResultData_TxTimestampLastGet(self)

    def RxTimestampFirstGet(self):
        return _byteblower.HTTPResultData_RxTimestampFirstGet(self)

    def RxTimestampLastGet(self):
        return _byteblower.HTTPResultData_RxTimestampLastGet(self)

    def IntervalDurationGet(self):
        return _byteblower.HTTPResultData_IntervalDurationGet(self)

    def TimestampGet(self):
        return _byteblower.HTTPResultData_TimestampGet(self)
HTTPResultData_swigregister = _byteblower.HTTPResultData_swigregister
HTTPResultData_swigregister(HTTPResultData)

class HTTPResultDataList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HTTPResultDataList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HTTPResultDataList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.HTTPResultDataList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.HTTPResultDataList___nonzero__(self)

    def __bool__(self):
        return _byteblower.HTTPResultDataList___bool__(self)

    def __len__(self):
        return _byteblower.HTTPResultDataList___len__(self)

    def pop(self):
        return _byteblower.HTTPResultDataList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.HTTPResultDataList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.HTTPResultDataList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.HTTPResultDataList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.HTTPResultDataList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.HTTPResultDataList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.HTTPResultDataList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.HTTPResultDataList_append(self, x)

    def empty(self):
        return _byteblower.HTTPResultDataList_empty(self)

    def size(self):
        return _byteblower.HTTPResultDataList_size(self)

    def clear(self):
        return _byteblower.HTTPResultDataList_clear(self)

    def swap(self, v):
        return _byteblower.HTTPResultDataList_swap(self, v)

    def get_allocator(self):
        return _byteblower.HTTPResultDataList_get_allocator(self)

    def begin(self):
        return _byteblower.HTTPResultDataList_begin(self)

    def end(self):
        return _byteblower.HTTPResultDataList_end(self)

    def rbegin(self):
        return _byteblower.HTTPResultDataList_rbegin(self)

    def rend(self):
        return _byteblower.HTTPResultDataList_rend(self)

    def pop_back(self):
        return _byteblower.HTTPResultDataList_pop_back(self)

    def erase(self, *args):
        return _byteblower.HTTPResultDataList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_HTTPResultDataList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.HTTPResultDataList_push_back(self, x)

    def front(self):
        return _byteblower.HTTPResultDataList_front(self)

    def back(self):
        return _byteblower.HTTPResultDataList_back(self)

    def assign(self, n, x):
        return _byteblower.HTTPResultDataList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.HTTPResultDataList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.HTTPResultDataList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.HTTPResultDataList_reserve(self, n)

    def capacity(self):
        return _byteblower.HTTPResultDataList_capacity(self)
    __swig_destroy__ = _byteblower.delete_HTTPResultDataList
    __del__ = lambda self: None
HTTPResultDataList_swigregister = _byteblower.HTTPResultDataList_swigregister
HTTPResultDataList_swigregister(HTTPResultDataList)

class HTTPResultSnapshot(AbstractRefreshableResult):
    __swig_setmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HTTPResultSnapshot, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HTTPResultSnapshot, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def AverageDataSpeedGet(self):
        return _byteblower.HTTPResultSnapshot_AverageDataSpeedGet(self)

    def RxByteCountHeaderGet(self):
        return _byteblower.HTTPResultSnapshot_RxByteCountHeaderGet(self)

    def RxByteCountPayloadGet(self):
        return _byteblower.HTTPResultSnapshot_RxByteCountPayloadGet(self)

    def RxByteCountRateGet(self):
        return _byteblower.HTTPResultSnapshot_RxByteCountRateGet(self)

    def RxByteCountTotalGet(self):
        return _byteblower.HTTPResultSnapshot_RxByteCountTotalGet(self)

    def TxByteCountHeaderGet(self):
        return _byteblower.HTTPResultSnapshot_TxByteCountHeaderGet(self)

    def TxByteCountPayloadGet(self):
        return _byteblower.HTTPResultSnapshot_TxByteCountPayloadGet(self)

    def TxByteCountRateGet(self):
        return _byteblower.HTTPResultSnapshot_TxByteCountRateGet(self)

    def TxByteCountTotalGet(self):
        return _byteblower.HTTPResultSnapshot_TxByteCountTotalGet(self)

    def TxTimestampFirstGet(self):
        return _byteblower.HTTPResultSnapshot_TxTimestampFirstGet(self)

    def TxTimestampLastGet(self):
        return _byteblower.HTTPResultSnapshot_TxTimestampLastGet(self)

    def RxTimestampFirstGet(self):
        return _byteblower.HTTPResultSnapshot_RxTimestampFirstGet(self)

    def RxTimestampLastGet(self):
        return _byteblower.HTTPResultSnapshot_RxTimestampLastGet(self)

    def IntervalDurationGet(self):
        return _byteblower.HTTPResultSnapshot_IntervalDurationGet(self)

    def TimestampGet(self):
        return _byteblower.HTTPResultSnapshot_TimestampGet(self)

    def RefreshTimestampGet(self):
        return _byteblower.HTTPResultSnapshot_RefreshTimestampGet(self)
HTTPResultSnapshot_swigregister = _byteblower.HTTPResultSnapshot_swigregister
HTTPResultSnapshot_swigregister(HTTPResultSnapshot)

class HTTPResultSnapshotList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HTTPResultSnapshotList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HTTPResultSnapshotList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.HTTPResultSnapshotList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.HTTPResultSnapshotList___nonzero__(self)

    def __bool__(self):
        return _byteblower.HTTPResultSnapshotList___bool__(self)

    def __len__(self):
        return _byteblower.HTTPResultSnapshotList___len__(self)

    def pop(self):
        return _byteblower.HTTPResultSnapshotList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.HTTPResultSnapshotList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.HTTPResultSnapshotList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.HTTPResultSnapshotList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.HTTPResultSnapshotList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.HTTPResultSnapshotList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.HTTPResultSnapshotList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.HTTPResultSnapshotList_append(self, x)

    def empty(self):
        return _byteblower.HTTPResultSnapshotList_empty(self)

    def size(self):
        return _byteblower.HTTPResultSnapshotList_size(self)

    def clear(self):
        return _byteblower.HTTPResultSnapshotList_clear(self)

    def swap(self, v):
        return _byteblower.HTTPResultSnapshotList_swap(self, v)

    def get_allocator(self):
        return _byteblower.HTTPResultSnapshotList_get_allocator(self)

    def begin(self):
        return _byteblower.HTTPResultSnapshotList_begin(self)

    def end(self):
        return _byteblower.HTTPResultSnapshotList_end(self)

    def rbegin(self):
        return _byteblower.HTTPResultSnapshotList_rbegin(self)

    def rend(self):
        return _byteblower.HTTPResultSnapshotList_rend(self)

    def pop_back(self):
        return _byteblower.HTTPResultSnapshotList_pop_back(self)

    def erase(self, *args):
        return _byteblower.HTTPResultSnapshotList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_HTTPResultSnapshotList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.HTTPResultSnapshotList_push_back(self, x)

    def front(self):
        return _byteblower.HTTPResultSnapshotList_front(self)

    def back(self):
        return _byteblower.HTTPResultSnapshotList_back(self)

    def assign(self, n, x):
        return _byteblower.HTTPResultSnapshotList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.HTTPResultSnapshotList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.HTTPResultSnapshotList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.HTTPResultSnapshotList_reserve(self, n)

    def capacity(self):
        return _byteblower.HTTPResultSnapshotList_capacity(self)
    __swig_destroy__ = _byteblower.delete_HTTPResultSnapshotList
    __del__ = lambda self: None
HTTPResultSnapshotList_swigregister = _byteblower.HTTPResultSnapshotList_swigregister
HTTPResultSnapshotList_swigregister(HTTPResultSnapshotList)

class HTTPResultHistory(AbstractRefreshableResult):
    __swig_setmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HTTPResultHistory, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HTTPResultHistory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def CumulativeGet(self):
        return _byteblower.HTTPResultHistory_CumulativeGet(self)

    def CumulativeGetByIndex(self, index):
        return _byteblower.HTTPResultHistory_CumulativeGetByIndex(self, index)

    def CumulativeLengthGet(self):
        return _byteblower.HTTPResultHistory_CumulativeLengthGet(self)

    def IntervalGet(self):
        return _byteblower.HTTPResultHistory_IntervalGet(self)

    def IntervalGetByIndex(self, index):
        return _byteblower.HTTPResultHistory_IntervalGetByIndex(self, index)

    def IntervalLengthGet(self):
        return _byteblower.HTTPResultHistory_IntervalLengthGet(self)

    def CumulativeGetByTime(self, timestamp):
        return _byteblower.HTTPResultHistory_CumulativeGetByTime(self, timestamp)

    def IntervalGetByTime(self, timestamp):
        return _byteblower.HTTPResultHistory_IntervalGetByTime(self, timestamp)

    def CumulativeLatestGet(self):
        return _byteblower.HTTPResultHistory_CumulativeLatestGet(self)

    def IntervalLatestGet(self):
        return _byteblower.HTTPResultHistory_IntervalLatestGet(self)

    def SamplingIntervalDurationGet(self):
        return _byteblower.HTTPResultHistory_SamplingIntervalDurationGet(self)

    def SamplingIntervalDurationSet(self, inDuration):
        return _byteblower.HTTPResultHistory_SamplingIntervalDurationSet(self, inDuration)

    def SamplingBufferLengthGet(self):
        return _byteblower.HTTPResultHistory_SamplingBufferLengthGet(self)

    def SamplingBufferLengthSet(self, inLength):
        return _byteblower.HTTPResultHistory_SamplingBufferLengthSet(self, inLength)

    def RefreshTimestampGet(self):
        return _byteblower.HTTPResultHistory_RefreshTimestampGet(self)

    def Clear(self):
        return _byteblower.HTTPResultHistory_Clear(self)
HTTPResultHistory_swigregister = _byteblower.HTTPResultHistory_swigregister
HTTPResultHistory_swigregister(HTTPResultHistory)

class HTTPSessionInfo(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HTTPSessionInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HTTPSessionInfo, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Role_Client = _byteblower.HTTPSessionInfo_Role_Client
    Role_Server = _byteblower.HTTPSessionInfo_Role_Server
    __swig_getmethods__["ConvertRoleToString"] = lambda x: _byteblower.HTTPSessionInfo_ConvertRoleToString
    if _newclass:
        ConvertRoleToString = staticmethod(_byteblower.HTTPSessionInfo_ConvertRoleToString)

    def RoleGet(self):
        return _byteblower.HTTPSessionInfo_RoleGet(self)

    def TcpSessionInfoGet(self):
        return _byteblower.HTTPSessionInfo_TcpSessionInfoGet(self)

    def RequestMethodGet(self):
        return _byteblower.HTTPSessionInfo_RequestMethodGet(self)

    def RequestTypeGet(self):
        return _byteblower.HTTPSessionInfo_RequestTypeGet(self)

    def RequestStatusGet(self):
        return _byteblower.HTTPSessionInfo_RequestStatusGet(self)

    def ErrorMessageGet(self):
        return _byteblower.HTTPSessionInfo_ErrorMessageGet(self)

    def RequestValueGet(self):
        return _byteblower.HTTPSessionInfo_RequestValueGet(self)

    def RequestDurationGet(self):
        return _byteblower.HTTPSessionInfo_RequestDurationGet(self)

    def RequestSizeGet(self):
        return _byteblower.HTTPSessionInfo_RequestSizeGet(self)

    def ServerClientIdGet(self):
        return _byteblower.HTTPSessionInfo_ServerClientIdGet(self)

    def ResultGet(self):
        return _byteblower.HTTPSessionInfo_ResultGet(self)

    def ResultHistoryGet(self):
        return _byteblower.HTTPSessionInfo_ResultHistoryGet(self)

    def Destroy(self):
        return _byteblower.HTTPSessionInfo_Destroy(self)
HTTPSessionInfo_swigregister = _byteblower.HTTPSessionInfo_swigregister
HTTPSessionInfo_swigregister(HTTPSessionInfo)

def HTTPSessionInfo_ConvertRoleToString(inRole):
    return _byteblower.HTTPSessionInfo_ConvertRoleToString(inRole)
HTTPSessionInfo_ConvertRoleToString = _byteblower.HTTPSessionInfo_ConvertRoleToString

class HTTPMultiResultData(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HTTPMultiResultData, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HTTPMultiResultData, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def FinishedGet(self):
        return _byteblower.HTTPMultiResultData_FinishedGet(self)

    def RxByteCountGet(self):
        return _byteblower.HTTPMultiResultData_RxByteCountGet(self)

    def TxByteCountGet(self):
        return _byteblower.HTTPMultiResultData_TxByteCountGet(self)

    def RxSpeedGet(self):
        return _byteblower.HTTPMultiResultData_RxSpeedGet(self)

    def TxSpeedGet(self):
        return _byteblower.HTTPMultiResultData_TxSpeedGet(self)

    def TxTimestampFirstGet(self, default_value):
        return _byteblower.HTTPMultiResultData_TxTimestampFirstGet(self, default_value)

    def TxTimestampLastGet(self, default_value):
        return _byteblower.HTTPMultiResultData_TxTimestampLastGet(self, default_value)

    def RxTimestampFirstGet(self, default_value):
        return _byteblower.HTTPMultiResultData_RxTimestampFirstGet(self, default_value)

    def RxTimestampLastGet(self, default_value):
        return _byteblower.HTTPMultiResultData_RxTimestampLastGet(self, default_value)

    def TcpRxByteCountGet(self):
        return _byteblower.HTTPMultiResultData_TcpRxByteCountGet(self)

    def TcpTxByteCountGet(self):
        return _byteblower.HTTPMultiResultData_TcpTxByteCountGet(self)

    def TcpRxSpeedGet(self):
        return _byteblower.HTTPMultiResultData_TcpRxSpeedGet(self)

    def TcpTxSpeedGet(self):
        return _byteblower.HTTPMultiResultData_TcpTxSpeedGet(self)

    def TcpRxSegmentCountGet(self):
        return _byteblower.HTTPMultiResultData_TcpRxSegmentCountGet(self)

    def TcpTxSegmentCountGet(self):
        return _byteblower.HTTPMultiResultData_TcpTxSegmentCountGet(self)

    def TcpTxTimestampFirstGet(self, default_value):
        return _byteblower.HTTPMultiResultData_TcpTxTimestampFirstGet(self, default_value)

    def TcpTxTimestampLastGet(self, default_value):
        return _byteblower.HTTPMultiResultData_TcpTxTimestampLastGet(self, default_value)

    def TcpRxTimestampFirstGet(self, default_value):
        return _byteblower.HTTPMultiResultData_TcpRxTimestampFirstGet(self, default_value)

    def TcpRxTimestampLastGet(self, default_value):
        return _byteblower.HTTPMultiResultData_TcpRxTimestampLastGet(self, default_value)

    def RoundTripTimeAverageGet(self, default_value):
        return _byteblower.HTTPMultiResultData_RoundTripTimeAverageGet(self, default_value)

    def RoundTripTimeMinimumGet(self, default_value):
        return _byteblower.HTTPMultiResultData_RoundTripTimeMinimumGet(self, default_value)

    def RoundTripTimeMaximumGet(self, default_value):
        return _byteblower.HTTPMultiResultData_RoundTripTimeMaximumGet(self, default_value)

    def RetransmissionsGet(self):
        return _byteblower.HTTPMultiResultData_RetransmissionsGet(self)

    def IntervalDurationGet(self):
        return _byteblower.HTTPMultiResultData_IntervalDurationGet(self)

    def TimestampGet(self):
        return _byteblower.HTTPMultiResultData_TimestampGet(self)

    def ConnectionsAttemptedGet(self):
        return _byteblower.HTTPMultiResultData_ConnectionsAttemptedGet(self)

    def ConnectionsEstablishedGet(self):
        return _byteblower.HTTPMultiResultData_ConnectionsEstablishedGet(self)

    def ConnectionsAbortedGet(self):
        return _byteblower.HTTPMultiResultData_ConnectionsAbortedGet(self)

    def ConnectionsRefusedGet(self):
        return _byteblower.HTTPMultiResultData_ConnectionsRefusedGet(self)

    def SessionsFinishedGet(self):
        return _byteblower.HTTPMultiResultData_SessionsFinishedGet(self)

    def SessionsAbortedGet(self):
        return _byteblower.HTTPMultiResultData_SessionsAbortedGet(self)

    def SessionsResetByPeerGet(self):
        return _byteblower.HTTPMultiResultData_SessionsResetByPeerGet(self)

    def DebugCountersNamesGet(self):
        return _byteblower.HTTPMultiResultData_DebugCountersNamesGet(self)

    def DebugCountersGetByName(self, name):
        return _byteblower.HTTPMultiResultData_DebugCountersGetByName(self, name)
HTTPMultiResultData_swigregister = _byteblower.HTTPMultiResultData_swigregister
HTTPMultiResultData_swigregister(HTTPMultiResultData)

class HTTPMultiResultSnapshot(AbstractRefreshableResult):
    __swig_setmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HTTPMultiResultSnapshot, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HTTPMultiResultSnapshot, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def FinishedGet(self):
        return _byteblower.HTTPMultiResultSnapshot_FinishedGet(self)

    def RxByteCountGet(self):
        return _byteblower.HTTPMultiResultSnapshot_RxByteCountGet(self)

    def TxByteCountGet(self):
        return _byteblower.HTTPMultiResultSnapshot_TxByteCountGet(self)

    def RxSpeedGet(self):
        return _byteblower.HTTPMultiResultSnapshot_RxSpeedGet(self)

    def TxSpeedGet(self):
        return _byteblower.HTTPMultiResultSnapshot_TxSpeedGet(self)

    def TxTimestampFirstGet(self, default_value):
        return _byteblower.HTTPMultiResultSnapshot_TxTimestampFirstGet(self, default_value)

    def TxTimestampLastGet(self, default_value):
        return _byteblower.HTTPMultiResultSnapshot_TxTimestampLastGet(self, default_value)

    def RxTimestampFirstGet(self, default_value):
        return _byteblower.HTTPMultiResultSnapshot_RxTimestampFirstGet(self, default_value)

    def RxTimestampLastGet(self, default_value):
        return _byteblower.HTTPMultiResultSnapshot_RxTimestampLastGet(self, default_value)

    def TcpRxByteCountGet(self):
        return _byteblower.HTTPMultiResultSnapshot_TcpRxByteCountGet(self)

    def TcpTxByteCountGet(self):
        return _byteblower.HTTPMultiResultSnapshot_TcpTxByteCountGet(self)

    def TcpRxSpeedGet(self):
        return _byteblower.HTTPMultiResultSnapshot_TcpRxSpeedGet(self)

    def TcpTxSpeedGet(self):
        return _byteblower.HTTPMultiResultSnapshot_TcpTxSpeedGet(self)

    def TcpRxSegmentCountGet(self):
        return _byteblower.HTTPMultiResultSnapshot_TcpRxSegmentCountGet(self)

    def TcpTxSegmentCountGet(self):
        return _byteblower.HTTPMultiResultSnapshot_TcpTxSegmentCountGet(self)

    def TcpTxTimestampFirstGet(self, default_value):
        return _byteblower.HTTPMultiResultSnapshot_TcpTxTimestampFirstGet(self, default_value)

    def TcpTxTimestampLastGet(self, default_value):
        return _byteblower.HTTPMultiResultSnapshot_TcpTxTimestampLastGet(self, default_value)

    def TcpRxTimestampFirstGet(self, default_value):
        return _byteblower.HTTPMultiResultSnapshot_TcpRxTimestampFirstGet(self, default_value)

    def TcpRxTimestampLastGet(self, default_value):
        return _byteblower.HTTPMultiResultSnapshot_TcpRxTimestampLastGet(self, default_value)

    def RoundTripTimeAverageGet(self, default_value):
        return _byteblower.HTTPMultiResultSnapshot_RoundTripTimeAverageGet(self, default_value)

    def RoundTripTimeMinimumGet(self, default_value):
        return _byteblower.HTTPMultiResultSnapshot_RoundTripTimeMinimumGet(self, default_value)

    def RoundTripTimeMaximumGet(self, default_value):
        return _byteblower.HTTPMultiResultSnapshot_RoundTripTimeMaximumGet(self, default_value)

    def RetransmissionsGet(self):
        return _byteblower.HTTPMultiResultSnapshot_RetransmissionsGet(self)

    def IntervalDurationGet(self):
        return _byteblower.HTTPMultiResultSnapshot_IntervalDurationGet(self)

    def TimestampGet(self):
        return _byteblower.HTTPMultiResultSnapshot_TimestampGet(self)

    def ConnectionsAttemptedGet(self):
        return _byteblower.HTTPMultiResultSnapshot_ConnectionsAttemptedGet(self)

    def ConnectionsEstablishedGet(self):
        return _byteblower.HTTPMultiResultSnapshot_ConnectionsEstablishedGet(self)

    def ConnectionsAbortedGet(self):
        return _byteblower.HTTPMultiResultSnapshot_ConnectionsAbortedGet(self)

    def ConnectionsRefusedGet(self):
        return _byteblower.HTTPMultiResultSnapshot_ConnectionsRefusedGet(self)

    def SessionsFinishedGet(self):
        return _byteblower.HTTPMultiResultSnapshot_SessionsFinishedGet(self)

    def SessionsAbortedGet(self):
        return _byteblower.HTTPMultiResultSnapshot_SessionsAbortedGet(self)

    def SessionsResetByPeerGet(self):
        return _byteblower.HTTPMultiResultSnapshot_SessionsResetByPeerGet(self)

    def DebugCountersNamesGet(self):
        return _byteblower.HTTPMultiResultSnapshot_DebugCountersNamesGet(self)

    def DebugCountersGetByName(self, name):
        return _byteblower.HTTPMultiResultSnapshot_DebugCountersGetByName(self, name)

    def RefreshTimestampGet(self):
        return _byteblower.HTTPMultiResultSnapshot_RefreshTimestampGet(self)
HTTPMultiResultSnapshot_swigregister = _byteblower.HTTPMultiResultSnapshot_swigregister
HTTPMultiResultSnapshot_swigregister(HTTPMultiResultSnapshot)

class HTTPMultiResultHistory(AbstractRefreshableResult):
    __swig_setmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HTTPMultiResultHistory, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HTTPMultiResultHistory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def CumulativeGet(self):
        return _byteblower.HTTPMultiResultHistory_CumulativeGet(self)

    def CumulativeGetByIndex(self, index):
        return _byteblower.HTTPMultiResultHistory_CumulativeGetByIndex(self, index)

    def CumulativeLengthGet(self):
        return _byteblower.HTTPMultiResultHistory_CumulativeLengthGet(self)

    def IntervalGet(self):
        return _byteblower.HTTPMultiResultHistory_IntervalGet(self)

    def IntervalGetByIndex(self, index):
        return _byteblower.HTTPMultiResultHistory_IntervalGetByIndex(self, index)

    def IntervalLengthGet(self):
        return _byteblower.HTTPMultiResultHistory_IntervalLengthGet(self)

    def CumulativeGetByTime(self, timestamp):
        return _byteblower.HTTPMultiResultHistory_CumulativeGetByTime(self, timestamp)

    def IntervalGetByTime(self, timestamp):
        return _byteblower.HTTPMultiResultHistory_IntervalGetByTime(self, timestamp)

    def CumulativeLatestGet(self):
        return _byteblower.HTTPMultiResultHistory_CumulativeLatestGet(self)

    def IntervalLatestGet(self):
        return _byteblower.HTTPMultiResultHistory_IntervalLatestGet(self)

    def RefreshTimestampGet(self):
        return _byteblower.HTTPMultiResultHistory_RefreshTimestampGet(self)

    def Clear(self):
        return _byteblower.HTTPMultiResultHistory_Clear(self)
HTTPMultiResultHistory_swigregister = _byteblower.HTTPMultiResultHistory_swigregister
HTTPMultiResultHistory_swigregister(HTTPMultiResultHistory)

class HTTPMultiClient(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HTTPMultiClient, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HTTPMultiClient, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def StatusGet(self):
        return _byteblower.HTTPMultiClient_StatusGet(self)

    def FinishedGet(self):
        return _byteblower.HTTPMultiClient_FinishedGet(self)

    def DurationSet(self, value):
        return _byteblower.HTTPMultiClient_DurationSet(self, value)

    def DurationGet(self):
        return _byteblower.HTTPMultiClient_DurationGet(self)

    def SizeSet(self, value):
        return _byteblower.HTTPMultiClient_SizeSet(self, value)

    def SizeGet(self):
        return _byteblower.HTTPMultiClient_SizeGet(self)

    def SessionDurationSet(self, value):
        return _byteblower.HTTPMultiClient_SessionDurationSet(self, value)

    def SessionDurationGet(self):
        return _byteblower.HTTPMultiClient_SessionDurationGet(self)

    def SessionSizeSet(self, value):
        return _byteblower.HTTPMultiClient_SessionSizeSet(self, value)

    def SessionSizeGet(self):
        return _byteblower.HTTPMultiClient_SessionSizeGet(self)

    def SessionRateLimitSet(self, bytes_per_second):
        return _byteblower.HTTPMultiClient_SessionRateLimitSet(self, bytes_per_second)

    def SessionRateLimitGet(self):
        return _byteblower.HTTPMultiClient_SessionRateLimitGet(self)

    def MaximumConcurrentRequestsGet(self):
        return _byteblower.HTTPMultiClient_MaximumConcurrentRequestsGet(self)

    def MaximumConcurrentRequestsSet(self, value):
        return _byteblower.HTTPMultiClient_MaximumConcurrentRequestsSet(self, value)

    def CumulativeConnectionLimitGet(self):
        return _byteblower.HTTPMultiClient_CumulativeConnectionLimitGet(self)

    def CumulativeConnectionLimitSet(self, value):
        return _byteblower.HTTPMultiClient_CumulativeConnectionLimitSet(self, value)

    def MaximumConcurrentConnectionAttemptsGet(self):
        return _byteblower.HTTPMultiClient_MaximumConcurrentConnectionAttemptsGet(self)

    def MaximumConcurrentConnectionAttemptsSet(self, value):
        return _byteblower.HTTPMultiClient_MaximumConcurrentConnectionAttemptsSet(self, value)

    def RemoteAddressSet(self, value):
        return _byteblower.HTTPMultiClient_RemoteAddressSet(self, value)

    def RemoteAddressGet(self):
        return _byteblower.HTTPMultiClient_RemoteAddressGet(self)

    def RemotePortSet(self, value):
        return _byteblower.HTTPMultiClient_RemotePortSet(self, value)

    def RemotePortGet(self):
        return _byteblower.HTTPMultiClient_RemotePortGet(self)

    def LocalPortRangeSet(self, _from, to):
        return _byteblower.HTTPMultiClient_LocalPortRangeSet(self, _from, to)

    def LocalPortRangeGet(self):
        return _byteblower.HTTPMultiClient_LocalPortRangeGet(self)

    def MaximumSegmentSizeSet(self, value):
        return _byteblower.HTTPMultiClient_MaximumSegmentSizeSet(self, value)

    def MaximumSegmentSizeGet(self):
        return _byteblower.HTTPMultiClient_MaximumSegmentSizeGet(self)

    def ReceiveWindowInitialSizeSet(self, value):
        return _byteblower.HTTPMultiClient_ReceiveWindowInitialSizeSet(self, value)

    def ReceiveWindowInitialSizeGet(self):
        return _byteblower.HTTPMultiClient_ReceiveWindowInitialSizeGet(self)

    def ReceiveWindowScalingIsEnabled(self):
        return _byteblower.HTTPMultiClient_ReceiveWindowScalingIsEnabled(self)

    def ReceiveWindowScalingEnable(self, inEnable):
        return _byteblower.HTTPMultiClient_ReceiveWindowScalingEnable(self, inEnable)

    def ReceiveWindowScalingValueSet(self, value):
        return _byteblower.HTTPMultiClient_ReceiveWindowScalingValueSet(self, value)

    def ReceiveWindowScalingValueGet(self):
        return _byteblower.HTTPMultiClient_ReceiveWindowScalingValueGet(self)

    def SlowStartThresholdSet(self, value):
        return _byteblower.HTTPMultiClient_SlowStartThresholdSet(self, value)

    def SlowStartThresholdGet(self):
        return _byteblower.HTTPMultiClient_SlowStartThresholdGet(self)

    def TcpCongestionAvoidanceAlgorithmSet(self, value):
        return _byteblower.HTTPMultiClient_TcpCongestionAvoidanceAlgorithmSet(self, value)

    def TcpCongestionAvoidanceAlgorithmGet(self):
        return _byteblower.HTTPMultiClient_TcpCongestionAvoidanceAlgorithmGet(self)

    def TypeOfServiceSet(self, value):
        return _byteblower.HTTPMultiClient_TypeOfServiceSet(self, value)

    def TypeOfServiceGet(self):
        return _byteblower.HTTPMultiClient_TypeOfServiceGet(self)

    def FlowLabelSet(self, value):
        return _byteblower.HTTPMultiClient_FlowLabelSet(self, value)

    def FlowLabelGet(self):
        return _byteblower.HTTPMultiClient_FlowLabelGet(self)

    def HttpMethodSet(self, *args):
        return _byteblower.HTTPMultiClient_HttpMethodSet(self, *args)

    def HttpMethodGet(self):
        return _byteblower.HTTPMultiClient_HttpMethodGet(self)

    def InitialTimeToWaitSet(self, ns):
        return _byteblower.HTTPMultiClient_InitialTimeToWaitSet(self, ns)

    def InitialTimeToWaitGet(self):
        return _byteblower.HTTPMultiClient_InitialTimeToWaitGet(self)

    def Start(self):
        return _byteblower.HTTPMultiClient_Start(self)

    def Stop(self):
        return _byteblower.HTTPMultiClient_Stop(self)

    def SamplingIntervalDurationGet(self):
        return _byteblower.HTTPMultiClient_SamplingIntervalDurationGet(self)

    def SamplingIntervalDurationSet(self, value):
        return _byteblower.HTTPMultiClient_SamplingIntervalDurationSet(self, value)

    def SamplingBufferLengthGet(self):
        return _byteblower.HTTPMultiClient_SamplingBufferLengthGet(self)

    def SamplingBufferLengthSet(self, value):
        return _byteblower.HTTPMultiClient_SamplingBufferLengthSet(self, value)

    def ResultGet(self):
        return _byteblower.HTTPMultiClient_ResultGet(self)

    def ResultHistoryGet(self):
        return _byteblower.HTTPMultiClient_ResultHistoryGet(self)
HTTPMultiClient_swigregister = _byteblower.HTTPMultiClient_swigregister
HTTPMultiClient_swigregister(HTTPMultiClient)


_byteblower.HTTPMultiServerStatus_Stopped_swigconstant(_byteblower)
HTTPMultiServerStatus_Stopped = _byteblower.HTTPMultiServerStatus_Stopped

_byteblower.HTTPMultiServerStatus_Started_swigconstant(_byteblower)
HTTPMultiServerStatus_Started = _byteblower.HTTPMultiServerStatus_Started
class HTTPMultiServer(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HTTPMultiServer, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HTTPMultiServer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ByteBlowerServerGet(self):
        return _byteblower.HTTPMultiServer_ByteBlowerServerGet(self)

    def ByteBlowerPortGet(self):
        return _byteblower.HTTPMultiServer_ByteBlowerPortGet(self)

    def StatusGet(self):
        return _byteblower.HTTPMultiServer_StatusGet(self)

    def PortSet(self, inPort):
        return _byteblower.HTTPMultiServer_PortSet(self, inPort)

    def PortGet(self):
        return _byteblower.HTTPMultiServer_PortGet(self)

    def MaximumSegmentSizeSet(self, value):
        return _byteblower.HTTPMultiServer_MaximumSegmentSizeSet(self, value)

    def MaximumSegmentSizeGet(self):
        return _byteblower.HTTPMultiServer_MaximumSegmentSizeGet(self)

    def ReceiveWindowInitialSizeSet(self, value):
        return _byteblower.HTTPMultiServer_ReceiveWindowInitialSizeSet(self, value)

    def ReceiveWindowInitialSizeGet(self):
        return _byteblower.HTTPMultiServer_ReceiveWindowInitialSizeGet(self)

    def ReceiveWindowScalingIsEnabled(self):
        return _byteblower.HTTPMultiServer_ReceiveWindowScalingIsEnabled(self)

    def ReceiveWindowScalingEnable(self, value):
        return _byteblower.HTTPMultiServer_ReceiveWindowScalingEnable(self, value)

    def ReceiveWindowScalingValueSet(self, value):
        return _byteblower.HTTPMultiServer_ReceiveWindowScalingValueSet(self, value)

    def ReceiveWindowScalingValueGet(self):
        return _byteblower.HTTPMultiServer_ReceiveWindowScalingValueGet(self)

    def SlowStartThresholdSet(self, value):
        return _byteblower.HTTPMultiServer_SlowStartThresholdSet(self, value)

    def SlowStartThresholdGet(self):
        return _byteblower.HTTPMultiServer_SlowStartThresholdGet(self)

    def TcpCongestionAvoidanceAlgorithmSet(self, value):
        return _byteblower.HTTPMultiServer_TcpCongestionAvoidanceAlgorithmSet(self, value)

    def TcpCongestionAvoidanceAlgorithmGet(self):
        return _byteblower.HTTPMultiServer_TcpCongestionAvoidanceAlgorithmGet(self)

    def Start(self):
        return _byteblower.HTTPMultiServer_Start(self)

    def Stop(self):
        return _byteblower.HTTPMultiServer_Stop(self)

    def SamplingIntervalDurationGet(self):
        return _byteblower.HTTPMultiServer_SamplingIntervalDurationGet(self)

    def SamplingIntervalDurationSet(self, value):
        return _byteblower.HTTPMultiServer_SamplingIntervalDurationSet(self, value)

    def SamplingBufferLengthGet(self):
        return _byteblower.HTTPMultiServer_SamplingBufferLengthGet(self)

    def SamplingBufferLengthSet(self, value):
        return _byteblower.HTTPMultiServer_SamplingBufferLengthSet(self, value)

    def ResultGet(self):
        return _byteblower.HTTPMultiServer_ResultGet(self)

    def ResultHistoryGet(self):
        return _byteblower.HTTPMultiServer_ResultHistoryGet(self)
HTTPMultiServer_swigregister = _byteblower.HTTPMultiServer_swigregister
HTTPMultiServer_swigregister(HTTPMultiServer)

class HTTPClient(SchedulableObject):
    __swig_setmethods__ = {}
    for _s in [SchedulableObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HTTPClient, name, value)
    __swig_getmethods__ = {}
    for _s in [SchedulableObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HTTPClient, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def RequestStatusGet(self):
        return _byteblower.HTTPClient_RequestStatusGet(self)

    def ErrorMessageGet(self):
        return _byteblower.HTTPClient_ErrorMessageGet(self)

    def FinishedGet(self):
        return _byteblower.HTTPClient_FinishedGet(self)

    def HasSession(self):
        return _byteblower.HTTPClient_HasSession(self)

    def HasError(self):
        return _byteblower.HTTPClient_HasError(self)

    def WaitUntilConnected(self, timeout):
        return _byteblower.HTTPClient_WaitUntilConnected(self, timeout)

    def WaitUntilFinished(self, timeout_ns):
        return _byteblower.HTTPClient_WaitUntilFinished(self, timeout_ns)
    RequestStartType_Direct = _byteblower.HTTPClient_RequestStartType_Direct
    RequestStartType_Scheduled = _byteblower.HTTPClient_RequestStartType_Scheduled

    def RequestStartTypeSet(self, inRequestStartType):
        return _byteblower.HTTPClient_RequestStartTypeSet(self, inRequestStartType)

    def RequestStartTypeGet(self):
        return _byteblower.HTTPClient_RequestStartTypeGet(self)

    def RequestStart(self):
        return _byteblower.HTTPClient_RequestStart(self)

    def RequestStop(self):
        return _byteblower.HTTPClient_RequestStop(self)

    def RequestSizeSet(self, inRequestSize):
        return _byteblower.HTTPClient_RequestSizeSet(self, inRequestSize)

    def RequestSizeGet(self):
        return _byteblower.HTTPClient_RequestSizeGet(self)

    def RequestDurationSet(self, inDurationNs):
        return _byteblower.HTTPClient_RequestDurationSet(self, inDurationNs)

    def RequestDurationGet(self):
        return _byteblower.HTTPClient_RequestDurationGet(self)

    def RequestRateLimitSet(self, inRateLimitBytesps):
        return _byteblower.HTTPClient_RequestRateLimitSet(self, inRateLimitBytesps)

    def RequestRateLimitGet(self):
        return _byteblower.HTTPClient_RequestRateLimitGet(self)

    def RequestPageSet(self, arg2):
        return _byteblower.HTTPClient_RequestPageSet(self, arg2)

    def RequestPageGet(self):
        return _byteblower.HTTPClient_RequestPageGet(self)

    def RequestUriSet(self, inURI):
        return _byteblower.HTTPClient_RequestUriSet(self, inURI)

    def RequestUriGet(self):
        return _byteblower.HTTPClient_RequestUriGet(self)

    def LocalPortSet(self, inPort):
        return _byteblower.HTTPClient_LocalPortSet(self, inPort)

    def LocalPortGet(self):
        return _byteblower.HTTPClient_LocalPortGet(self)

    def RemoteAddressSet(self, inAddress):
        return _byteblower.HTTPClient_RemoteAddressSet(self, inAddress)

    def RemoteAddressGet(self):
        return _byteblower.HTTPClient_RemoteAddressGet(self)

    def RemotePortSet(self, inRemotePort):
        return _byteblower.HTTPClient_RemotePortSet(self, inRemotePort)

    def RemotePortGet(self):
        return _byteblower.HTTPClient_RemotePortGet(self)

    def MaximumSegmentSizeSet(self, inValue):
        return _byteblower.HTTPClient_MaximumSegmentSizeSet(self, inValue)

    def MaximumSegmentSizeGet(self):
        return _byteblower.HTTPClient_MaximumSegmentSizeGet(self)

    def ReceiveWindowInitialSizeSet(self, inValue):
        return _byteblower.HTTPClient_ReceiveWindowInitialSizeSet(self, inValue)

    def ReceiveWindowInitialSizeGet(self):
        return _byteblower.HTTPClient_ReceiveWindowInitialSizeGet(self)

    def ReceiveWindowScalingIsEnabled(self):
        return _byteblower.HTTPClient_ReceiveWindowScalingIsEnabled(self)

    def ReceiveWindowScalingEnable(self, inEnable):
        return _byteblower.HTTPClient_ReceiveWindowScalingEnable(self, inEnable)

    def ReceiveWindowScalingValueSet(self, inValue):
        return _byteblower.HTTPClient_ReceiveWindowScalingValueSet(self, inValue)

    def ReceiveWindowScalingValueGet(self):
        return _byteblower.HTTPClient_ReceiveWindowScalingValueGet(self)

    def SlowStartThresholdSet(self, inValue):
        return _byteblower.HTTPClient_SlowStartThresholdSet(self, inValue)

    def SlowStartThresholdGet(self):
        return _byteblower.HTTPClient_SlowStartThresholdGet(self)

    def TcpCongestionAvoidanceAlgorithmSet(self, inValue):
        return _byteblower.HTTPClient_TcpCongestionAvoidanceAlgorithmSet(self, inValue)

    def TcpCongestionAvoidanceAlgorithmGet(self):
        return _byteblower.HTTPClient_TcpCongestionAvoidanceAlgorithmGet(self)

    def RequestInitialTimeToWaitGet(self):
        return _byteblower.HTTPClient_RequestInitialTimeToWaitGet(self)

    def RequestInitialTimeToWaitSet(self, inDelay):
        return _byteblower.HTTPClient_RequestInitialTimeToWaitSet(self, inDelay)

    def HttpSessionInfoGet(self):
        return _byteblower.HTTPClient_HttpSessionInfoGet(self)

    def HttpSessionInfoDestroy(self):
        return _byteblower.HTTPClient_HttpSessionInfoDestroy(self)

    def HttpMethodSet(self, *args):
        return _byteblower.HTTPClient_HttpMethodSet(self, *args)

    def HttpMethodGet(self):
        return _byteblower.HTTPClient_HttpMethodGet(self)

    def CaptureEnable(self, inValue=True):
        return _byteblower.HTTPClient_CaptureEnable(self, inValue)

    def IsCaptureEnabled(self):
        return _byteblower.HTTPClient_IsCaptureEnabled(self)

    def CaptureGet(self):
        return _byteblower.HTTPClient_CaptureGet(self)

    def CaptureClear(self):
        return _byteblower.HTTPClient_CaptureClear(self)

    def ClientIdGet(self):
        return _byteblower.HTTPClient_ClientIdGet(self)

    def ServerIdGet(self):
        return _byteblower.HTTPClient_ServerIdGet(self)

    def ServerClientIdGet(self):
        return _byteblower.HTTPClient_ServerClientIdGet(self)

    def ResultGet(self):
        return _byteblower.HTTPClient_ResultGet(self)

    def ResultHistoryGet(self):
        return _byteblower.HTTPClient_ResultHistoryGet(self)

    def HistorySamplingIntervalDurationGet(self):
        return _byteblower.HTTPClient_HistorySamplingIntervalDurationGet(self)

    def HistorySamplingBufferLengthGet(self):
        return _byteblower.HTTPClient_HistorySamplingBufferLengthGet(self)

    def HistorySamplingIntervalDurationSet(self, inDuration):
        return _byteblower.HTTPClient_HistorySamplingIntervalDurationSet(self, inDuration)

    def HistorySamplingBufferLengthSet(self, inLength):
        return _byteblower.HTTPClient_HistorySamplingBufferLengthSet(self, inLength)

    def TcpHistorySamplingIntervalDurationGet(self):
        return _byteblower.HTTPClient_TcpHistorySamplingIntervalDurationGet(self)

    def TcpHistorySamplingBufferLengthGet(self):
        return _byteblower.HTTPClient_TcpHistorySamplingBufferLengthGet(self)

    def TcpHistorySamplingIntervalDurationSet(self, inDuration):
        return _byteblower.HTTPClient_TcpHistorySamplingIntervalDurationSet(self, inDuration)

    def TcpHistorySamplingBufferLengthSet(self, inLength):
        return _byteblower.HTTPClient_TcpHistorySamplingBufferLengthSet(self, inLength)

    def TypeOfServiceSet(self, value):
        return _byteblower.HTTPClient_TypeOfServiceSet(self, value)

    def TypeOfServiceGet(self):
        return _byteblower.HTTPClient_TypeOfServiceGet(self)

    def FlowLabelSet(self, value):
        return _byteblower.HTTPClient_FlowLabelSet(self, value)

    def FlowLabelGet(self):
        return _byteblower.HTTPClient_FlowLabelGet(self)
HTTPClient_swigregister = _byteblower.HTTPClient_swigregister
HTTPClient_swigregister(HTTPClient)


def ConvertRequestStartTypeToString(inRequestStartType):
    return _byteblower.ConvertRequestStartTypeToString(inRequestStartType)
ConvertRequestStartTypeToString = _byteblower.ConvertRequestStartTypeToString

def ParseRequestStartType(inStr):
    return _byteblower.ParseRequestStartType(inStr)
ParseRequestStartType = _byteblower.ParseRequestStartType
class HTTPClientMobile(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HTTPClientMobile, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HTTPClientMobile, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def RequestDurationSet(self, inDurationNs):
        return _byteblower.HTTPClientMobile_RequestDurationSet(self, inDurationNs)

    def RequestDurationGet(self):
        return _byteblower.HTTPClientMobile_RequestDurationGet(self)

    def LocalPortSet(self, inPort):
        return _byteblower.HTTPClientMobile_LocalPortSet(self, inPort)

    def LocalPortGet(self):
        return _byteblower.HTTPClientMobile_LocalPortGet(self)

    def RemoteAddressSet(self, inAddress):
        return _byteblower.HTTPClientMobile_RemoteAddressSet(self, inAddress)

    def RemoteAddressGet(self):
        return _byteblower.HTTPClientMobile_RemoteAddressGet(self)

    def RemotePortSet(self, inRemotePort):
        return _byteblower.HTTPClientMobile_RemotePortSet(self, inRemotePort)

    def RemotePortGet(self):
        return _byteblower.HTTPClientMobile_RemotePortGet(self)

    def RequestInitialTimeToWaitGet(self):
        return _byteblower.HTTPClientMobile_RequestInitialTimeToWaitGet(self)

    def RequestInitialTimeToWaitSet(self, inDelay):
        return _byteblower.HTTPClientMobile_RequestInitialTimeToWaitSet(self, inDelay)

    def HttpMethodSet(self, *args):
        return _byteblower.HTTPClientMobile_HttpMethodSet(self, *args)

    def HttpMethodGet(self):
        return _byteblower.HTTPClientMobile_HttpMethodGet(self)

    def RequestRateLimitSet(self, inRateLimitBytesps):
        return _byteblower.HTTPClientMobile_RequestRateLimitSet(self, inRateLimitBytesps)

    def RequestRateLimitGet(self):
        return _byteblower.HTTPClientMobile_RequestRateLimitGet(self)

    def RestartIsEnabled(self):
        return _byteblower.HTTPClientMobile_RestartIsEnabled(self)

    def RestartEnable(self, arg2):
        return _byteblower.HTTPClientMobile_RestartEnable(self, arg2)

    def ClientIdGet(self):
        return _byteblower.HTTPClientMobile_ClientIdGet(self)

    def ServerIdGet(self):
        return _byteblower.HTTPClientMobile_ServerIdGet(self)

    def ServerClientIdGet(self):
        return _byteblower.HTTPClientMobile_ServerClientIdGet(self)

    def TypeOfServiceSet(self, value):
        return _byteblower.HTTPClientMobile_TypeOfServiceSet(self, value)

    def TypeOfServiceGet(self):
        return _byteblower.HTTPClientMobile_TypeOfServiceGet(self)
HTTPClientMobile_swigregister = _byteblower.HTTPClientMobile_swigregister
HTTPClientMobile_swigregister(HTTPClientMobile)


_byteblower.HTTPServerStatus_Running_swigconstant(_byteblower)
HTTPServerStatus_Running = _byteblower.HTTPServerStatus_Running

_byteblower.HTTPServerStatus_Stopped_swigconstant(_byteblower)
HTTPServerStatus_Stopped = _byteblower.HTTPServerStatus_Stopped

_byteblower.HTTPServerStatus_Error_swigconstant(_byteblower)
HTTPServerStatus_Error = _byteblower.HTTPServerStatus_Error

_byteblower.HTTPServerStatus_Unknown_swigconstant(_byteblower)
HTTPServerStatus_Unknown = _byteblower.HTTPServerStatus_Unknown
class HTTPServer(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HTTPServer, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HTTPServer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ByteBlowerServerGet(self):
        return _byteblower.HTTPServer_ByteBlowerServerGet(self)

    def ByteBlowerPortGet(self):
        return _byteblower.HTTPServer_ByteBlowerPortGet(self)

    def Start(self):
        return _byteblower.HTTPServer_Start(self)

    def Stop(self):
        return _byteblower.HTTPServer_Stop(self)

    def StatusGet(self):
        return _byteblower.HTTPServer_StatusGet(self)

    def PortSet(self, inPort):
        return _byteblower.HTTPServer_PortSet(self, inPort)

    def PortGet(self):
        return _byteblower.HTTPServer_PortGet(self)

    def HttpSessionInfoGet(self, inServerClientId):
        return _byteblower.HTTPServer_HttpSessionInfoGet(self, inServerClientId)

    def HasSession(self, inServerClientId):
        return _byteblower.HTTPServer_HasSession(self, inServerClientId)

    def ResultGet(self, inServerClientId):
        return _byteblower.HTTPServer_ResultGet(self, inServerClientId)

    def ResultHistoryGet(self, inServerClientId):
        return _byteblower.HTTPServer_ResultHistoryGet(self, inServerClientId)

    def HttpSessionInfoDestroy(self, inServerClientId):
        return _byteblower.HTTPServer_HttpSessionInfoDestroy(self, inServerClientId)

    def MaximumSegmentSizeSet(self, inValue):
        return _byteblower.HTTPServer_MaximumSegmentSizeSet(self, inValue)

    def MaximumSegmentSizeGet(self):
        return _byteblower.HTTPServer_MaximumSegmentSizeGet(self)

    def ReceiveWindowInitialSizeSet(self, inValue):
        return _byteblower.HTTPServer_ReceiveWindowInitialSizeSet(self, inValue)

    def ReceiveWindowInitialSizeGet(self):
        return _byteblower.HTTPServer_ReceiveWindowInitialSizeGet(self)

    def ReceiveWindowScalingIsEnabled(self):
        return _byteblower.HTTPServer_ReceiveWindowScalingIsEnabled(self)

    def ReceiveWindowScalingEnable(self, inWindowScaling):
        return _byteblower.HTTPServer_ReceiveWindowScalingEnable(self, inWindowScaling)

    def SessionStorageIsEnabled(self):
        return _byteblower.HTTPServer_SessionStorageIsEnabled(self)

    def SessionStorageEnable(self, value):
        return _byteblower.HTTPServer_SessionStorageEnable(self, value)

    def ReceiveWindowScalingValueGet(self):
        return _byteblower.HTTPServer_ReceiveWindowScalingValueGet(self)

    def ReceiveWindowScalingValueSet(self, inRcvWindowScale):
        return _byteblower.HTTPServer_ReceiveWindowScalingValueSet(self, inRcvWindowScale)

    def SlowStartThresholdSet(self, inValue):
        return _byteblower.HTTPServer_SlowStartThresholdSet(self, inValue)

    def SlowStartThresholdGet(self):
        return _byteblower.HTTPServer_SlowStartThresholdGet(self)

    def TcpCongestionAvoidanceAlgorithmSet(self, inValue):
        return _byteblower.HTTPServer_TcpCongestionAvoidanceAlgorithmSet(self, inValue)

    def TcpCongestionAvoidanceAlgorithmGet(self):
        return _byteblower.HTTPServer_TcpCongestionAvoidanceAlgorithmGet(self)

    def ClientIdentifiersGet(self):
        return _byteblower.HTTPServer_ClientIdentifiersGet(self)

    def HistorySamplingIntervalDurationGet(self):
        return _byteblower.HTTPServer_HistorySamplingIntervalDurationGet(self)

    def HistorySamplingBufferLengthGet(self):
        return _byteblower.HTTPServer_HistorySamplingBufferLengthGet(self)

    def HistorySamplingIntervalDurationSet(self, inDuration):
        return _byteblower.HTTPServer_HistorySamplingIntervalDurationSet(self, inDuration)

    def HistorySamplingBufferLengthSet(self, inLength):
        return _byteblower.HTTPServer_HistorySamplingBufferLengthSet(self, inLength)

    def TcpHistorySamplingIntervalDurationGet(self):
        return _byteblower.HTTPServer_TcpHistorySamplingIntervalDurationGet(self)

    def TcpHistorySamplingBufferLengthGet(self):
        return _byteblower.HTTPServer_TcpHistorySamplingBufferLengthGet(self)

    def TcpHistorySamplingIntervalDurationSet(self, inDuration):
        return _byteblower.HTTPServer_TcpHistorySamplingIntervalDurationSet(self, inDuration)

    def TcpHistorySamplingBufferLengthSet(self, inLength):
        return _byteblower.HTTPServer_TcpHistorySamplingBufferLengthSet(self, inLength)
HTTPServer_swigregister = _byteblower.HTTPServer_swigregister
HTTPServer_swigregister(HTTPServer)

class ICMPEchoSession(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICMPEchoSession, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ICMPEchoSession, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def RemoteAddressSet(self, inIPAddress):
        return _byteblower.ICMPEchoSession_RemoteAddressSet(self, inIPAddress)

    def RemoteAddressGet(self):
        return _byteblower.ICMPEchoSession_RemoteAddressGet(self)

    def TtlSet(self, inTTL):
        return _byteblower.ICMPEchoSession_TtlSet(self, inTTL)

    def TtlGet(self):
        return _byteblower.ICMPEchoSession_TtlGet(self)

    def TypeOfServiceSet(self, inTOS):
        return _byteblower.ICMPEchoSession_TypeOfServiceSet(self, inTOS)

    def TypeOfServiceGet(self):
        return _byteblower.ICMPEchoSession_TypeOfServiceGet(self)

    def IdentifierGet(self):
        return _byteblower.ICMPEchoSession_IdentifierGet(self)

    def DataSizeSet(self, inDataSize):
        return _byteblower.ICMPEchoSession_DataSizeSet(self, inDataSize)

    def DataSizeGet(self):
        return _byteblower.ICMPEchoSession_DataSizeGet(self)

    def EchoRequestSend(self):
        return _byteblower.ICMPEchoSession_EchoRequestSend(self)

    def EchoStatsClear(self):
        return _byteblower.ICMPEchoSession_EchoStatsClear(self)

    def EchoLoopIntervalSet(self, inTimeNs):
        return _byteblower.ICMPEchoSession_EchoLoopIntervalSet(self, inTimeNs)

    def EchoLoopIntervalGet(self):
        return _byteblower.ICMPEchoSession_EchoLoopIntervalGet(self)

    def EchoLoopCountSet(self, inCount):
        return _byteblower.ICMPEchoSession_EchoLoopCountSet(self, inCount)

    def EchoLoopCountGet(self):
        return _byteblower.ICMPEchoSession_EchoLoopCountGet(self)

    def EchoLoopStart(self):
        return _byteblower.ICMPEchoSession_EchoLoopStart(self)

    def EchoLoopStop(self):
        return _byteblower.ICMPEchoSession_EchoLoopStop(self)

    def GetICMPProtocol(self):
        return _byteblower.ICMPEchoSession_GetICMPProtocol(self)

    def SessionInfoGet(self):
        return _byteblower.ICMPEchoSession_SessionInfoGet(self)
ICMPEchoSession_swigregister = _byteblower.ICMPEchoSession_swigregister
ICMPEchoSession_swigregister(ICMPEchoSession)

class ICMPEchoSessionInfo(AbstractRefreshableResult):
    __swig_setmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICMPEchoSessionInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ICMPEchoSessionInfo, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def TxEchoRequestsGet(self):
        return _byteblower.ICMPEchoSessionInfo_TxEchoRequestsGet(self)

    def TxEchoRepliesGet(self):
        return _byteblower.ICMPEchoSessionInfo_TxEchoRepliesGet(self)

    def RxEchoRequestsGet(self):
        return _byteblower.ICMPEchoSessionInfo_RxEchoRequestsGet(self)

    def RxEchoRepliesGet(self):
        return _byteblower.ICMPEchoSessionInfo_RxEchoRepliesGet(self)

    def RefreshTimestampGet(self):
        return _byteblower.ICMPEchoSessionInfo_RefreshTimestampGet(self)
ICMPEchoSessionInfo_swigregister = _byteblower.ICMPEchoSessionInfo_swigregister
ICMPEchoSessionInfo_swigregister(ICMPEchoSessionInfo)

class ICMPProtocol(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICMPProtocol, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ICMPProtocol, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ServerGet(self):
        return _byteblower.ICMPProtocol_ServerGet(self)

    def PortGet(self):
        return _byteblower.ICMPProtocol_PortGet(self)

    def SessionAdd(self, *args):
        return _byteblower.ICMPProtocol_SessionAdd(self, *args)

    def SessionGet(self):
        return _byteblower.ICMPProtocol_SessionGet(self)

    def SessionDestroy(self, inSession):
        return _byteblower.ICMPProtocol_SessionDestroy(self, inSession)
ICMPProtocol_swigregister = _byteblower.ICMPProtocol_swigregister
ICMPProtocol_swigregister(ICMPProtocol)

class ICMPv6EchoSession(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICMPv6EchoSession, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ICMPv6EchoSession, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def RemoteAddressSet(self, inIPAddress):
        return _byteblower.ICMPv6EchoSession_RemoteAddressSet(self, inIPAddress)

    def RemoteAddressGet(self):
        return _byteblower.ICMPv6EchoSession_RemoteAddressGet(self)

    def DataSizeSet(self, inDataSize):
        return _byteblower.ICMPv6EchoSession_DataSizeSet(self, inDataSize)

    def DataSizeGet(self):
        return _byteblower.ICMPv6EchoSession_DataSizeGet(self)

    def IdentifierGet(self):
        return _byteblower.ICMPv6EchoSession_IdentifierGet(self)

    def EchoRequestSend(self):
        return _byteblower.ICMPv6EchoSession_EchoRequestSend(self)

    def EchoStatisticsClear(self):
        return _byteblower.ICMPv6EchoSession_EchoStatisticsClear(self)

    def EchoLoopIntervalSet(self, inTimeNs):
        return _byteblower.ICMPv6EchoSession_EchoLoopIntervalSet(self, inTimeNs)

    def EchoLoopIntervalGet(self):
        return _byteblower.ICMPv6EchoSession_EchoLoopIntervalGet(self)

    def EchoLoopCountSet(self, arg2):
        return _byteblower.ICMPv6EchoSession_EchoLoopCountSet(self, arg2)

    def EchoLoopCountGet(self):
        return _byteblower.ICMPv6EchoSession_EchoLoopCountGet(self)

    def EchoLoopStart(self):
        return _byteblower.ICMPv6EchoSession_EchoLoopStart(self)

    def EchoLoopStop(self):
        return _byteblower.ICMPv6EchoSession_EchoLoopStop(self)

    def HopLimitSet(self, arg2):
        return _byteblower.ICMPv6EchoSession_HopLimitSet(self, arg2)

    def HopLimitGet(self):
        return _byteblower.ICMPv6EchoSession_HopLimitGet(self)

    def TrafficClassSet(self, inTrafficClass):
        return _byteblower.ICMPv6EchoSession_TrafficClassSet(self, inTrafficClass)

    def TrafficClassGet(self):
        return _byteblower.ICMPv6EchoSession_TrafficClassGet(self)

    def SessionInfoGet(self):
        return _byteblower.ICMPv6EchoSession_SessionInfoGet(self)

    def GetICMPv6Protocol(self):
        return _byteblower.ICMPv6EchoSession_GetICMPv6Protocol(self)
ICMPv6EchoSession_swigregister = _byteblower.ICMPv6EchoSession_swigregister
ICMPv6EchoSession_swigregister(ICMPv6EchoSession)

class ICMPv6EchoSessionInfo(AbstractRefreshableResult):
    __swig_setmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICMPv6EchoSessionInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ICMPv6EchoSessionInfo, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def TxEchoRequestsGet(self):
        return _byteblower.ICMPv6EchoSessionInfo_TxEchoRequestsGet(self)

    def TxEchoRepliesGet(self):
        return _byteblower.ICMPv6EchoSessionInfo_TxEchoRepliesGet(self)

    def RxEchoRequestsGet(self):
        return _byteblower.ICMPv6EchoSessionInfo_RxEchoRequestsGet(self)

    def RxEchoRepliesGet(self):
        return _byteblower.ICMPv6EchoSessionInfo_RxEchoRepliesGet(self)

    def RefreshTimestampGet(self):
        return _byteblower.ICMPv6EchoSessionInfo_RefreshTimestampGet(self)
ICMPv6EchoSessionInfo_swigregister = _byteblower.ICMPv6EchoSessionInfo_swigregister
ICMPv6EchoSessionInfo_swigregister(ICMPv6EchoSessionInfo)

class ICMPv6Protocol(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICMPv6Protocol, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ICMPv6Protocol, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def PortGet(self):
        return _byteblower.ICMPv6Protocol_PortGet(self)

    def SessionAdd(self, *args):
        return _byteblower.ICMPv6Protocol_SessionAdd(self, *args)

    def SessionGet(self):
        return _byteblower.ICMPv6Protocol_SessionGet(self)

    def SessionDestroy(self, inSession):
        return _byteblower.ICMPv6Protocol_SessionDestroy(self, inSession)
ICMPv6Protocol_swigregister = _byteblower.ICMPv6Protocol_swigregister
ICMPv6Protocol_swigregister(ICMPv6Protocol)

class IGMPProtocol(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMPProtocol, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IGMPProtocol, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ProtocolInfoGet(self):
        return _byteblower.IGMPProtocol_ProtocolInfoGet(self)

    def ProtocolInfoDestroy(self, inIGMPProtocolInfo):
        return _byteblower.IGMPProtocol_ProtocolInfoDestroy(self, inIGMPProtocolInfo)

    def SessionV1Add(self, inGroupAddress):
        return _byteblower.IGMPProtocol_SessionV1Add(self, inGroupAddress)

    def SessionV2Add(self, inGroupAddress):
        return _byteblower.IGMPProtocol_SessionV2Add(self, inGroupAddress)

    def SessionV3Add(self, inGroupAddress):
        return _byteblower.IGMPProtocol_SessionV3Add(self, inGroupAddress)

    def SessionDestroy(self, *args):
        return _byteblower.IGMPProtocol_SessionDestroy(self, *args)
IGMPProtocol_swigregister = _byteblower.IGMPProtocol_swigregister
IGMPProtocol_swigregister(IGMPProtocol)

class IGMPProtocolInfo(AbstractRefreshableResult):
    __swig_setmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMPProtocolInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IGMPProtocolInfo, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def RxGet(self):
        return _byteblower.IGMPProtocolInfo_RxGet(self)

    def RxQueriesGet(self):
        return _byteblower.IGMPProtocolInfo_RxQueriesGet(self)

    def RxReportsGet(self):
        return _byteblower.IGMPProtocolInfo_RxReportsGet(self)

    def RxVersion1QueriesGet(self):
        return _byteblower.IGMPProtocolInfo_RxVersion1QueriesGet(self)

    def RxVersion1ReportsGet(self):
        return _byteblower.IGMPProtocolInfo_RxVersion1ReportsGet(self)

    def RxVersion2QueriesGet(self):
        return _byteblower.IGMPProtocolInfo_RxVersion2QueriesGet(self)

    def RxVersion2ReportsGet(self):
        return _byteblower.IGMPProtocolInfo_RxVersion2ReportsGet(self)

    def RxVersion2LeavesGet(self):
        return _byteblower.IGMPProtocolInfo_RxVersion2LeavesGet(self)

    def RxVersion3QueriesGet(self):
        return _byteblower.IGMPProtocolInfo_RxVersion3QueriesGet(self)

    def RxVersion3ReportsGet(self):
        return _byteblower.IGMPProtocolInfo_RxVersion3ReportsGet(self)

    def TxGet(self):
        return _byteblower.IGMPProtocolInfo_TxGet(self)

    def TxReportsGet(self):
        return _byteblower.IGMPProtocolInfo_TxReportsGet(self)

    def TxVersion1ReportsGet(self):
        return _byteblower.IGMPProtocolInfo_TxVersion1ReportsGet(self)

    def TxVersion2ReportsGet(self):
        return _byteblower.IGMPProtocolInfo_TxVersion2ReportsGet(self)

    def TxVersion2LeavesGet(self):
        return _byteblower.IGMPProtocolInfo_TxVersion2LeavesGet(self)

    def TxVersion3ReportsGet(self):
        return _byteblower.IGMPProtocolInfo_TxVersion3ReportsGet(self)

    def GetIGMPProtocol(self):
        return _byteblower.IGMPProtocolInfo_GetIGMPProtocol(self)

    def RefreshTimestampGet(self):
        return _byteblower.IGMPProtocolInfo_RefreshTimestampGet(self)
IGMPProtocolInfo_swigregister = _byteblower.IGMPProtocolInfo_swigregister
IGMPProtocolInfo_swigregister(IGMPProtocolInfo)

class IGMPMemberSession(SchedulableObject):
    __swig_setmethods__ = {}
    for _s in [SchedulableObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMPMemberSession, name, value)
    __swig_getmethods__ = {}
    for _s in [SchedulableObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IGMPMemberSession, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def MulticastAddressGet(self):
        return _byteblower.IGMPMemberSession_MulticastAddressGet(self)

    def VersionGet(self):
        return _byteblower.IGMPMemberSession_VersionGet(self)

    def SessionInfoGet(self):
        return _byteblower.IGMPMemberSession_SessionInfoGet(self)

    def SessionInfoDestroy(self, inMemberSessionInfo):
        return _byteblower.IGMPMemberSession_SessionInfoDestroy(self, inMemberSessionInfo)

    def GetIGMPv3MemberSession(self):
        return _byteblower.IGMPMemberSession_GetIGMPv3MemberSession(self)

    def GetIGMPProtocol(self):
        return _byteblower.IGMPMemberSession_GetIGMPProtocol(self)
IGMPMemberSession_swigregister = _byteblower.IGMPMemberSession_swigregister
IGMPMemberSession_swigregister(IGMPMemberSession)

class IGMPv1MemberSession(IGMPMemberSession):
    __swig_setmethods__ = {}
    for _s in [IGMPMemberSession]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMPv1MemberSession, name, value)
    __swig_getmethods__ = {}
    for _s in [IGMPMemberSession]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IGMPv1MemberSession, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Join(self):
        return _byteblower.IGMPv1MemberSession_Join(self)

    def Leave(self):
        return _byteblower.IGMPv1MemberSession_Leave(self)
IGMPv1MemberSession_swigregister = _byteblower.IGMPv1MemberSession_swigregister
IGMPv1MemberSession_swigregister(IGMPv1MemberSession)

class IGMPv2MemberSession(IGMPMemberSession):
    __swig_setmethods__ = {}
    for _s in [IGMPMemberSession]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMPv2MemberSession, name, value)
    __swig_getmethods__ = {}
    for _s in [IGMPMemberSession]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IGMPv2MemberSession, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Join(self):
        return _byteblower.IGMPv2MemberSession_Join(self)

    def Leave(self):
        return _byteblower.IGMPv2MemberSession_Leave(self)
IGMPv2MemberSession_swigregister = _byteblower.IGMPv2MemberSession_swigregister
IGMPv2MemberSession_swigregister(IGMPv2MemberSession)

class IGMPv3MemberSession(IGMPMemberSession):
    __swig_setmethods__ = {}
    for _s in [IGMPMemberSession]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMPv3MemberSession, name, value)
    __swig_getmethods__ = {}
    for _s in [IGMPMemberSession]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IGMPv3MemberSession, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def MulticastListen(self, inSourceFilter, inSourceList):
        return _byteblower.IGMPv3MemberSession_MulticastListen(self, inSourceFilter, inSourceList)

    def SourceFilterModeGet(self):
        return _byteblower.IGMPv3MemberSession_SourceFilterModeGet(self)

    def SourceListGet(self):
        return _byteblower.IGMPv3MemberSession_SourceListGet(self)
IGMPv3MemberSession_swigregister = _byteblower.IGMPv3MemberSession_swigregister
IGMPv3MemberSession_swigregister(IGMPv3MemberSession)

class IGMPMemberSessionInfo(AbstractRefreshableResult):
    __swig_setmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMPMemberSessionInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IGMPMemberSessionInfo, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def RxGet(self):
        return _byteblower.IGMPMemberSessionInfo_RxGet(self)

    def RxQueriesGet(self):
        return _byteblower.IGMPMemberSessionInfo_RxQueriesGet(self)

    def RxVersion1ReportsGet(self):
        return _byteblower.IGMPMemberSessionInfo_RxVersion1ReportsGet(self)

    def RxVersion2ReportsGet(self):
        return _byteblower.IGMPMemberSessionInfo_RxVersion2ReportsGet(self)

    def TxGet(self):
        return _byteblower.IGMPMemberSessionInfo_TxGet(self)

    def TxVersion1ReportsGet(self):
        return _byteblower.IGMPMemberSessionInfo_TxVersion1ReportsGet(self)

    def TxVersion2ReportsGet(self):
        return _byteblower.IGMPMemberSessionInfo_TxVersion2ReportsGet(self)

    def TxVersion2LeavesGet(self):
        return _byteblower.IGMPMemberSessionInfo_TxVersion2LeavesGet(self)

    def TxVersion3ReportsGet(self):
        return _byteblower.IGMPMemberSessionInfo_TxVersion3ReportsGet(self)

    def GetIGMPMemberSession(self):
        return _byteblower.IGMPMemberSessionInfo_GetIGMPMemberSession(self)

    def RefreshTimestampGet(self):
        return _byteblower.IGMPMemberSessionInfo_RefreshTimestampGet(self)
IGMPMemberSessionInfo_swigregister = _byteblower.IGMPMemberSessionInfo_swigregister
IGMPMemberSessionInfo_swigregister(IGMPMemberSessionInfo)

class MLDMulticastListenerSessionInfo(AbstractRefreshableResult):
    __swig_setmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MLDMulticastListenerSessionInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MLDMulticastListenerSessionInfo, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def RxGet(self):
        return _byteblower.MLDMulticastListenerSessionInfo_RxGet(self)

    def RxListenerQueriesGet(self):
        return _byteblower.MLDMulticastListenerSessionInfo_RxListenerQueriesGet(self)

    def RxVersion1ListenerReportsGet(self):
        return _byteblower.MLDMulticastListenerSessionInfo_RxVersion1ListenerReportsGet(self)

    def TxGet(self):
        return _byteblower.MLDMulticastListenerSessionInfo_TxGet(self)

    def TxVersion1ListenerReportsGet(self):
        return _byteblower.MLDMulticastListenerSessionInfo_TxVersion1ListenerReportsGet(self)

    def TxVersion1ListenerDonesGet(self):
        return _byteblower.MLDMulticastListenerSessionInfo_TxVersion1ListenerDonesGet(self)

    def TxVersion2ListenerReportsGet(self):
        return _byteblower.MLDMulticastListenerSessionInfo_TxVersion2ListenerReportsGet(self)

    def GetMLDMulticastListenerSession(self):
        return _byteblower.MLDMulticastListenerSessionInfo_GetMLDMulticastListenerSession(self)

    def RefreshTimestampGet(self):
        return _byteblower.MLDMulticastListenerSessionInfo_RefreshTimestampGet(self)
MLDMulticastListenerSessionInfo_swigregister = _byteblower.MLDMulticastListenerSessionInfo_swigregister
MLDMulticastListenerSessionInfo_swigregister(MLDMulticastListenerSessionInfo)

class MLDMulticastListenerSession(SchedulableObject):
    __swig_setmethods__ = {}
    for _s in [SchedulableObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MLDMulticastListenerSession, name, value)
    __swig_getmethods__ = {}
    for _s in [SchedulableObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MLDMulticastListenerSession, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def MulticastAddressGet(self):
        return _byteblower.MLDMulticastListenerSession_MulticastAddressGet(self)

    def VersionGet(self):
        return _byteblower.MLDMulticastListenerSession_VersionGet(self)

    def SessionInfoGet(self):
        return _byteblower.MLDMulticastListenerSession_SessionInfoGet(self)

    def SessionInfoDestroy(self, inMulticastListenerSessionInfo):
        return _byteblower.MLDMulticastListenerSession_SessionInfoDestroy(self, inMulticastListenerSessionInfo)

    def GetMLDv2MulticastListenerSession(self):
        return _byteblower.MLDMulticastListenerSession_GetMLDv2MulticastListenerSession(self)

    def GetMLDProtocol(self):
        return _byteblower.MLDMulticastListenerSession_GetMLDProtocol(self)
MLDMulticastListenerSession_swigregister = _byteblower.MLDMulticastListenerSession_swigregister
MLDMulticastListenerSession_swigregister(MLDMulticastListenerSession)

class MLDProtocol(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MLDProtocol, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MLDProtocol, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ProtocolInfoGet(self):
        return _byteblower.MLDProtocol_ProtocolInfoGet(self)

    def ProtocolInfoDestroy(self, inMLDProtocolInfo):
        return _byteblower.MLDProtocol_ProtocolInfoDestroy(self, inMLDProtocolInfo)

    def SessionV1Add(self, inMulticastAddress):
        return _byteblower.MLDProtocol_SessionV1Add(self, inMulticastAddress)

    def SessionV2Add(self, inMulticastAddress):
        return _byteblower.MLDProtocol_SessionV2Add(self, inMulticastAddress)

    def SessionDestroy(self, *args):
        return _byteblower.MLDProtocol_SessionDestroy(self, *args)
MLDProtocol_swigregister = _byteblower.MLDProtocol_swigregister
MLDProtocol_swigregister(MLDProtocol)

class MLDProtocolInfo(AbstractRefreshableResult):
    __swig_setmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MLDProtocolInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MLDProtocolInfo, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def RxGet(self):
        return _byteblower.MLDProtocolInfo_RxGet(self)

    def RxListenerQueriesGet(self):
        return _byteblower.MLDProtocolInfo_RxListenerQueriesGet(self)

    def RxListenerReportsGet(self):
        return _byteblower.MLDProtocolInfo_RxListenerReportsGet(self)

    def RxVersion1ListenerQueriesGet(self):
        return _byteblower.MLDProtocolInfo_RxVersion1ListenerQueriesGet(self)

    def RxVersion1ListenerReportsGet(self):
        return _byteblower.MLDProtocolInfo_RxVersion1ListenerReportsGet(self)

    def RxVersion1ListenerDonesGet(self):
        return _byteblower.MLDProtocolInfo_RxVersion1ListenerDonesGet(self)

    def RxVersion2ListenerQueriesGet(self):
        return _byteblower.MLDProtocolInfo_RxVersion2ListenerQueriesGet(self)

    def RxVersion2ListenerReportsGet(self):
        return _byteblower.MLDProtocolInfo_RxVersion2ListenerReportsGet(self)

    def TxGet(self):
        return _byteblower.MLDProtocolInfo_TxGet(self)

    def TxListenerReportsGet(self):
        return _byteblower.MLDProtocolInfo_TxListenerReportsGet(self)

    def TxVersion1ListenerReportsGet(self):
        return _byteblower.MLDProtocolInfo_TxVersion1ListenerReportsGet(self)

    def TxVersion1ListenerDonesGet(self):
        return _byteblower.MLDProtocolInfo_TxVersion1ListenerDonesGet(self)

    def TxVersion2ListenerReportsGet(self):
        return _byteblower.MLDProtocolInfo_TxVersion2ListenerReportsGet(self)

    def GetMLDProtocol(self):
        return _byteblower.MLDProtocolInfo_GetMLDProtocol(self)

    def RefreshTimestampGet(self):
        return _byteblower.MLDProtocolInfo_RefreshTimestampGet(self)
MLDProtocolInfo_swigregister = _byteblower.MLDProtocolInfo_swigregister
MLDProtocolInfo_swigregister(MLDProtocolInfo)

class MLDv1MulticastListenerSession(MLDMulticastListenerSession):
    __swig_setmethods__ = {}
    for _s in [MLDMulticastListenerSession]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MLDv1MulticastListenerSession, name, value)
    __swig_getmethods__ = {}
    for _s in [MLDMulticastListenerSession]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MLDv1MulticastListenerSession, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ListeningStart(self):
        return _byteblower.MLDv1MulticastListenerSession_ListeningStart(self)

    def ListeningStop(self):
        return _byteblower.MLDv1MulticastListenerSession_ListeningStop(self)
MLDv1MulticastListenerSession_swigregister = _byteblower.MLDv1MulticastListenerSession_swigregister
MLDv1MulticastListenerSession_swigregister(MLDv1MulticastListenerSession)

class MLDv1StartListening(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MLDv1StartListening, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MLDv1StartListening, name)
    __repr__ = _swig_repr

    def __init__(self, arg2):
        this = _byteblower.new_MLDv1StartListening(arg2)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _byteblower.delete_MLDv1StartListening
    __del__ = lambda self: None
MLDv1StartListening_swigregister = _byteblower.MLDv1StartListening_swigregister
MLDv1StartListening_swigregister(MLDv1StartListening)

class MLDv1StopListening(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MLDv1StopListening, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MLDv1StopListening, name)
    __repr__ = _swig_repr

    def __init__(self, arg2):
        this = _byteblower.new_MLDv1StopListening(arg2)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _byteblower.delete_MLDv1StopListening
    __del__ = lambda self: None
MLDv1StopListening_swigregister = _byteblower.MLDv1StopListening_swigregister
MLDv1StopListening_swigregister(MLDv1StopListening)

class MLDv2MulticastListenerSession(MLDMulticastListenerSession):
    __swig_setmethods__ = {}
    for _s in [MLDMulticastListenerSession]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MLDv2MulticastListenerSession, name, value)
    __swig_getmethods__ = {}
    for _s in [MLDMulticastListenerSession]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MLDv2MulticastListenerSession, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def MulticastListen(self, inSourceFilter, inSourceList):
        return _byteblower.MLDv2MulticastListenerSession_MulticastListen(self, inSourceFilter, inSourceList)

    def SourceFilterModeGet(self):
        return _byteblower.MLDv2MulticastListenerSession_SourceFilterModeGet(self)

    def SourceListGet(self):
        return _byteblower.MLDv2MulticastListenerSession_SourceListGet(self)
MLDv2MulticastListenerSession_swigregister = _byteblower.MLDv2MulticastListenerSession_swigregister
MLDv2MulticastListenerSession_swigregister(MLDv2MulticastListenerSession)

class MLDv2IPMulticastListen(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MLDv2IPMulticastListen, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MLDv2IPMulticastListen, name)
    __repr__ = _swig_repr

    def __init__(self, arg2):
        this = _byteblower.new_MLDv2IPMulticastListen(arg2)
        try:
            self.this.append(this)
        except:
            self.this = this

    def SourceFilterSet(self, filter):
        return _byteblower.MLDv2IPMulticastListen_SourceFilterSet(self, filter)

    def SourceFilterGet(self):
        return _byteblower.MLDv2IPMulticastListen_SourceFilterGet(self)

    def MulticastSourcesSet(self, sourceList):
        return _byteblower.MLDv2IPMulticastListen_MulticastSourcesSet(self, sourceList)

    def MulticastSourcesGet(self):
        return _byteblower.MLDv2IPMulticastListen_MulticastSourcesGet(self)
    __swig_destroy__ = _byteblower.delete_MLDv2IPMulticastListen
    __del__ = lambda self: None
MLDv2IPMulticastListen_swigregister = _byteblower.MLDv2IPMulticastListen_swigregister
MLDv2IPMulticastListen_swigregister(MLDv2IPMulticastListen)

class TelnetClient(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TelnetClient, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TelnetClient, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def PortGet(self):
        return _byteblower.TelnetClient_PortGet(self)

    def RemoteAddressSet(self, inAddress):
        return _byteblower.TelnetClient_RemoteAddressSet(self, inAddress)

    def RemoteAddressGet(self):
        return _byteblower.TelnetClient_RemoteAddressGet(self)

    def RemotePortSet(self, inRemotePort):
        return _byteblower.TelnetClient_RemotePortSet(self, inRemotePort)

    def RemotePortGet(self):
        return _byteblower.TelnetClient_RemotePortGet(self)

    def LocalPortSet(self, inLocalPort):
        return _byteblower.TelnetClient_LocalPortSet(self, inLocalPort)

    def LocalPortGet(self):
        return _byteblower.TelnetClient_LocalPortGet(self)

    def Open(self):
        return _byteblower.TelnetClient_Open(self)

    def Send(self, inData):
        return _byteblower.TelnetClient_Send(self, inData)

    def Receive(self):
        return _byteblower.TelnetClient_Receive(self)

    def Close(self):
        return _byteblower.TelnetClient_Close(self)

    def ConnectionStateGet(self):
        return _byteblower.TelnetClient_ConnectionStateGet(self)
TelnetClient_swigregister = _byteblower.TelnetClient_swigregister
TelnetClient_swigregister(TelnetClient)

class PhysicalInterface(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PhysicalInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PhysicalInterface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetByteBlowerServer(self):
        return _byteblower.PhysicalInterface_GetByteBlowerServer(self)

    def IdGet(self):
        return _byteblower.PhysicalInterface_IdGet(self)

    def NameGet(self):
        return _byteblower.PhysicalInterface_NameGet(self)

    def TypeGet(self):
        return _byteblower.PhysicalInterface_TypeGet(self)

    def MacAddressGet(self):
        return _byteblower.PhysicalInterface_MacAddressGet(self)

    def ByteBlowerInterfaceGet(self):
        return _byteblower.PhysicalInterface_ByteBlowerInterfaceGet(self)

    def ByteBlowerInterfaceCountGet(self):
        return _byteblower.PhysicalInterface_ByteBlowerInterfaceCountGet(self)

    def LinkStatusGet(self):
        return _byteblower.PhysicalInterface_LinkStatusGet(self)

    def LinkTypeGet(self):
        return _byteblower.PhysicalInterface_LinkTypeGet(self)

    def VendorNameGet(self):
        return _byteblower.PhysicalInterface_VendorNameGet(self)

    def ProductNameGet(self):
        return _byteblower.PhysicalInterface_ProductNameGet(self)
PhysicalInterface_swigregister = _byteblower.PhysicalInterface_swigregister
PhysicalInterface_swigregister(PhysicalInterface)

class Layer2Configuration(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Layer2Configuration, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Layer2Configuration, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def PortGet(self):
        return _byteblower.Layer2Configuration_PortGet(self)

    def AddressSet(self, inLayer2Address):
        return _byteblower.Layer2Configuration_AddressSet(self, inLayer2Address)

    def AddressGet(self):
        return _byteblower.Layer2Configuration_AddressGet(self)
Layer2Configuration_swigregister = _byteblower.Layer2Configuration_swigregister
Layer2Configuration_swigregister(Layer2Configuration)


_byteblower.EthernetEncoding_SNAP_swigconstant(_byteblower)
EthernetEncoding_SNAP = _byteblower.EthernetEncoding_SNAP

_byteblower.EthernetEncoding_DIX_swigconstant(_byteblower)
EthernetEncoding_DIX = _byteblower.EthernetEncoding_DIX

def ConvertEthernetEncodingToString(inEthernetEncoding):
    return _byteblower.ConvertEthernetEncodingToString(inEthernetEncoding)
ConvertEthernetEncodingToString = _byteblower.ConvertEthernetEncodingToString

def ParseEthernetEncoding(inEthernetEncoding):
    return _byteblower.ParseEthernetEncoding(inEthernetEncoding)
ParseEthernetEncoding = _byteblower.ParseEthernetEncoding
class EthernetConfiguration(Layer2Configuration):
    __swig_setmethods__ = {}
    for _s in [Layer2Configuration]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EthernetConfiguration, name, value)
    __swig_getmethods__ = {}
    for _s in [Layer2Configuration]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EthernetConfiguration, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def AddressSet(self, inMacAddress):
        return _byteblower.EthernetConfiguration_AddressSet(self, inMacAddress)

    def AddressGet(self):
        return _byteblower.EthernetConfiguration_AddressGet(self)

    def TypeGet(self):
        return _byteblower.EthernetConfiguration_TypeGet(self)

    def TypeSet(self, inEthernetEncoding):
        return _byteblower.EthernetConfiguration_TypeSet(self, inEthernetEncoding)

    def MacSet(self, inMacAddress):
        return _byteblower.EthernetConfiguration_MacSet(self, inMacAddress)

    def MacGet(self):
        return _byteblower.EthernetConfiguration_MacGet(self)
    __swig_getmethods__["IsValidMacAddress"] = lambda x: _byteblower.EthernetConfiguration_IsValidMacAddress
    if _newclass:
        IsValidMacAddress = staticmethod(_byteblower.EthernetConfiguration_IsValidMacAddress)
EthernetConfiguration_swigregister = _byteblower.EthernetConfiguration_swigregister
EthernetConfiguration_swigregister(EthernetConfiguration)

def EthernetConfiguration_IsValidMacAddress(inMacAddress):
    return _byteblower.EthernetConfiguration_IsValidMacAddress(inMacAddress)
EthernetConfiguration_IsValidMacAddress = _byteblower.EthernetConfiguration_IsValidMacAddress

class VLANTag(Layer25Configuration):
    __swig_setmethods__ = {}
    for _s in [Layer25Configuration]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VLANTag, name, value)
    __swig_getmethods__ = {}
    for _s in [Layer25Configuration]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VLANTag, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ProtocolIDGet(self):
        return _byteblower.VLANTag_ProtocolIDGet(self)

    def IDSet(self, inId):
        return _byteblower.VLANTag_IDSet(self, inId)

    def IDGet(self):
        return _byteblower.VLANTag_IDGet(self)

    def PrioritySet(self, inPriority):
        return _byteblower.VLANTag_PrioritySet(self, inPriority)

    def PriorityGet(self):
        return _byteblower.VLANTag_PriorityGet(self)

    def DropEligibleSet(self, value):
        return _byteblower.VLANTag_DropEligibleSet(self, value)

    def DropEligibleGet(self):
        return _byteblower.VLANTag_DropEligibleGet(self)
VLANTag_swigregister = _byteblower.VLANTag_swigregister
VLANTag_swigregister(VLANTag)

class PPPAuthProtocol(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PPPAuthProtocol, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PPPAuthProtocol, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _byteblower.delete_PPPAuthProtocol
    __del__ = lambda self: None
PPPAuthProtocol_swigregister = _byteblower.PPPAuthProtocol_swigregister
PPPAuthProtocol_swigregister(PPPAuthProtocol)

class PAPProtocol(PPPAuthProtocol):
    __swig_setmethods__ = {}
    for _s in [PPPAuthProtocol]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PAPProtocol, name, value)
    __swig_getmethods__ = {}
    for _s in [PPPAuthProtocol]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PAPProtocol, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetPPPProtocol(self, *args):
        return _byteblower.PAPProtocol_GetPPPProtocol(self, *args)

    def PeerIDGet(self):
        return _byteblower.PAPProtocol_PeerIDGet(self)

    def PeerIDSet(self, inUserId):
        return _byteblower.PAPProtocol_PeerIDSet(self, inUserId)

    def PasswordGet(self):
        return _byteblower.PAPProtocol_PasswordGet(self)

    def PasswordSet(self, inPassword):
        return _byteblower.PAPProtocol_PasswordSet(self, inPassword)
PAPProtocol_swigregister = _byteblower.PAPProtocol_swigregister
PAPProtocol_swigregister(PAPProtocol)

class CHAPProtocol(PPPAuthProtocol):
    __swig_setmethods__ = {}
    for _s in [PPPAuthProtocol]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHAPProtocol, name, value)
    __swig_getmethods__ = {}
    for _s in [PPPAuthProtocol]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CHAPProtocol, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetPPPProtocol(self, *args):
        return _byteblower.CHAPProtocol_GetPPPProtocol(self, *args)

    def SecretSet(self, secret):
        return _byteblower.CHAPProtocol_SecretSet(self, secret)

    def SecretGet(self):
        return _byteblower.CHAPProtocol_SecretGet(self)
CHAPProtocol_swigregister = _byteblower.CHAPProtocol_swigregister
CHAPProtocol_swigregister(CHAPProtocol)

class PPPNetworkControlProtocol(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PPPNetworkControlProtocol, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PPPNetworkControlProtocol, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _byteblower.delete_PPPNetworkControlProtocol
    __del__ = lambda self: None
PPPNetworkControlProtocol_swigregister = _byteblower.PPPNetworkControlProtocol_swigregister
PPPNetworkControlProtocol_swigregister(PPPNetworkControlProtocol)

class IPv4CPProtocol(PPPNetworkControlProtocol):
    __swig_setmethods__ = {}
    for _s in [PPPNetworkControlProtocol]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPv4CPProtocol, name, value)
    __swig_getmethods__ = {}
    for _s in [PPPNetworkControlProtocol]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPv4CPProtocol, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def IpAddressGet(self):
        return _byteblower.IPv4CPProtocol_IpAddressGet(self)

    def IpAddressSet(self, inIPAddress):
        return _byteblower.IPv4CPProtocol_IpAddressSet(self, inIPAddress)

    def IpAddressRemoteGet(self):
        return _byteblower.IPv4CPProtocol_IpAddressRemoteGet(self)

    def IpAddressPeerProvided(self):
        return _byteblower.IPv4CPProtocol_IpAddressPeerProvided(self)

    def Open(self):
        return _byteblower.IPv4CPProtocol_Open(self)

    def Close(self):
        return _byteblower.IPv4CPProtocol_Close(self)
IPv4CPProtocol_swigregister = _byteblower.IPv4CPProtocol_swigregister
IPv4CPProtocol_swigregister(IPv4CPProtocol)

class IPv6CPProtocol(PPPNetworkControlProtocol):
    __swig_setmethods__ = {}
    for _s in [PPPNetworkControlProtocol]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPv6CPProtocol, name, value)
    __swig_getmethods__ = {}
    for _s in [PPPNetworkControlProtocol]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPv6CPProtocol, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def InterfaceIdentifierGet(self):
        return _byteblower.IPv6CPProtocol_InterfaceIdentifierGet(self)

    def InterfaceIdentifierRemoteGet(self):
        return _byteblower.IPv6CPProtocol_InterfaceIdentifierRemoteGet(self)

    def Open(self):
        return _byteblower.IPv6CPProtocol_Open(self)

    def Close(self):
        return _byteblower.IPv6CPProtocol_Close(self)
IPv6CPProtocol_swigregister = _byteblower.IPv6CPProtocol_swigregister
IPv6CPProtocol_swigregister(IPv6CPProtocol)

class PPPProtocol(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PPPProtocol, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PPPProtocol, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def PortGet(self, *args):
        return _byteblower.PPPProtocol_PortGet(self, *args)

    def AuthProtocolPapAdd(self):
        return _byteblower.PPPProtocol_AuthProtocolPapAdd(self)

    def AuthProtocolPapGet(self):
        return _byteblower.PPPProtocol_AuthProtocolPapGet(self)

    def AuthProtocolChapAdd(self):
        return _byteblower.PPPProtocol_AuthProtocolChapAdd(self)

    def AuthProtocolChapGet(self):
        return _byteblower.PPPProtocol_AuthProtocolChapGet(self)

    def NcpIpcpAdd(self):
        return _byteblower.PPPProtocol_NcpIpcpAdd(self)

    def NcpIpcpGet(self):
        return _byteblower.PPPProtocol_NcpIpcpGet(self)

    def NcpIpv6cpAdd(self):
        return _byteblower.PPPProtocol_NcpIpv6cpAdd(self)

    def NcpIpv6cpGet(self):
        return _byteblower.PPPProtocol_NcpIpv6cpGet(self)
PPPProtocol_swigregister = _byteblower.PPPProtocol_swigregister
PPPProtocol_swigregister(PPPProtocol)


_byteblower.PPPoEStatus_Initial_swigconstant(_byteblower)
PPPoEStatus_Initial = _byteblower.PPPoEStatus_Initial

_byteblower.PPPoEStatus_Discovering_swigconstant(_byteblower)
PPPoEStatus_Discovering = _byteblower.PPPoEStatus_Discovering

_byteblower.PPPoEStatus_Requesting_swigconstant(_byteblower)
PPPoEStatus_Requesting = _byteblower.PPPoEStatus_Requesting

_byteblower.PPPoEStatus_SessionActive_swigconstant(_byteblower)
PPPoEStatus_SessionActive = _byteblower.PPPoEStatus_SessionActive

_byteblower.PPPoEStatus_Terminated_swigconstant(_byteblower)
PPPoEStatus_Terminated = _byteblower.PPPoEStatus_Terminated

def ConvertPPPoEStatusToString(inPPPoEStatus):
    return _byteblower.ConvertPPPoEStatusToString(inPPPoEStatus)
ConvertPPPoEStatusToString = _byteblower.ConvertPPPoEStatusToString
class PPPoEClient(Layer25Configuration):
    __swig_setmethods__ = {}
    for _s in [Layer25Configuration]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PPPoEClient, name, value)
    __swig_getmethods__ = {}
    for _s in [Layer25Configuration]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PPPoEClient, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def PppGet(self):
        return _byteblower.PPPoEClient_PppGet(self)

    def ServiceNameSet(self, inServiceName):
        return _byteblower.PPPoEClient_ServiceNameSet(self, inServiceName)

    def ServiceNameGet(self):
        return _byteblower.PPPoEClient_ServiceNameGet(self)

    def SessionIdGet(self):
        return _byteblower.PPPoEClient_SessionIdGet(self)

    def Start(self):
        return _byteblower.PPPoEClient_Start(self)

    def StartAsync(self):
        return _byteblower.PPPoEClient_StartAsync(self)

    def Terminate(self):
        return _byteblower.PPPoEClient_Terminate(self)

    def StatusGet(self):
        return _byteblower.PPPoEClient_StatusGet(self)

    def ServerGet(self):
        return _byteblower.PPPoEClient_ServerGet(self)
PPPoEClient_swigregister = _byteblower.PPPoEClient_swigregister
PPPoEClient_swigregister(PPPoEClient)

class PAPProtocolList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PAPProtocolList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PAPProtocolList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.PAPProtocolList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.PAPProtocolList___nonzero__(self)

    def __bool__(self):
        return _byteblower.PAPProtocolList___bool__(self)

    def __len__(self):
        return _byteblower.PAPProtocolList___len__(self)

    def pop(self):
        return _byteblower.PAPProtocolList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.PAPProtocolList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.PAPProtocolList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.PAPProtocolList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.PAPProtocolList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.PAPProtocolList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.PAPProtocolList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.PAPProtocolList_append(self, x)

    def empty(self):
        return _byteblower.PAPProtocolList_empty(self)

    def size(self):
        return _byteblower.PAPProtocolList_size(self)

    def clear(self):
        return _byteblower.PAPProtocolList_clear(self)

    def swap(self, v):
        return _byteblower.PAPProtocolList_swap(self, v)

    def get_allocator(self):
        return _byteblower.PAPProtocolList_get_allocator(self)

    def begin(self):
        return _byteblower.PAPProtocolList_begin(self)

    def end(self):
        return _byteblower.PAPProtocolList_end(self)

    def rbegin(self):
        return _byteblower.PAPProtocolList_rbegin(self)

    def rend(self):
        return _byteblower.PAPProtocolList_rend(self)

    def pop_back(self):
        return _byteblower.PAPProtocolList_pop_back(self)

    def erase(self, *args):
        return _byteblower.PAPProtocolList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_PAPProtocolList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.PAPProtocolList_push_back(self, x)

    def front(self):
        return _byteblower.PAPProtocolList_front(self)

    def back(self):
        return _byteblower.PAPProtocolList_back(self)

    def assign(self, n, x):
        return _byteblower.PAPProtocolList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.PAPProtocolList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.PAPProtocolList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.PAPProtocolList_reserve(self, n)

    def capacity(self):
        return _byteblower.PAPProtocolList_capacity(self)
    __swig_destroy__ = _byteblower.delete_PAPProtocolList
    __del__ = lambda self: None
PAPProtocolList_swigregister = _byteblower.PAPProtocolList_swigregister
PAPProtocolList_swigregister(PAPProtocolList)

class CHAPProtocolList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHAPProtocolList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHAPProtocolList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.CHAPProtocolList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.CHAPProtocolList___nonzero__(self)

    def __bool__(self):
        return _byteblower.CHAPProtocolList___bool__(self)

    def __len__(self):
        return _byteblower.CHAPProtocolList___len__(self)

    def pop(self):
        return _byteblower.CHAPProtocolList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.CHAPProtocolList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.CHAPProtocolList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.CHAPProtocolList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.CHAPProtocolList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.CHAPProtocolList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.CHAPProtocolList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.CHAPProtocolList_append(self, x)

    def empty(self):
        return _byteblower.CHAPProtocolList_empty(self)

    def size(self):
        return _byteblower.CHAPProtocolList_size(self)

    def clear(self):
        return _byteblower.CHAPProtocolList_clear(self)

    def swap(self, v):
        return _byteblower.CHAPProtocolList_swap(self, v)

    def get_allocator(self):
        return _byteblower.CHAPProtocolList_get_allocator(self)

    def begin(self):
        return _byteblower.CHAPProtocolList_begin(self)

    def end(self):
        return _byteblower.CHAPProtocolList_end(self)

    def rbegin(self):
        return _byteblower.CHAPProtocolList_rbegin(self)

    def rend(self):
        return _byteblower.CHAPProtocolList_rend(self)

    def pop_back(self):
        return _byteblower.CHAPProtocolList_pop_back(self)

    def erase(self, *args):
        return _byteblower.CHAPProtocolList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_CHAPProtocolList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.CHAPProtocolList_push_back(self, x)

    def front(self):
        return _byteblower.CHAPProtocolList_front(self)

    def back(self):
        return _byteblower.CHAPProtocolList_back(self)

    def assign(self, n, x):
        return _byteblower.CHAPProtocolList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.CHAPProtocolList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.CHAPProtocolList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.CHAPProtocolList_reserve(self, n)

    def capacity(self):
        return _byteblower.CHAPProtocolList_capacity(self)
    __swig_destroy__ = _byteblower.delete_CHAPProtocolList
    __del__ = lambda self: None
CHAPProtocolList_swigregister = _byteblower.CHAPProtocolList_swigregister
CHAPProtocolList_swigregister(CHAPProtocolList)

class IPCPProtocolList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPCPProtocolList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPCPProtocolList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.IPCPProtocolList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.IPCPProtocolList___nonzero__(self)

    def __bool__(self):
        return _byteblower.IPCPProtocolList___bool__(self)

    def __len__(self):
        return _byteblower.IPCPProtocolList___len__(self)

    def pop(self):
        return _byteblower.IPCPProtocolList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.IPCPProtocolList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.IPCPProtocolList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.IPCPProtocolList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.IPCPProtocolList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.IPCPProtocolList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.IPCPProtocolList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.IPCPProtocolList_append(self, x)

    def empty(self):
        return _byteblower.IPCPProtocolList_empty(self)

    def size(self):
        return _byteblower.IPCPProtocolList_size(self)

    def clear(self):
        return _byteblower.IPCPProtocolList_clear(self)

    def swap(self, v):
        return _byteblower.IPCPProtocolList_swap(self, v)

    def get_allocator(self):
        return _byteblower.IPCPProtocolList_get_allocator(self)

    def begin(self):
        return _byteblower.IPCPProtocolList_begin(self)

    def end(self):
        return _byteblower.IPCPProtocolList_end(self)

    def rbegin(self):
        return _byteblower.IPCPProtocolList_rbegin(self)

    def rend(self):
        return _byteblower.IPCPProtocolList_rend(self)

    def pop_back(self):
        return _byteblower.IPCPProtocolList_pop_back(self)

    def erase(self, *args):
        return _byteblower.IPCPProtocolList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_IPCPProtocolList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.IPCPProtocolList_push_back(self, x)

    def front(self):
        return _byteblower.IPCPProtocolList_front(self)

    def back(self):
        return _byteblower.IPCPProtocolList_back(self)

    def assign(self, n, x):
        return _byteblower.IPCPProtocolList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.IPCPProtocolList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.IPCPProtocolList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.IPCPProtocolList_reserve(self, n)

    def capacity(self):
        return _byteblower.IPCPProtocolList_capacity(self)
    __swig_destroy__ = _byteblower.delete_IPCPProtocolList
    __del__ = lambda self: None
IPCPProtocolList_swigregister = _byteblower.IPCPProtocolList_swigregister
IPCPProtocolList_swigregister(IPCPProtocolList)

class IPv6CPProtocolList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPv6CPProtocolList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPv6CPProtocolList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.IPv6CPProtocolList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.IPv6CPProtocolList___nonzero__(self)

    def __bool__(self):
        return _byteblower.IPv6CPProtocolList___bool__(self)

    def __len__(self):
        return _byteblower.IPv6CPProtocolList___len__(self)

    def pop(self):
        return _byteblower.IPv6CPProtocolList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.IPv6CPProtocolList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.IPv6CPProtocolList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.IPv6CPProtocolList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.IPv6CPProtocolList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.IPv6CPProtocolList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.IPv6CPProtocolList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.IPv6CPProtocolList_append(self, x)

    def empty(self):
        return _byteblower.IPv6CPProtocolList_empty(self)

    def size(self):
        return _byteblower.IPv6CPProtocolList_size(self)

    def clear(self):
        return _byteblower.IPv6CPProtocolList_clear(self)

    def swap(self, v):
        return _byteblower.IPv6CPProtocolList_swap(self, v)

    def get_allocator(self):
        return _byteblower.IPv6CPProtocolList_get_allocator(self)

    def begin(self):
        return _byteblower.IPv6CPProtocolList_begin(self)

    def end(self):
        return _byteblower.IPv6CPProtocolList_end(self)

    def rbegin(self):
        return _byteblower.IPv6CPProtocolList_rbegin(self)

    def rend(self):
        return _byteblower.IPv6CPProtocolList_rend(self)

    def pop_back(self):
        return _byteblower.IPv6CPProtocolList_pop_back(self)

    def erase(self, *args):
        return _byteblower.IPv6CPProtocolList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_IPv6CPProtocolList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.IPv6CPProtocolList_push_back(self, x)

    def front(self):
        return _byteblower.IPv6CPProtocolList_front(self)

    def back(self):
        return _byteblower.IPv6CPProtocolList_back(self)

    def assign(self, n, x):
        return _byteblower.IPv6CPProtocolList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.IPv6CPProtocolList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.IPv6CPProtocolList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.IPv6CPProtocolList_reserve(self, n)

    def capacity(self):
        return _byteblower.IPv6CPProtocolList_capacity(self)
    __swig_destroy__ = _byteblower.delete_IPv6CPProtocolList
    __del__ = lambda self: None
IPv6CPProtocolList_swigregister = _byteblower.IPv6CPProtocolList_swigregister
IPv6CPProtocolList_swigregister(IPv6CPProtocolList)

class Layer3Configuration(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Layer3Configuration, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Layer3Configuration, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def PortGet(self):
        return _byteblower.Layer3Configuration_PortGet(self)
    __swig_getmethods__["IsValidLayer3Address"] = lambda x: _byteblower.Layer3Configuration_IsValidLayer3Address
    if _newclass:
        IsValidLayer3Address = staticmethod(_byteblower.Layer3Configuration_IsValidLayer3Address)
Layer3Configuration_swigregister = _byteblower.Layer3Configuration_swigregister
Layer3Configuration_swigregister(Layer3Configuration)

def Layer3Configuration_IsValidLayer3Address(inAddress):
    return _byteblower.Layer3Configuration_IsValidLayer3Address(inAddress)
Layer3Configuration_IsValidLayer3Address = _byteblower.Layer3Configuration_IsValidLayer3Address

class IPv4Configuration(Layer3Configuration):
    __swig_setmethods__ = {}
    for _s in [Layer3Configuration]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPv4Configuration, name, value)
    __swig_getmethods__ = {}
    for _s in [Layer3Configuration]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPv4Configuration, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ServerGet(self):
        return _byteblower.IPv4Configuration_ServerGet(self)

    def GetByteBlowerPort(self):
        return _byteblower.IPv4Configuration_GetByteBlowerPort(self)

    def IpSet(self, inIPv4Address):
        return _byteblower.IPv4Configuration_IpSet(self, inIPv4Address)

    def IpGet(self):
        return _byteblower.IPv4Configuration_IpGet(self)

    def GatewaySet(self, inGateway):
        return _byteblower.IPv4Configuration_GatewaySet(self, inGateway)

    def GatewayGet(self):
        return _byteblower.IPv4Configuration_GatewayGet(self)

    def NetmaskSet(self, inNetMask):
        return _byteblower.IPv4Configuration_NetmaskSet(self, inNetMask)

    def NetmaskGet(self):
        return _byteblower.IPv4Configuration_NetmaskGet(self)

    def ProtocolArp(self, inIPAddress):
        return _byteblower.IPv4Configuration_ProtocolArp(self, inIPAddress)

    def ProtocolArpAsync(self, inIPAddress):
        return _byteblower.IPv4Configuration_ProtocolArpAsync(self, inIPAddress)

    def ProtocolGratuitousArpRequest(self):
        return _byteblower.IPv4Configuration_ProtocolGratuitousArpRequest(self)

    def ProtocolGratuitousArpReply(self):
        return _byteblower.IPv4Configuration_ProtocolGratuitousArpReply(self)

    def Resolve(self, inIPAddress):
        return _byteblower.IPv4Configuration_Resolve(self, inIPAddress)

    def ResolveAsync(self, inIPAddress):
        return _byteblower.IPv4Configuration_ResolveAsync(self, inIPAddress)

    def ProtocolIcmpGet(self):
        return _byteblower.IPv4Configuration_ProtocolIcmpGet(self)

    def ProtocolDhcpGet(self):
        return _byteblower.IPv4Configuration_ProtocolDhcpGet(self)

    def ProtocolIgmpGet(self):
        return _byteblower.IPv4Configuration_ProtocolIgmpGet(self)
    __swig_getmethods__["IsValidLayer3Address"] = lambda x: _byteblower.IPv4Configuration_IsValidLayer3Address
    if _newclass:
        IsValidLayer3Address = staticmethod(_byteblower.IPv4Configuration_IsValidLayer3Address)
IPv4Configuration_swigregister = _byteblower.IPv4Configuration_swigregister
IPv4Configuration_swigregister(IPv4Configuration)

def IPv4Configuration_IsValidLayer3Address(inAddress):
    return _byteblower.IPv4Configuration_IsValidLayer3Address(inAddress)
IPv4Configuration_IsValidLayer3Address = _byteblower.IPv4Configuration_IsValidLayer3Address

class IPv6Configuration(Layer3Configuration):
    __swig_setmethods__ = {}
    for _s in [Layer3Configuration]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPv6Configuration, name, value)
    __swig_getmethods__ = {}
    for _s in [Layer3Configuration]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPv6Configuration, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def IpManualAdd(self, inIPv6Address):
        return _byteblower.IPv6Configuration_IpManualAdd(self, inIPv6Address)

    def IpManualRemove(self, inIPv6Address):
        return _byteblower.IPv6Configuration_IpManualRemove(self, inIPv6Address)

    def IpManualClear(self):
        return _byteblower.IPv6Configuration_IpManualClear(self)

    def IpManualGet(self):
        return _byteblower.IPv6Configuration_IpManualGet(self)

    def IpStatelessGet(self):
        return _byteblower.IPv6Configuration_IpStatelessGet(self)

    def IpDhcpGet(self):
        return _byteblower.IPv6Configuration_IpDhcpGet(self)

    def GatewaySet(self, inGateway):
        return _byteblower.IPv6Configuration_GatewaySet(self, inGateway)

    def GatewayGet(self):
        return _byteblower.IPv6Configuration_GatewayGet(self)

    def GatewayAdvertisedGet(self):
        return _byteblower.IPv6Configuration_GatewayAdvertisedGet(self)

    def IpLinkLocalGet(self):
        return _byteblower.IPv6Configuration_IpLinkLocalGet(self)

    def StatelessAutoconfiguration(self):
        return _byteblower.IPv6Configuration_StatelessAutoconfiguration(self)

    def StatelessAutoconfigurationAsync(self):
        return _byteblower.IPv6Configuration_StatelessAutoconfigurationAsync(self)

    def NeighborDiscovery(self, inIPv6Address):
        return _byteblower.IPv6Configuration_NeighborDiscovery(self, inIPv6Address)

    def Resolve(self, inIPv6Address):
        return _byteblower.IPv6Configuration_Resolve(self, inIPv6Address)

    def ProtocolIcmpGet(self):
        return _byteblower.IPv6Configuration_ProtocolIcmpGet(self)

    def ProtocolDhcpGet(self):
        return _byteblower.IPv6Configuration_ProtocolDhcpGet(self)

    def ProtocolMldGet(self):
        return _byteblower.IPv6Configuration_ProtocolMldGet(self)
    __swig_getmethods__["IsValidLayer3Address"] = lambda x: _byteblower.IPv6Configuration_IsValidLayer3Address
    if _newclass:
        IsValidLayer3Address = staticmethod(_byteblower.IPv6Configuration_IsValidLayer3Address)
IPv6Configuration_swigregister = _byteblower.IPv6Configuration_swigregister
IPv6Configuration_swigregister(IPv6Configuration)

def IPv6Configuration_IsValidLayer3Address(inAddress):
    return _byteblower.IPv6Configuration_IsValidLayer3Address(inAddress)
IPv6Configuration_IsValidLayer3Address = _byteblower.IPv6Configuration_IsValidLayer3Address


_byteblower.ModifierType_GrowingSize_swigconstant(_byteblower)
ModifierType_GrowingSize = _byteblower.ModifierType_GrowingSize

_byteblower.ModifierType_RandomSize_swigconstant(_byteblower)
ModifierType_RandomSize = _byteblower.ModifierType_RandomSize

_byteblower.ModifierType_MultiBurst_swigconstant(_byteblower)
ModifierType_MultiBurst = _byteblower.ModifierType_MultiBurst

_byteblower.ModifierType_NormalDistributionTiming_swigconstant(_byteblower)
ModifierType_NormalDistributionTiming = _byteblower.ModifierType_NormalDistributionTiming
class AbstractModifier(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractModifier, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractModifier, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetByteBlowerStream(self):
        return _byteblower.AbstractModifier_GetByteBlowerStream(self)

    def GetModifierType(self):
        return _byteblower.AbstractModifier_GetModifierType(self)
AbstractModifier_swigregister = _byteblower.AbstractModifier_swigregister
AbstractModifier_swigregister(AbstractModifier)

class StreamGrowingSizeModifier(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamGrowingSizeModifier, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamGrowingSizeModifier, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def MaximumGet(self):
        return _byteblower.StreamGrowingSizeModifier_MaximumGet(self)

    def MaximumSet(self, inMaxSize):
        return _byteblower.StreamGrowingSizeModifier_MaximumSet(self, inMaxSize)

    def MinimumGet(self):
        return _byteblower.StreamGrowingSizeModifier_MinimumGet(self)

    def MinimumSet(self, inMinSize):
        return _byteblower.StreamGrowingSizeModifier_MinimumSet(self, inMinSize)

    def StepGet(self):
        return _byteblower.StreamGrowingSizeModifier_StepGet(self)

    def StepSet(self, inStep):
        return _byteblower.StreamGrowingSizeModifier_StepSet(self, inStep)

    def IterationGet(self):
        return _byteblower.StreamGrowingSizeModifier_IterationGet(self)

    def IterationSet(self, inIteration):
        return _byteblower.StreamGrowingSizeModifier_IterationSet(self, inIteration)

    def ReCommitValues(self, inFrame):
        return _byteblower.StreamGrowingSizeModifier_ReCommitValues(self, inFrame)
StreamGrowingSizeModifier_swigregister = _byteblower.StreamGrowingSizeModifier_swigregister
StreamGrowingSizeModifier_swigregister(StreamGrowingSizeModifier)

class MultipleBurstModifier(AbstractModifier):
    __swig_setmethods__ = {}
    for _s in [AbstractModifier]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultipleBurstModifier, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractModifier]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultipleBurstModifier, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def InterBurstGapGet(self):
        return _byteblower.MultipleBurstModifier_InterBurstGapGet(self)

    def InterBurstGapSet(self, inInterBurstGap):
        return _byteblower.MultipleBurstModifier_InterBurstGapSet(self, inInterBurstGap)

    def BurstSizeGet(self):
        return _byteblower.MultipleBurstModifier_BurstSizeGet(self)

    def BurstSizeSet(self, inBurstSize):
        return _byteblower.MultipleBurstModifier_BurstSizeSet(self, inBurstSize)
MultipleBurstModifier_swigregister = _byteblower.MultipleBurstModifier_swigregister
MultipleBurstModifier_swigregister(MultipleBurstModifier)

class NormalDistributionTimingModifier(AbstractModifier):
    __swig_setmethods__ = {}
    for _s in [AbstractModifier]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NormalDistributionTimingModifier, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractModifier]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NormalDistributionTimingModifier, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def VarianceSet(self, inVariance):
        return _byteblower.NormalDistributionTimingModifier_VarianceSet(self, inVariance)

    def VarianceGet(self):
        return _byteblower.NormalDistributionTimingModifier_VarianceGet(self)
NormalDistributionTimingModifier_swigregister = _byteblower.NormalDistributionTimingModifier_swigregister
NormalDistributionTimingModifier_swigregister(NormalDistributionTimingModifier)

class StreamRandomSizeModifier(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamRandomSizeModifier, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamRandomSizeModifier, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def MinimumSet(self, inMinimum):
        return _byteblower.StreamRandomSizeModifier_MinimumSet(self, inMinimum)

    def MinimumGet(self):
        return _byteblower.StreamRandomSizeModifier_MinimumGet(self)

    def MaximumSet(self, inMaximum):
        return _byteblower.StreamRandomSizeModifier_MaximumSet(self, inMaximum)

    def MaximumGet(self):
        return _byteblower.StreamRandomSizeModifier_MaximumGet(self)

    def ReCommitValues(self, inFrame):
        return _byteblower.StreamRandomSizeModifier_ReCommitValues(self, inFrame)
StreamRandomSizeModifier_swigregister = _byteblower.StreamRandomSizeModifier_swigregister
StreamRandomSizeModifier_swigregister(StreamRandomSizeModifier)

class FrameFieldModifier(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameFieldModifier, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FrameFieldModifier, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def FrameGet(self):
        return _byteblower.FrameFieldModifier_FrameGet(self)

    def OffsetGet(self):
        return _byteblower.FrameFieldModifier_OffsetGet(self)

    def OffsetSet(self, inOffset):
        return _byteblower.FrameFieldModifier_OffsetSet(self, inOffset)

    def LengthGet(self):
        return _byteblower.FrameFieldModifier_LengthGet(self)

    def LengthSet(self, inLength):
        return _byteblower.FrameFieldModifier_LengthSet(self, inLength)
FrameFieldModifier_swigregister = _byteblower.FrameFieldModifier_swigregister
FrameFieldModifier_swigregister(FrameFieldModifier)

class FrameFieldModifierIncremental(FrameFieldModifier):
    __swig_setmethods__ = {}
    for _s in [FrameFieldModifier]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameFieldModifierIncremental, name, value)
    __swig_getmethods__ = {}
    for _s in [FrameFieldModifier]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FrameFieldModifierIncremental, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def OffsetGet(self):
        return _byteblower.FrameFieldModifierIncremental_OffsetGet(self)

    def OffsetSet(self, inOffset):
        return _byteblower.FrameFieldModifierIncremental_OffsetSet(self, inOffset)

    def LengthGet(self):
        return _byteblower.FrameFieldModifierIncremental_LengthGet(self)

    def LengthSet(self, inLength):
        return _byteblower.FrameFieldModifierIncremental_LengthSet(self, inLength)

    def InitialValueGet(self):
        return _byteblower.FrameFieldModifierIncremental_InitialValueGet(self)

    def InitialValueSet(self, inInitialValue):
        return _byteblower.FrameFieldModifierIncremental_InitialValueSet(self, inInitialValue)

    def MinimumGet(self):
        return _byteblower.FrameFieldModifierIncremental_MinimumGet(self)

    def MinimumSet(self, inMinValue):
        return _byteblower.FrameFieldModifierIncremental_MinimumSet(self, inMinValue)

    def MaximumGet(self):
        return _byteblower.FrameFieldModifierIncremental_MaximumGet(self)

    def MaximumSet(self, inMaxValue):
        return _byteblower.FrameFieldModifierIncremental_MaximumSet(self, inMaxValue)

    def StepGet(self):
        return _byteblower.FrameFieldModifierIncremental_StepGet(self)

    def StepSet(self, inStep):
        return _byteblower.FrameFieldModifierIncremental_StepSet(self, inStep)
FrameFieldModifierIncremental_swigregister = _byteblower.FrameFieldModifierIncremental_swigregister
FrameFieldModifierIncremental_swigregister(FrameFieldModifierIncremental)

class FrameFieldModifierRandom(FrameFieldModifier):
    __swig_setmethods__ = {}
    for _s in [FrameFieldModifier]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameFieldModifierRandom, name, value)
    __swig_getmethods__ = {}
    for _s in [FrameFieldModifier]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FrameFieldModifierRandom, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def OffsetGet(self):
        return _byteblower.FrameFieldModifierRandom_OffsetGet(self)

    def OffsetSet(self, inOffset):
        return _byteblower.FrameFieldModifierRandom_OffsetSet(self, inOffset)

    def LengthGet(self):
        return _byteblower.FrameFieldModifierRandom_LengthGet(self)

    def LengthSet(self, inLength):
        return _byteblower.FrameFieldModifierRandom_LengthSet(self, inLength)

    def MinimumGet(self):
        return _byteblower.FrameFieldModifierRandom_MinimumGet(self)

    def MinimumSet(self, inMinValue):
        return _byteblower.FrameFieldModifierRandom_MinimumSet(self, inMinValue)

    def MaximumGet(self):
        return _byteblower.FrameFieldModifierRandom_MaximumGet(self)

    def MaximumSet(self, inMaxValue):
        return _byteblower.FrameFieldModifierRandom_MaximumSet(self, inMaxValue)
FrameFieldModifierRandom_swigregister = _byteblower.FrameFieldModifierRandom_swigregister
FrameFieldModifierRandom_swigregister(FrameFieldModifierRandom)

class FrameSizeModifierResultSnapshot(AbstractRefreshableResult):
    __swig_setmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameSizeModifierResultSnapshot, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FrameSizeModifierResultSnapshot, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def TimestampGet(self):
        return _byteblower.FrameSizeModifierResultSnapshot_TimestampGet(self)

    def TimestampFirstGet(self):
        return _byteblower.FrameSizeModifierResultSnapshot_TimestampFirstGet(self)

    def TimestampLastGet(self):
        return _byteblower.FrameSizeModifierResultSnapshot_TimestampLastGet(self)

    def ByteCountGet(self):
        return _byteblower.FrameSizeModifierResultSnapshot_ByteCountGet(self)

    def FramesizeMaximumGet(self):
        return _byteblower.FrameSizeModifierResultSnapshot_FramesizeMaximumGet(self)

    def FramesizeMinimumGet(self):
        return _byteblower.FrameSizeModifierResultSnapshot_FramesizeMinimumGet(self)

    def PacketCountGet(self, *args):
        return _byteblower.FrameSizeModifierResultSnapshot_PacketCountGet(self, *args)

    def PacketCountBelowMinimumGet(self):
        return _byteblower.FrameSizeModifierResultSnapshot_PacketCountBelowMinimumGet(self)

    def PacketCountAboveMaximumGet(self):
        return _byteblower.FrameSizeModifierResultSnapshot_PacketCountAboveMaximumGet(self)

    def IntervalDurationGet(self):
        return _byteblower.FrameSizeModifierResultSnapshot_IntervalDurationGet(self)

    def RefreshTimestampGet(self):
        return _byteblower.FrameSizeModifierResultSnapshot_RefreshTimestampGet(self)
FrameSizeModifierResultSnapshot_swigregister = _byteblower.FrameSizeModifierResultSnapshot_swigregister
FrameSizeModifierResultSnapshot_swigregister(FrameSizeModifierResultSnapshot)

class FrameSizeModifier(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameSizeModifier, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FrameSizeModifier, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    DEFAULT_MIN_SIZE = _byteblower.FrameSizeModifier_DEFAULT_MIN_SIZE
    DEFAULT_MAX_SIZE = _byteblower.FrameSizeModifier_DEFAULT_MAX_SIZE

    def ResultGet(self):
        return _byteblower.FrameSizeModifier_ResultGet(self)

    def FrameGet(self):
        return _byteblower.FrameSizeModifier_FrameGet(self)
FrameSizeModifier_swigregister = _byteblower.FrameSizeModifier_swigregister
FrameSizeModifier_swigregister(FrameSizeModifier)

class FrameSizeModifierGrowing(FrameSizeModifier):
    __swig_setmethods__ = {}
    for _s in [FrameSizeModifier]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameSizeModifierGrowing, name, value)
    __swig_getmethods__ = {}
    for _s in [FrameSizeModifier]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FrameSizeModifierGrowing, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    DEFAULT_ITERATION = _byteblower.FrameSizeModifierGrowing_DEFAULT_ITERATION
    DEFAULT_STEP_SIZE = _byteblower.FrameSizeModifierGrowing_DEFAULT_STEP_SIZE

    def MaximumGet(self):
        return _byteblower.FrameSizeModifierGrowing_MaximumGet(self)

    def MaximumSet(self, inMaxSize):
        return _byteblower.FrameSizeModifierGrowing_MaximumSet(self, inMaxSize)

    def MinimumGet(self):
        return _byteblower.FrameSizeModifierGrowing_MinimumGet(self)

    def MinimumSet(self, inMinSize):
        return _byteblower.FrameSizeModifierGrowing_MinimumSet(self, inMinSize)

    def StepGet(self):
        return _byteblower.FrameSizeModifierGrowing_StepGet(self)

    def StepSet(self, inStep):
        return _byteblower.FrameSizeModifierGrowing_StepSet(self, inStep)

    def IterationGet(self):
        return _byteblower.FrameSizeModifierGrowing_IterationGet(self)

    def IterationSet(self, inIteration):
        return _byteblower.FrameSizeModifierGrowing_IterationSet(self, inIteration)
FrameSizeModifierGrowing_swigregister = _byteblower.FrameSizeModifierGrowing_swigregister
FrameSizeModifierGrowing_swigregister(FrameSizeModifierGrowing)

class FrameSizeModifierRandom(FrameSizeModifier):
    __swig_setmethods__ = {}
    for _s in [FrameSizeModifier]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameSizeModifierRandom, name, value)
    __swig_getmethods__ = {}
    for _s in [FrameSizeModifier]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FrameSizeModifierRandom, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def StreamGet(self):
        return _byteblower.FrameSizeModifierRandom_StreamGet(self)

    def MinimumSet(self, inMinimum):
        return _byteblower.FrameSizeModifierRandom_MinimumSet(self, inMinimum)

    def MinimumGet(self):
        return _byteblower.FrameSizeModifierRandom_MinimumGet(self)

    def MaximumSet(self, inMaximum):
        return _byteblower.FrameSizeModifierRandom_MaximumSet(self, inMaximum)

    def MaximumGet(self):
        return _byteblower.FrameSizeModifierRandom_MaximumGet(self)
FrameSizeModifierRandom_swigregister = _byteblower.FrameSizeModifierRandom_swigregister
FrameSizeModifierRandom_swigregister(FrameSizeModifierRandom)

class FrameResultData(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameResultData, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FrameResultData, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def TimestampGet(self):
        return _byteblower.FrameResultData_TimestampGet(self)

    def TimestampFirstGet(self):
        return _byteblower.FrameResultData_TimestampFirstGet(self)

    def TimestampLastGet(self):
        return _byteblower.FrameResultData_TimestampLastGet(self)

    def PacketCountGet(self):
        return _byteblower.FrameResultData_PacketCountGet(self)

    def ByteCountGet(self):
        return _byteblower.FrameResultData_ByteCountGet(self)

    def FramesizeMaximumGet(self):
        return _byteblower.FrameResultData_FramesizeMaximumGet(self)

    def FramesizeMinimumGet(self):
        return _byteblower.FrameResultData_FramesizeMinimumGet(self)

    def IntervalDurationGet(self):
        return _byteblower.FrameResultData_IntervalDurationGet(self)
FrameResultData_swigregister = _byteblower.FrameResultData_swigregister
FrameResultData_swigregister(FrameResultData)

class FrameResultSnapshot(AbstractRefreshableResult):
    __swig_setmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameResultSnapshot, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FrameResultSnapshot, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def TimestampGet(self):
        return _byteblower.FrameResultSnapshot_TimestampGet(self)

    def TimestampFirstGet(self):
        return _byteblower.FrameResultSnapshot_TimestampFirstGet(self)

    def TimestampLastGet(self):
        return _byteblower.FrameResultSnapshot_TimestampLastGet(self)

    def PacketCountGet(self):
        return _byteblower.FrameResultSnapshot_PacketCountGet(self)

    def ByteCountGet(self):
        return _byteblower.FrameResultSnapshot_ByteCountGet(self)

    def FramesizeMaximumGet(self):
        return _byteblower.FrameResultSnapshot_FramesizeMaximumGet(self)

    def FramesizeMinimumGet(self):
        return _byteblower.FrameResultSnapshot_FramesizeMinimumGet(self)

    def IntervalDurationGet(self):
        return _byteblower.FrameResultSnapshot_IntervalDurationGet(self)

    def RefreshTimestampGet(self):
        return _byteblower.FrameResultSnapshot_RefreshTimestampGet(self)
FrameResultSnapshot_swigregister = _byteblower.FrameResultSnapshot_swigregister
FrameResultSnapshot_swigregister(FrameResultSnapshot)

class FrameResultSnapshotList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameResultSnapshotList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FrameResultSnapshotList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.FrameResultSnapshotList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.FrameResultSnapshotList___nonzero__(self)

    def __bool__(self):
        return _byteblower.FrameResultSnapshotList___bool__(self)

    def __len__(self):
        return _byteblower.FrameResultSnapshotList___len__(self)

    def pop(self):
        return _byteblower.FrameResultSnapshotList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.FrameResultSnapshotList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.FrameResultSnapshotList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.FrameResultSnapshotList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.FrameResultSnapshotList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.FrameResultSnapshotList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.FrameResultSnapshotList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.FrameResultSnapshotList_append(self, x)

    def empty(self):
        return _byteblower.FrameResultSnapshotList_empty(self)

    def size(self):
        return _byteblower.FrameResultSnapshotList_size(self)

    def clear(self):
        return _byteblower.FrameResultSnapshotList_clear(self)

    def swap(self, v):
        return _byteblower.FrameResultSnapshotList_swap(self, v)

    def get_allocator(self):
        return _byteblower.FrameResultSnapshotList_get_allocator(self)

    def begin(self):
        return _byteblower.FrameResultSnapshotList_begin(self)

    def end(self):
        return _byteblower.FrameResultSnapshotList_end(self)

    def rbegin(self):
        return _byteblower.FrameResultSnapshotList_rbegin(self)

    def rend(self):
        return _byteblower.FrameResultSnapshotList_rend(self)

    def pop_back(self):
        return _byteblower.FrameResultSnapshotList_pop_back(self)

    def erase(self, *args):
        return _byteblower.FrameResultSnapshotList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_FrameResultSnapshotList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.FrameResultSnapshotList_push_back(self, x)

    def front(self):
        return _byteblower.FrameResultSnapshotList_front(self)

    def back(self):
        return _byteblower.FrameResultSnapshotList_back(self)

    def assign(self, n, x):
        return _byteblower.FrameResultSnapshotList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.FrameResultSnapshotList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.FrameResultSnapshotList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.FrameResultSnapshotList_reserve(self, n)

    def capacity(self):
        return _byteblower.FrameResultSnapshotList_capacity(self)
    __swig_destroy__ = _byteblower.delete_FrameResultSnapshotList
    __del__ = lambda self: None
FrameResultSnapshotList_swigregister = _byteblower.FrameResultSnapshotList_swigregister
FrameResultSnapshotList_swigregister(FrameResultSnapshotList)

class FrameResultDataList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameResultDataList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FrameResultDataList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.FrameResultDataList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.FrameResultDataList___nonzero__(self)

    def __bool__(self):
        return _byteblower.FrameResultDataList___bool__(self)

    def __len__(self):
        return _byteblower.FrameResultDataList___len__(self)

    def pop(self):
        return _byteblower.FrameResultDataList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.FrameResultDataList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.FrameResultDataList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.FrameResultDataList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.FrameResultDataList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.FrameResultDataList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.FrameResultDataList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.FrameResultDataList_append(self, x)

    def empty(self):
        return _byteblower.FrameResultDataList_empty(self)

    def size(self):
        return _byteblower.FrameResultDataList_size(self)

    def clear(self):
        return _byteblower.FrameResultDataList_clear(self)

    def swap(self, v):
        return _byteblower.FrameResultDataList_swap(self, v)

    def get_allocator(self):
        return _byteblower.FrameResultDataList_get_allocator(self)

    def begin(self):
        return _byteblower.FrameResultDataList_begin(self)

    def end(self):
        return _byteblower.FrameResultDataList_end(self)

    def rbegin(self):
        return _byteblower.FrameResultDataList_rbegin(self)

    def rend(self):
        return _byteblower.FrameResultDataList_rend(self)

    def pop_back(self):
        return _byteblower.FrameResultDataList_pop_back(self)

    def erase(self, *args):
        return _byteblower.FrameResultDataList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_FrameResultDataList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.FrameResultDataList_push_back(self, x)

    def front(self):
        return _byteblower.FrameResultDataList_front(self)

    def back(self):
        return _byteblower.FrameResultDataList_back(self)

    def assign(self, n, x):
        return _byteblower.FrameResultDataList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.FrameResultDataList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.FrameResultDataList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.FrameResultDataList_reserve(self, n)

    def capacity(self):
        return _byteblower.FrameResultDataList_capacity(self)
    __swig_destroy__ = _byteblower.delete_FrameResultDataList
    __del__ = lambda self: None
FrameResultDataList_swigregister = _byteblower.FrameResultDataList_swigregister
FrameResultDataList_swigregister(FrameResultDataList)

class FrameResultHistory(AbstractRefreshableResult):
    __swig_setmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameResultHistory, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FrameResultHistory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Clear(self):
        return _byteblower.FrameResultHistory_Clear(self)

    def SamplingIntervalDurationGet(self):
        return _byteblower.FrameResultHistory_SamplingIntervalDurationGet(self)

    def SamplingIntervalDurationSet(self, inDuration):
        return _byteblower.FrameResultHistory_SamplingIntervalDurationSet(self, inDuration)

    def SamplingBufferLengthGet(self):
        return _byteblower.FrameResultHistory_SamplingBufferLengthGet(self)

    def SamplingBufferLengthSet(self, inCount):
        return _byteblower.FrameResultHistory_SamplingBufferLengthSet(self, inCount)

    def CumulativeGet(self):
        return _byteblower.FrameResultHistory_CumulativeGet(self)

    def IntervalGet(self):
        return _byteblower.FrameResultHistory_IntervalGet(self)

    def CumulativeLengthGet(self):
        return _byteblower.FrameResultHistory_CumulativeLengthGet(self)

    def IntervalLengthGet(self):
        return _byteblower.FrameResultHistory_IntervalLengthGet(self)

    def CumulativeGetByIndex(self, index):
        return _byteblower.FrameResultHistory_CumulativeGetByIndex(self, index)

    def IntervalGetByIndex(self, index):
        return _byteblower.FrameResultHistory_IntervalGetByIndex(self, index)

    def CumulativeGetByTime(self, timestamp):
        return _byteblower.FrameResultHistory_CumulativeGetByTime(self, timestamp)

    def IntervalGetByTime(self, timestamp):
        return _byteblower.FrameResultHistory_IntervalGetByTime(self, timestamp)

    def CumulativeLatestGet(self):
        return _byteblower.FrameResultHistory_CumulativeLatestGet(self)

    def IntervalLatestGet(self):
        return _byteblower.FrameResultHistory_IntervalLatestGet(self)

    def RefreshTimestampGet(self):
        return _byteblower.FrameResultHistory_RefreshTimestampGet(self)
FrameResultHistory_swigregister = _byteblower.FrameResultHistory_swigregister
FrameResultHistory_swigregister(FrameResultHistory)

class Frame(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Frame, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Frame, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def BytesSet(self, frameString):
        return _byteblower.Frame_BytesSet(self, frameString)

    def BytesGet(self):
        return _byteblower.Frame_BytesGet(self)

    def FrameTagTimeGet(self):
        return _byteblower.Frame_FrameTagTimeGet(self)

    def FrameTagSequenceGet(self):
        return _byteblower.Frame_FrameTagSequenceGet(self)

    def L3AutoChecksumEnable(self, value):
        return _byteblower.Frame_L3AutoChecksumEnable(self, value)

    def L3AutoChecksumGet(self):
        return _byteblower.Frame_L3AutoChecksumGet(self)

    def L3AutoLengthEnable(self, value):
        return _byteblower.Frame_L3AutoLengthEnable(self, value)

    def L3AutoLengthGet(self):
        return _byteblower.Frame_L3AutoLengthGet(self)

    def L4AutoChecksumEnable(self, value):
        return _byteblower.Frame_L4AutoChecksumEnable(self, value)

    def L4AutoChecksumGet(self):
        return _byteblower.Frame_L4AutoChecksumGet(self)

    def L4AutoLengthEnable(self, value):
        return _byteblower.Frame_L4AutoLengthEnable(self, value)

    def L4AutoLengthGet(self):
        return _byteblower.Frame_L4AutoLengthGet(self)

    def StreamGet(self):
        return _byteblower.Frame_StreamGet(self)

    def SetL3AutoChecksum(self, b):
        return _byteblower.Frame_SetL3AutoChecksum(self, b)

    def SetL3AutoLength(self, set):
        return _byteblower.Frame_SetL3AutoLength(self, set)

    def SetL4AutoChecksum(self, set):
        return _byteblower.Frame_SetL4AutoChecksum(self, set)

    def SetL4AutoLength(self, set):
        return _byteblower.Frame_SetL4AutoLength(self, set)

    def IsL3AutoChecksumEnabled(self):
        return _byteblower.Frame_IsL3AutoChecksumEnabled(self)

    def IsL3AutoLengthEnabled(self):
        return _byteblower.Frame_IsL3AutoLengthEnabled(self)

    def IsL4AutoChecksumEnabled(self):
        return _byteblower.Frame_IsL4AutoChecksumEnabled(self)

    def IsL4AutoLengthEnabled(self):
        return _byteblower.Frame_IsL4AutoLengthEnabled(self)

    def ModifierFieldIncrementalAdd(self):
        return _byteblower.Frame_ModifierFieldIncrementalAdd(self)

    def ModifierFieldIncrementalGet(self):
        return _byteblower.Frame_ModifierFieldIncrementalGet(self)

    def ModifierFieldIncrementalDestroy(self, inModifier):
        return _byteblower.Frame_ModifierFieldIncrementalDestroy(self, inModifier)

    def ModifierFieldRandomAdd(self):
        return _byteblower.Frame_ModifierFieldRandomAdd(self)

    def ModifierFieldRandomGet(self):
        return _byteblower.Frame_ModifierFieldRandomGet(self)

    def ModifierFieldRandomDestroy(self, inModifier):
        return _byteblower.Frame_ModifierFieldRandomDestroy(self, inModifier)

    def ModifierSizeGet(self):
        return _byteblower.Frame_ModifierSizeGet(self)

    def ModifierSizeGrowingSet(self):
        return _byteblower.Frame_ModifierSizeGrowingSet(self)

    def ModifierSizeRandomSet(self):
        return _byteblower.Frame_ModifierSizeRandomSet(self)

    def ModifierSizeGrowingGet(self):
        return _byteblower.Frame_ModifierSizeGrowingGet(self)

    def ModifierSizeRandomGet(self):
        return _byteblower.Frame_ModifierSizeRandomGet(self)

    def ModifierSizeGrowingDestroy(self, arg2):
        return _byteblower.Frame_ModifierSizeGrowingDestroy(self, arg2)

    def ModifierSizeRandomDestroy(self, arg2):
        return _byteblower.Frame_ModifierSizeRandomDestroy(self, arg2)

    def ResultClear(self):
        return _byteblower.Frame_ResultClear(self)

    def ResultGet(self):
        return _byteblower.Frame_ResultGet(self)

    def ResultHistoryGet(self):
        return _byteblower.Frame_ResultHistoryGet(self)
Frame_swigregister = _byteblower.Frame_swigregister
Frame_swigregister(Frame)

class FrameMobile(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameMobile, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FrameMobile, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def FrameTagTimeGet(self):
        return _byteblower.FrameMobile_FrameTagTimeGet(self)

    def PayloadSet(self, payloadString):
        return _byteblower.FrameMobile_PayloadSet(self, payloadString)

    def PayloadGet(self):
        return _byteblower.FrameMobile_PayloadGet(self)

    def StreamGet(self):
        return _byteblower.FrameMobile_StreamGet(self)

    def ResultClear(self):
        return _byteblower.FrameMobile_ResultClear(self)

    def ResultGet(self):
        return _byteblower.FrameMobile_ResultGet(self)

    def ResultHistoryGet(self):
        return _byteblower.FrameMobile_ResultHistoryGet(self)
FrameMobile_swigregister = _byteblower.FrameMobile_swigregister
FrameMobile_swigregister(FrameMobile)

class FrameTag(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameTag, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FrameTag, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def TypeGet(self):
        return _byteblower.FrameTag_TypeGet(self)

    def FormatGet(self):
        return _byteblower.FrameTag_FormatGet(self)

    def FormatStringGet(self):
        return _byteblower.FrameTag_FormatStringGet(self)

    def MetricsGet(self):
        return _byteblower.FrameTag_MetricsGet(self)

    def PositionGet(self):
        return _byteblower.FrameTag_PositionGet(self)

    def PositionSet(self, newPosition):
        return _byteblower.FrameTag_PositionSet(self, newPosition)

    def FormatDestroy(self):
        return _byteblower.FrameTag_FormatDestroy(self)

    def MetricsDestroy(self):
        return _byteblower.FrameTag_MetricsDestroy(self)
FrameTag_swigregister = _byteblower.FrameTag_swigregister
FrameTag_swigregister(FrameTag)

class FrameTagTx(FrameTag):
    __swig_setmethods__ = {}
    for _s in [FrameTag]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameTagTx, name, value)
    __swig_getmethods__ = {}
    for _s in [FrameTag]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FrameTagTx, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def PositionGet(self):
        return _byteblower.FrameTagTx_PositionGet(self)

    def PositionSet(self, newPosition):
        return _byteblower.FrameTagTx_PositionSet(self, newPosition)

    def Enable(self, set):
        return _byteblower.FrameTagTx_Enable(self, set)

    def IsEnabled(self):
        return _byteblower.FrameTagTx_IsEnabled(self)

    def PositionAutomaticSet(self):
        return _byteblower.FrameTagTx_PositionAutomaticSet(self)
FrameTagTx_swigregister = _byteblower.FrameTagTx_swigregister
FrameTagTx_swigregister(FrameTagTx)

class FrameTagFormat(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameTagFormat, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FrameTagFormat, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def TypeGet(self):
        return _byteblower.FrameTagFormat_TypeGet(self)

    def TimeStampFormatGet(self):
        return _byteblower.FrameTagFormat_TimeStampFormatGet(self)

    def SequenceNumberFormatGet(self):
        return _byteblower.FrameTagFormat_SequenceNumberFormatGet(self)

    def FormatStringGet(self):
        return _byteblower.FrameTagFormat_FormatStringGet(self)
FrameTagFormat_swigregister = _byteblower.FrameTagFormat_swigregister
FrameTagFormat_swigregister(FrameTagFormat)

class FrameTagMetrics(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameTagMetrics, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FrameTagMetrics, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def LengthGet(self):
        return _byteblower.FrameTagMetrics_LengthGet(self)

    def AlignmentGet(self):
        return _byteblower.FrameTagMetrics_AlignmentGet(self)

    def FrameTagGet(self):
        return _byteblower.FrameTagMetrics_FrameTagGet(self)
FrameTagMetrics_swigregister = _byteblower.FrameTagMetrics_swigregister
FrameTagMetrics_swigregister(FrameTagMetrics)

class FrameTagRx(FrameTag):
    __swig_setmethods__ = {}
    for _s in [FrameTag]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameTagRx, name, value)
    __swig_getmethods__ = {}
    for _s in [FrameTag]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FrameTagRx, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def PositionGet(self):
        return _byteblower.FrameTagRx_PositionGet(self)

    def PositionSet(self, newPosition):
        return _byteblower.FrameTagRx_PositionSet(self, newPosition)

    def FormatSet(self, fromFrameTagFormat):
        return _byteblower.FrameTagRx_FormatSet(self, fromFrameTagFormat)

    def FormatSetFromString(self, formatString):
        return _byteblower.FrameTagRx_FormatSetFromString(self, formatString)

    def FormatDefaultSet(self):
        return _byteblower.FrameTagRx_FormatDefaultSet(self)

    def MetricsSet(self, fromFrameTagMetrics):
        return _byteblower.FrameTagRx_MetricsSet(self, fromFrameTagMetrics)

    def MetricsDefaultSet(self):
        return _byteblower.FrameTagRx_MetricsDefaultSet(self)

    def PositionDefaultSet(self):
        return _byteblower.FrameTagRx_PositionDefaultSet(self)
FrameTagRx_swigregister = _byteblower.FrameTagRx_swigregister
FrameTagRx_swigregister(FrameTagRx)

class Trigger(Rx):
    __swig_setmethods__ = {}
    for _s in [Rx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Trigger, name, value)
    __swig_getmethods__ = {}
    for _s in [Rx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Trigger, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
Trigger_swigregister = _byteblower.Trigger_swigregister
Trigger_swigregister(Trigger)

class TriggerBasicResultSnapshot(AbstractRefreshableResult):
    __swig_setmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerBasicResultSnapshot, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerBasicResultSnapshot, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def TimestampGet(self):
        return _byteblower.TriggerBasicResultSnapshot_TimestampGet(self)

    def TimestampFirstGet(self):
        return _byteblower.TriggerBasicResultSnapshot_TimestampFirstGet(self)

    def TimestampLastGet(self):
        return _byteblower.TriggerBasicResultSnapshot_TimestampLastGet(self)

    def PacketCountGet(self):
        return _byteblower.TriggerBasicResultSnapshot_PacketCountGet(self)

    def ByteCountGet(self):
        return _byteblower.TriggerBasicResultSnapshot_ByteCountGet(self)

    def FramesizeMaximumGet(self):
        return _byteblower.TriggerBasicResultSnapshot_FramesizeMaximumGet(self)

    def FramesizeMinimumGet(self):
        return _byteblower.TriggerBasicResultSnapshot_FramesizeMinimumGet(self)

    def IntervalDurationGet(self):
        return _byteblower.TriggerBasicResultSnapshot_IntervalDurationGet(self)

    def RefreshTimestampGet(self):
        return _byteblower.TriggerBasicResultSnapshot_RefreshTimestampGet(self)
TriggerBasicResultSnapshot_swigregister = _byteblower.TriggerBasicResultSnapshot_swigregister
TriggerBasicResultSnapshot_swigregister(TriggerBasicResultSnapshot)

class TriggerBasicResultData(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerBasicResultData, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerBasicResultData, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def TimestampGet(self):
        return _byteblower.TriggerBasicResultData_TimestampGet(self)

    def TimestampFirstGet(self):
        return _byteblower.TriggerBasicResultData_TimestampFirstGet(self)

    def TimestampLastGet(self):
        return _byteblower.TriggerBasicResultData_TimestampLastGet(self)

    def PacketCountGet(self):
        return _byteblower.TriggerBasicResultData_PacketCountGet(self)

    def ByteCountGet(self):
        return _byteblower.TriggerBasicResultData_ByteCountGet(self)

    def FramesizeMaximumGet(self):
        return _byteblower.TriggerBasicResultData_FramesizeMaximumGet(self)

    def FramesizeMinimumGet(self):
        return _byteblower.TriggerBasicResultData_FramesizeMinimumGet(self)

    def IntervalDurationGet(self):
        return _byteblower.TriggerBasicResultData_IntervalDurationGet(self)

    def TypeGet(self):
        return _byteblower.TriggerBasicResultData_TypeGet(self)
TriggerBasicResultData_swigregister = _byteblower.TriggerBasicResultData_swigregister
TriggerBasicResultData_swigregister(TriggerBasicResultData)

class TriggerBasicResultDataList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerBasicResultDataList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerBasicResultDataList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.TriggerBasicResultDataList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.TriggerBasicResultDataList___nonzero__(self)

    def __bool__(self):
        return _byteblower.TriggerBasicResultDataList___bool__(self)

    def __len__(self):
        return _byteblower.TriggerBasicResultDataList___len__(self)

    def pop(self):
        return _byteblower.TriggerBasicResultDataList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.TriggerBasicResultDataList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.TriggerBasicResultDataList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.TriggerBasicResultDataList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.TriggerBasicResultDataList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.TriggerBasicResultDataList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.TriggerBasicResultDataList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.TriggerBasicResultDataList_append(self, x)

    def empty(self):
        return _byteblower.TriggerBasicResultDataList_empty(self)

    def size(self):
        return _byteblower.TriggerBasicResultDataList_size(self)

    def clear(self):
        return _byteblower.TriggerBasicResultDataList_clear(self)

    def swap(self, v):
        return _byteblower.TriggerBasicResultDataList_swap(self, v)

    def get_allocator(self):
        return _byteblower.TriggerBasicResultDataList_get_allocator(self)

    def begin(self):
        return _byteblower.TriggerBasicResultDataList_begin(self)

    def end(self):
        return _byteblower.TriggerBasicResultDataList_end(self)

    def rbegin(self):
        return _byteblower.TriggerBasicResultDataList_rbegin(self)

    def rend(self):
        return _byteblower.TriggerBasicResultDataList_rend(self)

    def pop_back(self):
        return _byteblower.TriggerBasicResultDataList_pop_back(self)

    def erase(self, *args):
        return _byteblower.TriggerBasicResultDataList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_TriggerBasicResultDataList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.TriggerBasicResultDataList_push_back(self, x)

    def front(self):
        return _byteblower.TriggerBasicResultDataList_front(self)

    def back(self):
        return _byteblower.TriggerBasicResultDataList_back(self)

    def assign(self, n, x):
        return _byteblower.TriggerBasicResultDataList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.TriggerBasicResultDataList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.TriggerBasicResultDataList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.TriggerBasicResultDataList_reserve(self, n)

    def capacity(self):
        return _byteblower.TriggerBasicResultDataList_capacity(self)
    __swig_destroy__ = _byteblower.delete_TriggerBasicResultDataList
    __del__ = lambda self: None
TriggerBasicResultDataList_swigregister = _byteblower.TriggerBasicResultDataList_swigregister
TriggerBasicResultDataList_swigregister(TriggerBasicResultDataList)

class TriggerBasicResultHistory(AbstractRefreshableResult):
    __swig_setmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerBasicResultHistory, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerBasicResultHistory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Clear(self):
        return _byteblower.TriggerBasicResultHistory_Clear(self)

    def CumulativeGet(self):
        return _byteblower.TriggerBasicResultHistory_CumulativeGet(self)

    def CumulativeGetByIndex(self, index):
        return _byteblower.TriggerBasicResultHistory_CumulativeGetByIndex(self, index)

    def CumulativeLengthGet(self):
        return _byteblower.TriggerBasicResultHistory_CumulativeLengthGet(self)

    def SamplingBufferLengthGet(self):
        return _byteblower.TriggerBasicResultHistory_SamplingBufferLengthGet(self)

    def SamplingIntervalDurationGet(self):
        return _byteblower.TriggerBasicResultHistory_SamplingIntervalDurationGet(self)

    def SamplingIntervalDurationSet(self, inDuration):
        return _byteblower.TriggerBasicResultHistory_SamplingIntervalDurationSet(self, inDuration)

    def SamplingBufferLengthSet(self, inLength):
        return _byteblower.TriggerBasicResultHistory_SamplingBufferLengthSet(self, inLength)

    def IntervalGet(self):
        return _byteblower.TriggerBasicResultHistory_IntervalGet(self)

    def IntervalGetByIndex(self, index):
        return _byteblower.TriggerBasicResultHistory_IntervalGetByIndex(self, index)

    def IntervalLengthGet(self):
        return _byteblower.TriggerBasicResultHistory_IntervalLengthGet(self)

    def RefreshTimestampGet(self):
        return _byteblower.TriggerBasicResultHistory_RefreshTimestampGet(self)

    def CumulativeGetByTime(self, timestamp):
        return _byteblower.TriggerBasicResultHistory_CumulativeGetByTime(self, timestamp)

    def IntervalGetByTime(self, timestamp):
        return _byteblower.TriggerBasicResultHistory_IntervalGetByTime(self, timestamp)

    def CumulativeLatestGet(self):
        return _byteblower.TriggerBasicResultHistory_CumulativeLatestGet(self)

    def IntervalLatestGet(self):
        return _byteblower.TriggerBasicResultHistory_IntervalLatestGet(self)
TriggerBasicResultHistory_swigregister = _byteblower.TriggerBasicResultHistory_swigregister
TriggerBasicResultHistory_swigregister(TriggerBasicResultHistory)

class TriggerBasic(Trigger):
    __swig_setmethods__ = {}
    for _s in [Trigger]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerBasic, name, value)
    __swig_getmethods__ = {}
    for _s in [Trigger]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerBasic, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ResultGet(self):
        return _byteblower.TriggerBasic_ResultGet(self)

    def ResultHistoryGet(self):
        return _byteblower.TriggerBasic_ResultHistoryGet(self)

    def FilterSet(self, filter):
        return _byteblower.TriggerBasic_FilterSet(self, filter)

    def FilterGet(self):
        return _byteblower.TriggerBasic_FilterGet(self)

    def ResultClear(self):
        return _byteblower.TriggerBasic_ResultClear(self)
TriggerBasic_swigregister = _byteblower.TriggerBasic_swigregister
TriggerBasic_swigregister(TriggerBasic)

class TriggerBasicMobile(Trigger):
    __swig_setmethods__ = {}
    for _s in [Trigger]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerBasicMobile, name, value)
    __swig_getmethods__ = {}
    for _s in [Trigger]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerBasicMobile, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ResultGet(self):
        return _byteblower.TriggerBasicMobile_ResultGet(self)

    def ResultHistoryGet(self):
        return _byteblower.TriggerBasicMobile_ResultHistoryGet(self)

    def FilterSourceAddressGet(self):
        return _byteblower.TriggerBasicMobile_FilterSourceAddressGet(self)

    def FilterSourceAddressSet(self, inAddress):
        return _byteblower.TriggerBasicMobile_FilterSourceAddressSet(self, inAddress)

    def FilterUdpSourcePortGet(self):
        return _byteblower.TriggerBasicMobile_FilterUdpSourcePortGet(self)

    def FilterUdpSourcePortSet(self, inPort):
        return _byteblower.TriggerBasicMobile_FilterUdpSourcePortSet(self, inPort)

    def FilterUdpDestinationPortGet(self):
        return _byteblower.TriggerBasicMobile_FilterUdpDestinationPortGet(self)

    def FilterUdpDestinationPortSet(self, inPort):
        return _byteblower.TriggerBasicMobile_FilterUdpDestinationPortSet(self, inPort)

    def DurationGet(self):
        return _byteblower.TriggerBasicMobile_DurationGet(self)

    def DurationSet(self, inDuration):
        return _byteblower.TriggerBasicMobile_DurationSet(self, inDuration)

    def FilterGet(self):
        return _byteblower.TriggerBasicMobile_FilterGet(self)

    def FilterSet(self, arg2):
        return _byteblower.TriggerBasicMobile_FilterSet(self, arg2)

    def ResultClear(self):
        return _byteblower.TriggerBasicMobile_ResultClear(self)
TriggerBasicMobile_swigregister = _byteblower.TriggerBasicMobile_swigregister
TriggerBasicMobile_swigregister(TriggerBasicMobile)

class TriggerSizeDistributionResultSnapshot(AbstractRefreshableResult):
    __swig_setmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerSizeDistributionResultSnapshot, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerSizeDistributionResultSnapshot, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def TimestampGet(self):
        return _byteblower.TriggerSizeDistributionResultSnapshot_TimestampGet(self)

    def TimestampFirstGet(self):
        return _byteblower.TriggerSizeDistributionResultSnapshot_TimestampFirstGet(self)

    def TimestampLastGet(self):
        return _byteblower.TriggerSizeDistributionResultSnapshot_TimestampLastGet(self)

    def ByteCountGet(self):
        return _byteblower.TriggerSizeDistributionResultSnapshot_ByteCountGet(self)

    def FramesizeMaximumGet(self):
        return _byteblower.TriggerSizeDistributionResultSnapshot_FramesizeMaximumGet(self)

    def FramesizeMinimumGet(self):
        return _byteblower.TriggerSizeDistributionResultSnapshot_FramesizeMinimumGet(self)

    def PacketCountGet(self, *args):
        return _byteblower.TriggerSizeDistributionResultSnapshot_PacketCountGet(self, *args)

    def PacketCountBelowMinimumGet(self):
        return _byteblower.TriggerSizeDistributionResultSnapshot_PacketCountBelowMinimumGet(self)

    def PacketCountAboveMaximumGet(self):
        return _byteblower.TriggerSizeDistributionResultSnapshot_PacketCountAboveMaximumGet(self)

    def RefreshTimestampGet(self):
        return _byteblower.TriggerSizeDistributionResultSnapshot_RefreshTimestampGet(self)
TriggerSizeDistributionResultSnapshot_swigregister = _byteblower.TriggerSizeDistributionResultSnapshot_swigregister
TriggerSizeDistributionResultSnapshot_swigregister(TriggerSizeDistributionResultSnapshot)

class TriggerSizeDistribution(Trigger):
    __swig_setmethods__ = {}
    for _s in [Trigger]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerSizeDistribution, name, value)
    __swig_getmethods__ = {}
    for _s in [Trigger]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerSizeDistribution, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ResultGet(self):
        return _byteblower.TriggerSizeDistribution_ResultGet(self)

    def ResultClear(self):
        return _byteblower.TriggerSizeDistribution_ResultClear(self)

    def FilterSet(self, inFilter):
        return _byteblower.TriggerSizeDistribution_FilterSet(self, inFilter)

    def FilterGet(self):
        return _byteblower.TriggerSizeDistribution_FilterGet(self)
TriggerSizeDistribution_swigregister = _byteblower.TriggerSizeDistribution_swigregister
TriggerSizeDistribution_swigregister(TriggerSizeDistribution)

class OutOfSequenceResultSnapshot(AbstractRefreshableResult):
    __swig_setmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutOfSequenceResultSnapshot, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutOfSequenceResultSnapshot, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def TimestampGet(self):
        return _byteblower.OutOfSequenceResultSnapshot_TimestampGet(self)

    def TimestampFirstGet(self):
        return _byteblower.OutOfSequenceResultSnapshot_TimestampFirstGet(self)

    def TimestampLastGet(self):
        return _byteblower.OutOfSequenceResultSnapshot_TimestampLastGet(self)

    def PacketCountGet(self):
        return _byteblower.OutOfSequenceResultSnapshot_PacketCountGet(self)

    def ByteCountGet(self):
        return _byteblower.OutOfSequenceResultSnapshot_ByteCountGet(self)

    def FramesizeMaximumGet(self):
        return _byteblower.OutOfSequenceResultSnapshot_FramesizeMaximumGet(self)

    def FramesizeMinimumGet(self):
        return _byteblower.OutOfSequenceResultSnapshot_FramesizeMinimumGet(self)

    def PacketCountOutOfSequenceGet(self):
        return _byteblower.OutOfSequenceResultSnapshot_PacketCountOutOfSequenceGet(self)

    def PacketCountValidGet(self):
        return _byteblower.OutOfSequenceResultSnapshot_PacketCountValidGet(self)

    def PacketCountInvalidGet(self):
        return _byteblower.OutOfSequenceResultSnapshot_PacketCountInvalidGet(self)

    def IntervalDurationGet(self):
        return _byteblower.OutOfSequenceResultSnapshot_IntervalDurationGet(self)

    def RefreshTimestampGet(self):
        return _byteblower.OutOfSequenceResultSnapshot_RefreshTimestampGet(self)
OutOfSequenceResultSnapshot_swigregister = _byteblower.OutOfSequenceResultSnapshot_swigregister
OutOfSequenceResultSnapshot_swigregister(OutOfSequenceResultSnapshot)

class OutOfSequenceResultData(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutOfSequenceResultData, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutOfSequenceResultData, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def TimestampGet(self):
        return _byteblower.OutOfSequenceResultData_TimestampGet(self)

    def TimestampFirstGet(self):
        return _byteblower.OutOfSequenceResultData_TimestampFirstGet(self)

    def TimestampLastGet(self):
        return _byteblower.OutOfSequenceResultData_TimestampLastGet(self)

    def PacketCountGet(self):
        return _byteblower.OutOfSequenceResultData_PacketCountGet(self)

    def ByteCountGet(self):
        return _byteblower.OutOfSequenceResultData_ByteCountGet(self)

    def FramesizeMaximumGet(self):
        return _byteblower.OutOfSequenceResultData_FramesizeMaximumGet(self)

    def FramesizeMinimumGet(self):
        return _byteblower.OutOfSequenceResultData_FramesizeMinimumGet(self)

    def PacketCountOutOfSequenceGet(self):
        return _byteblower.OutOfSequenceResultData_PacketCountOutOfSequenceGet(self)

    def PacketCountValidGet(self):
        return _byteblower.OutOfSequenceResultData_PacketCountValidGet(self)

    def PacketCountInvalidGet(self):
        return _byteblower.OutOfSequenceResultData_PacketCountInvalidGet(self)

    def IntervalDurationGet(self):
        return _byteblower.OutOfSequenceResultData_IntervalDurationGet(self)
OutOfSequenceResultData_swigregister = _byteblower.OutOfSequenceResultData_swigregister
OutOfSequenceResultData_swigregister(OutOfSequenceResultData)

class OutOfSequenceResultDataList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutOfSequenceResultDataList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutOfSequenceResultDataList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.OutOfSequenceResultDataList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.OutOfSequenceResultDataList___nonzero__(self)

    def __bool__(self):
        return _byteblower.OutOfSequenceResultDataList___bool__(self)

    def __len__(self):
        return _byteblower.OutOfSequenceResultDataList___len__(self)

    def pop(self):
        return _byteblower.OutOfSequenceResultDataList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.OutOfSequenceResultDataList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.OutOfSequenceResultDataList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.OutOfSequenceResultDataList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.OutOfSequenceResultDataList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.OutOfSequenceResultDataList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.OutOfSequenceResultDataList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.OutOfSequenceResultDataList_append(self, x)

    def empty(self):
        return _byteblower.OutOfSequenceResultDataList_empty(self)

    def size(self):
        return _byteblower.OutOfSequenceResultDataList_size(self)

    def clear(self):
        return _byteblower.OutOfSequenceResultDataList_clear(self)

    def swap(self, v):
        return _byteblower.OutOfSequenceResultDataList_swap(self, v)

    def get_allocator(self):
        return _byteblower.OutOfSequenceResultDataList_get_allocator(self)

    def begin(self):
        return _byteblower.OutOfSequenceResultDataList_begin(self)

    def end(self):
        return _byteblower.OutOfSequenceResultDataList_end(self)

    def rbegin(self):
        return _byteblower.OutOfSequenceResultDataList_rbegin(self)

    def rend(self):
        return _byteblower.OutOfSequenceResultDataList_rend(self)

    def pop_back(self):
        return _byteblower.OutOfSequenceResultDataList_pop_back(self)

    def erase(self, *args):
        return _byteblower.OutOfSequenceResultDataList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_OutOfSequenceResultDataList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.OutOfSequenceResultDataList_push_back(self, x)

    def front(self):
        return _byteblower.OutOfSequenceResultDataList_front(self)

    def back(self):
        return _byteblower.OutOfSequenceResultDataList_back(self)

    def assign(self, n, x):
        return _byteblower.OutOfSequenceResultDataList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.OutOfSequenceResultDataList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.OutOfSequenceResultDataList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.OutOfSequenceResultDataList_reserve(self, n)

    def capacity(self):
        return _byteblower.OutOfSequenceResultDataList_capacity(self)
    __swig_destroy__ = _byteblower.delete_OutOfSequenceResultDataList
    __del__ = lambda self: None
OutOfSequenceResultDataList_swigregister = _byteblower.OutOfSequenceResultDataList_swigregister
OutOfSequenceResultDataList_swigregister(OutOfSequenceResultDataList)

class OutOfSequenceResultHistory(AbstractRefreshableResult):
    __swig_setmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutOfSequenceResultHistory, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutOfSequenceResultHistory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Clear(self):
        return _byteblower.OutOfSequenceResultHistory_Clear(self)

    def SamplingIntervalDurationGet(self):
        return _byteblower.OutOfSequenceResultHistory_SamplingIntervalDurationGet(self)

    def SamplingBufferLengthGet(self):
        return _byteblower.OutOfSequenceResultHistory_SamplingBufferLengthGet(self)

    def SamplingIntervalDurationSet(self, inDuration):
        return _byteblower.OutOfSequenceResultHistory_SamplingIntervalDurationSet(self, inDuration)

    def SamplingBufferLengthSet(self, inLength):
        return _byteblower.OutOfSequenceResultHistory_SamplingBufferLengthSet(self, inLength)

    def CumulativeGet(self):
        return _byteblower.OutOfSequenceResultHistory_CumulativeGet(self)

    def CumulativeGetByIndex(self, index):
        return _byteblower.OutOfSequenceResultHistory_CumulativeGetByIndex(self, index)

    def CumulativeLengthGet(self):
        return _byteblower.OutOfSequenceResultHistory_CumulativeLengthGet(self)

    def IntervalGet(self):
        return _byteblower.OutOfSequenceResultHistory_IntervalGet(self)

    def IntervalGetByIndex(self, index):
        return _byteblower.OutOfSequenceResultHistory_IntervalGetByIndex(self, index)

    def IntervalLengthGet(self):
        return _byteblower.OutOfSequenceResultHistory_IntervalLengthGet(self)

    def RefreshTimestampGet(self):
        return _byteblower.OutOfSequenceResultHistory_RefreshTimestampGet(self)

    def CumulativeGetByTime(self, timestamp):
        return _byteblower.OutOfSequenceResultHistory_CumulativeGetByTime(self, timestamp)

    def IntervalGetByTime(self, timestamp):
        return _byteblower.OutOfSequenceResultHistory_IntervalGetByTime(self, timestamp)

    def CumulativeLatestGet(self):
        return _byteblower.OutOfSequenceResultHistory_CumulativeLatestGet(self)

    def IntervalLatestGet(self):
        return _byteblower.OutOfSequenceResultHistory_IntervalLatestGet(self)
OutOfSequenceResultHistory_swigregister = _byteblower.OutOfSequenceResultHistory_swigregister
OutOfSequenceResultHistory_swigregister(OutOfSequenceResultHistory)

class OutOfSequence(TaggedRx):
    __swig_setmethods__ = {}
    for _s in [TaggedRx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutOfSequence, name, value)
    __swig_getmethods__ = {}
    for _s in [TaggedRx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutOfSequence, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ResultClear(self):
        return _byteblower.OutOfSequence_ResultClear(self)

    def ResultGet(self):
        return _byteblower.OutOfSequence_ResultGet(self)

    def ResultHistoryGet(self):
        return _byteblower.OutOfSequence_ResultHistoryGet(self)

    def FilterGet(self):
        return _byteblower.OutOfSequence_FilterGet(self)

    def FilterSet(self, arg2):
        return _byteblower.OutOfSequence_FilterSet(self, arg2)
OutOfSequence_swigregister = _byteblower.OutOfSequence_swigregister
OutOfSequence_swigregister(OutOfSequence)

class Latency(TaggedRx):
    __swig_setmethods__ = {}
    for _s in [TaggedRx]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Latency, name, value)
    __swig_getmethods__ = {}
    for _s in [TaggedRx]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Latency, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
Latency_swigregister = _byteblower.Latency_swigregister
Latency_swigregister(Latency)

class LatencyBasicResultSnapshot(AbstractRefreshableResult):
    __swig_setmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LatencyBasicResultSnapshot, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LatencyBasicResultSnapshot, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def TimestampGet(self):
        return _byteblower.LatencyBasicResultSnapshot_TimestampGet(self)

    def TimestampFirstGet(self):
        return _byteblower.LatencyBasicResultSnapshot_TimestampFirstGet(self)

    def TimestampLastGet(self):
        return _byteblower.LatencyBasicResultSnapshot_TimestampLastGet(self)

    def PacketCountGet(self):
        return _byteblower.LatencyBasicResultSnapshot_PacketCountGet(self)

    def ByteCountGet(self):
        return _byteblower.LatencyBasicResultSnapshot_ByteCountGet(self)

    def FramesizeMaximumGet(self):
        return _byteblower.LatencyBasicResultSnapshot_FramesizeMaximumGet(self)

    def FramesizeMinimumGet(self):
        return _byteblower.LatencyBasicResultSnapshot_FramesizeMinimumGet(self)

    def PacketCountValidGet(self):
        return _byteblower.LatencyBasicResultSnapshot_PacketCountValidGet(self)

    def PacketCountInvalidGet(self):
        return _byteblower.LatencyBasicResultSnapshot_PacketCountInvalidGet(self)

    def LatencyMinimumGet(self):
        return _byteblower.LatencyBasicResultSnapshot_LatencyMinimumGet(self)

    def LatencyMaximumGet(self):
        return _byteblower.LatencyBasicResultSnapshot_LatencyMaximumGet(self)

    def LatencyAverageGet(self):
        return _byteblower.LatencyBasicResultSnapshot_LatencyAverageGet(self)

    def JitterGet(self):
        return _byteblower.LatencyBasicResultSnapshot_JitterGet(self)

    def IntervalDurationGet(self):
        return _byteblower.LatencyBasicResultSnapshot_IntervalDurationGet(self)

    def RefreshTimestampGet(self):
        return _byteblower.LatencyBasicResultSnapshot_RefreshTimestampGet(self)
LatencyBasicResultSnapshot_swigregister = _byteblower.LatencyBasicResultSnapshot_swigregister
LatencyBasicResultSnapshot_swigregister(LatencyBasicResultSnapshot)

class LatencyBasicResultData(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LatencyBasicResultData, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LatencyBasicResultData, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def TimestampGet(self):
        return _byteblower.LatencyBasicResultData_TimestampGet(self)

    def TimestampFirstGet(self):
        return _byteblower.LatencyBasicResultData_TimestampFirstGet(self)

    def TimestampLastGet(self):
        return _byteblower.LatencyBasicResultData_TimestampLastGet(self)

    def PacketCountGet(self):
        return _byteblower.LatencyBasicResultData_PacketCountGet(self)

    def ByteCountGet(self):
        return _byteblower.LatencyBasicResultData_ByteCountGet(self)

    def FramesizeMaximumGet(self):
        return _byteblower.LatencyBasicResultData_FramesizeMaximumGet(self)

    def FramesizeMinimumGet(self):
        return _byteblower.LatencyBasicResultData_FramesizeMinimumGet(self)

    def PacketCountValidGet(self):
        return _byteblower.LatencyBasicResultData_PacketCountValidGet(self)

    def PacketCountInvalidGet(self):
        return _byteblower.LatencyBasicResultData_PacketCountInvalidGet(self)

    def LatencyMinimumGet(self):
        return _byteblower.LatencyBasicResultData_LatencyMinimumGet(self)

    def LatencyMaximumGet(self):
        return _byteblower.LatencyBasicResultData_LatencyMaximumGet(self)

    def LatencyAverageGet(self):
        return _byteblower.LatencyBasicResultData_LatencyAverageGet(self)

    def JitterGet(self):
        return _byteblower.LatencyBasicResultData_JitterGet(self)

    def IntervalDurationGet(self):
        return _byteblower.LatencyBasicResultData_IntervalDurationGet(self)
LatencyBasicResultData_swigregister = _byteblower.LatencyBasicResultData_swigregister
LatencyBasicResultData_swigregister(LatencyBasicResultData)

class LatencyBasicResultDataList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LatencyBasicResultDataList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LatencyBasicResultDataList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.LatencyBasicResultDataList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.LatencyBasicResultDataList___nonzero__(self)

    def __bool__(self):
        return _byteblower.LatencyBasicResultDataList___bool__(self)

    def __len__(self):
        return _byteblower.LatencyBasicResultDataList___len__(self)

    def pop(self):
        return _byteblower.LatencyBasicResultDataList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.LatencyBasicResultDataList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.LatencyBasicResultDataList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.LatencyBasicResultDataList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.LatencyBasicResultDataList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.LatencyBasicResultDataList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.LatencyBasicResultDataList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.LatencyBasicResultDataList_append(self, x)

    def empty(self):
        return _byteblower.LatencyBasicResultDataList_empty(self)

    def size(self):
        return _byteblower.LatencyBasicResultDataList_size(self)

    def clear(self):
        return _byteblower.LatencyBasicResultDataList_clear(self)

    def swap(self, v):
        return _byteblower.LatencyBasicResultDataList_swap(self, v)

    def get_allocator(self):
        return _byteblower.LatencyBasicResultDataList_get_allocator(self)

    def begin(self):
        return _byteblower.LatencyBasicResultDataList_begin(self)

    def end(self):
        return _byteblower.LatencyBasicResultDataList_end(self)

    def rbegin(self):
        return _byteblower.LatencyBasicResultDataList_rbegin(self)

    def rend(self):
        return _byteblower.LatencyBasicResultDataList_rend(self)

    def pop_back(self):
        return _byteblower.LatencyBasicResultDataList_pop_back(self)

    def erase(self, *args):
        return _byteblower.LatencyBasicResultDataList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_LatencyBasicResultDataList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.LatencyBasicResultDataList_push_back(self, x)

    def front(self):
        return _byteblower.LatencyBasicResultDataList_front(self)

    def back(self):
        return _byteblower.LatencyBasicResultDataList_back(self)

    def assign(self, n, x):
        return _byteblower.LatencyBasicResultDataList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.LatencyBasicResultDataList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.LatencyBasicResultDataList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.LatencyBasicResultDataList_reserve(self, n)

    def capacity(self):
        return _byteblower.LatencyBasicResultDataList_capacity(self)
    __swig_destroy__ = _byteblower.delete_LatencyBasicResultDataList
    __del__ = lambda self: None
LatencyBasicResultDataList_swigregister = _byteblower.LatencyBasicResultDataList_swigregister
LatencyBasicResultDataList_swigregister(LatencyBasicResultDataList)

class LatencyBasicResultHistory(AbstractRefreshableResult):
    __swig_setmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LatencyBasicResultHistory, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LatencyBasicResultHistory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Clear(self):
        return _byteblower.LatencyBasicResultHistory_Clear(self)

    def CumulativeGet(self):
        return _byteblower.LatencyBasicResultHistory_CumulativeGet(self)

    def CumulativeGetByIndex(self, index):
        return _byteblower.LatencyBasicResultHistory_CumulativeGetByIndex(self, index)

    def CumulativeLengthGet(self):
        return _byteblower.LatencyBasicResultHistory_CumulativeLengthGet(self)

    def SamplingIntervalDurationGet(self):
        return _byteblower.LatencyBasicResultHistory_SamplingIntervalDurationGet(self)

    def SamplingBufferLengthGet(self):
        return _byteblower.LatencyBasicResultHistory_SamplingBufferLengthGet(self)

    def SamplingIntervalDurationSet(self, inDuration):
        return _byteblower.LatencyBasicResultHistory_SamplingIntervalDurationSet(self, inDuration)

    def SamplingBufferLengthSet(self, inLength):
        return _byteblower.LatencyBasicResultHistory_SamplingBufferLengthSet(self, inLength)

    def IntervalGet(self):
        return _byteblower.LatencyBasicResultHistory_IntervalGet(self)

    def IntervalGetByIndex(self, index):
        return _byteblower.LatencyBasicResultHistory_IntervalGetByIndex(self, index)

    def IntervalLengthGet(self):
        return _byteblower.LatencyBasicResultHistory_IntervalLengthGet(self)

    def RefreshTimestampGet(self):
        return _byteblower.LatencyBasicResultHistory_RefreshTimestampGet(self)

    def CumulativeGetByTime(self, timestamp):
        return _byteblower.LatencyBasicResultHistory_CumulativeGetByTime(self, timestamp)

    def IntervalGetByTime(self, timestamp):
        return _byteblower.LatencyBasicResultHistory_IntervalGetByTime(self, timestamp)

    def CumulativeLatestGet(self):
        return _byteblower.LatencyBasicResultHistory_CumulativeLatestGet(self)

    def IntervalLatestGet(self):
        return _byteblower.LatencyBasicResultHistory_IntervalLatestGet(self)
LatencyBasicResultHistory_swigregister = _byteblower.LatencyBasicResultHistory_swigregister
LatencyBasicResultHistory_swigregister(LatencyBasicResultHistory)

class LatencyBasic(Latency):
    __swig_setmethods__ = {}
    for _s in [Latency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LatencyBasic, name, value)
    __swig_getmethods__ = {}
    for _s in [Latency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LatencyBasic, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ResultClear(self):
        return _byteblower.LatencyBasic_ResultClear(self)

    def ResultGet(self):
        return _byteblower.LatencyBasic_ResultGet(self)

    def ResultHistoryGet(self):
        return _byteblower.LatencyBasic_ResultHistoryGet(self)

    def FilterGet(self):
        return _byteblower.LatencyBasic_FilterGet(self)

    def FilterSet(self, arg2):
        return _byteblower.LatencyBasic_FilterSet(self, arg2)
LatencyBasic_swigregister = _byteblower.LatencyBasic_swigregister
LatencyBasic_swigregister(LatencyBasic)

class LatencyBasicMobile(Latency):
    __swig_setmethods__ = {}
    for _s in [Latency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LatencyBasicMobile, name, value)
    __swig_getmethods__ = {}
    for _s in [Latency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LatencyBasicMobile, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ResultClear(self):
        return _byteblower.LatencyBasicMobile_ResultClear(self)

    def ResultHistoryGet(self):
        return _byteblower.LatencyBasicMobile_ResultHistoryGet(self)

    def ResultGet(self):
        return _byteblower.LatencyBasicMobile_ResultGet(self)

    def FilterSourceAddressGet(self):
        return _byteblower.LatencyBasicMobile_FilterSourceAddressGet(self)

    def FilterSourceAddressSet(self, inAddress):
        return _byteblower.LatencyBasicMobile_FilterSourceAddressSet(self, inAddress)

    def FilterUdpSourcePortGet(self):
        return _byteblower.LatencyBasicMobile_FilterUdpSourcePortGet(self)

    def FilterUdpSourcePortSet(self, inPort):
        return _byteblower.LatencyBasicMobile_FilterUdpSourcePortSet(self, inPort)

    def FilterUdpDestinationPortGet(self):
        return _byteblower.LatencyBasicMobile_FilterUdpDestinationPortGet(self)

    def FilterUdpDestinationPortSet(self, inPort):
        return _byteblower.LatencyBasicMobile_FilterUdpDestinationPortSet(self, inPort)

    def DurationGet(self):
        return _byteblower.LatencyBasicMobile_DurationGet(self)

    def DurationSet(self, inDuration):
        return _byteblower.LatencyBasicMobile_DurationSet(self, inDuration)

    def FilterGet(self):
        return _byteblower.LatencyBasicMobile_FilterGet(self)

    def FilterSet(self, arg2):
        return _byteblower.LatencyBasicMobile_FilterSet(self, arg2)
LatencyBasicMobile_swigregister = _byteblower.LatencyBasicMobile_swigregister
LatencyBasicMobile_swigregister(LatencyBasicMobile)

class LatencyDistributionResultSnapshot(AbstractRefreshableResult):
    __swig_setmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LatencyDistributionResultSnapshot, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LatencyDistributionResultSnapshot, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def TimestampGet(self):
        return _byteblower.LatencyDistributionResultSnapshot_TimestampGet(self)

    def TimestampFirstGet(self):
        return _byteblower.LatencyDistributionResultSnapshot_TimestampFirstGet(self)

    def TimestampLastGet(self):
        return _byteblower.LatencyDistributionResultSnapshot_TimestampLastGet(self)

    def PacketCountGet(self):
        return _byteblower.LatencyDistributionResultSnapshot_PacketCountGet(self)

    def ByteCountGet(self):
        return _byteblower.LatencyDistributionResultSnapshot_ByteCountGet(self)

    def FramesizeMaximumGet(self):
        return _byteblower.LatencyDistributionResultSnapshot_FramesizeMaximumGet(self)

    def FramesizeMinimumGet(self):
        return _byteblower.LatencyDistributionResultSnapshot_FramesizeMinimumGet(self)

    def PacketCountValidGet(self):
        return _byteblower.LatencyDistributionResultSnapshot_PacketCountValidGet(self)

    def PacketCountInvalidGet(self):
        return _byteblower.LatencyDistributionResultSnapshot_PacketCountInvalidGet(self)

    def LatencyMinimumGet(self):
        return _byteblower.LatencyDistributionResultSnapshot_LatencyMinimumGet(self)

    def LatencyMaximumGet(self):
        return _byteblower.LatencyDistributionResultSnapshot_LatencyMaximumGet(self)

    def LatencyAverageGet(self):
        return _byteblower.LatencyDistributionResultSnapshot_LatencyAverageGet(self)

    def JitterGet(self):
        return _byteblower.LatencyDistributionResultSnapshot_JitterGet(self)

    def RangeMinimumGet(self):
        return _byteblower.LatencyDistributionResultSnapshot_RangeMinimumGet(self)

    def RangeMaximumGet(self):
        return _byteblower.LatencyDistributionResultSnapshot_RangeMaximumGet(self)

    def BucketWidthGet(self):
        return _byteblower.LatencyDistributionResultSnapshot_BucketWidthGet(self)

    def BucketCountGet(self):
        return _byteblower.LatencyDistributionResultSnapshot_BucketCountGet(self)

    def PacketCountBelowMinimumGet(self):
        return _byteblower.LatencyDistributionResultSnapshot_PacketCountBelowMinimumGet(self)

    def PacketCountAboveMaximumGet(self):
        return _byteblower.LatencyDistributionResultSnapshot_PacketCountAboveMaximumGet(self)

    def PacketCountBucketsGet(self):
        return _byteblower.LatencyDistributionResultSnapshot_PacketCountBucketsGet(self)

    def RefreshTimestampGet(self):
        return _byteblower.LatencyDistributionResultSnapshot_RefreshTimestampGet(self)
LatencyDistributionResultSnapshot_swigregister = _byteblower.LatencyDistributionResultSnapshot_swigregister
LatencyDistributionResultSnapshot_swigregister(LatencyDistributionResultSnapshot)

class LatencyDistribution(Latency):
    __swig_setmethods__ = {}
    for _s in [Latency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LatencyDistribution, name, value)
    __swig_getmethods__ = {}
    for _s in [Latency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LatencyDistribution, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ResultGet(self):
        return _byteblower.LatencyDistribution_ResultGet(self)

    def BucketCountGet(self):
        return _byteblower.LatencyDistribution_BucketCountGet(self)

    def BucketWidthGet(self):
        return _byteblower.LatencyDistribution_BucketWidthGet(self)

    def RangeGet(self):
        return _byteblower.LatencyDistribution_RangeGet(self)

    def RangeMinimumGet(self):
        return _byteblower.LatencyDistribution_RangeMinimumGet(self)

    def RangeMaximumGet(self):
        return _byteblower.LatencyDistribution_RangeMaximumGet(self)

    def RangeSet(self, rangeStartNs, rangeEndNs):
        return _byteblower.LatencyDistribution_RangeSet(self, rangeStartNs, rangeEndNs)

    def ResultClear(self):
        return _byteblower.LatencyDistribution_ResultClear(self)

    def FilterSet(self, inFilter):
        return _byteblower.LatencyDistribution_FilterSet(self, inFilter)

    def FilterGet(self):
        return _byteblower.LatencyDistribution_FilterGet(self)

    def FrameTagSet(self, fromFrameTagTx):
        return _byteblower.LatencyDistribution_FrameTagSet(self, fromFrameTagTx)
LatencyDistribution_swigregister = _byteblower.LatencyDistribution_swigregister
LatencyDistribution_swigregister(LatencyDistribution)

class ServiceInfo(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ServiceInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ServiceInfo, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def TypeGet(self):
        return _byteblower.ServiceInfo_TypeGet(self)

    def SeriesGet(self):
        return _byteblower.ServiceInfo_SeriesGet(self)

    def VersionGet(self):
        return _byteblower.ServiceInfo_VersionGet(self)

    def MachineIDGet(self):
        return _byteblower.ServiceInfo_MachineIDGet(self)

    def ServiceIDGet(self):
        return _byteblower.ServiceInfo_ServiceIDGet(self)
ServiceInfo_swigregister = _byteblower.ServiceInfo_swigregister
ServiceInfo_swigregister(ServiceInfo)

class PacketDump(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PacketDump, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PacketDump, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ServerGet(self):
        return _byteblower.PacketDump_ServerGet(self)

    def Start(self, filename):
        return _byteblower.PacketDump_Start(self, filename)

    def Stop(self):
        return _byteblower.PacketDump_Stop(self)

    def FilterGet(self):
        return _byteblower.PacketDump_FilterGet(self)

    def FilterSet(self, value):
        return _byteblower.PacketDump_FilterSet(self, value)

    def SnapshotLengthGet(self):
        return _byteblower.PacketDump_SnapshotLengthGet(self)

    def SnapshotLengthSet(self, value):
        return _byteblower.PacketDump_SnapshotLengthSet(self, value)

    def FileNameGet(self):
        return _byteblower.PacketDump_FileNameGet(self)

    def FileSizeGet(self):
        return _byteblower.PacketDump_FileSizeGet(self)
PacketDump_swigregister = _byteblower.PacketDump_swigregister
PacketDump_swigregister(PacketDump)

class ByteBlowerPort(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteBlowerPort, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ByteBlowerPort, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetByteBlowerInterface(self):
        return _byteblower.ByteBlowerPort_GetByteBlowerInterface(self)

    def ServerGet(self):
        return _byteblower.ByteBlowerPort_ServerGet(self)

    def InterfaceNameGet(self):
        return _byteblower.ByteBlowerPort_InterfaceNameGet(self)

    def InterfaceSpeedGet(self):
        return _byteblower.ByteBlowerPort_InterfaceSpeedGet(self)

    def InterfaceGet(self):
        return _byteblower.ByteBlowerPort_InterfaceGet(self)

    def MDLMaximumGet(self):
        return _byteblower.ByteBlowerPort_MDLMaximumGet(self)

    def MDLGet(self):
        return _byteblower.ByteBlowerPort_MDLGet(self)

    def MDLSet(self, mdl):
        return _byteblower.ByteBlowerPort_MDLSet(self, mdl)

    def CapabilityListGet(self):
        return _byteblower.ByteBlowerPort_CapabilityListGet(self)

    def CapabilityGetByName(self, name):
        return _byteblower.ByteBlowerPort_CapabilityGetByName(self, name)

    def CapabilityIsSupported(self, name):
        return _byteblower.ByteBlowerPort_CapabilityIsSupported(self, name)

    def Layer2EthIISet(self):
        return _byteblower.ByteBlowerPort_Layer2EthIISet(self)

    def Layer2EthIIGet(self):
        return _byteblower.ByteBlowerPort_Layer2EthIIGet(self)

    def Layer25VlanAdd(self):
        return _byteblower.ByteBlowerPort_Layer25VlanAdd(self)

    def Layer25VlanGet(self):
        return _byteblower.ByteBlowerPort_Layer25VlanGet(self)

    def Layer25VlanRemove(self, inVlanTag):
        return _byteblower.ByteBlowerPort_Layer25VlanRemove(self, inVlanTag)

    def Layer25PPPoEAdd(self):
        return _byteblower.ByteBlowerPort_Layer25PPPoEAdd(self)

    def Layer25PPPoEGet(self):
        return _byteblower.ByteBlowerPort_Layer25PPPoEGet(self)

    def Layer25PPPoERemove(self, inPPPoEClient):
        return _byteblower.ByteBlowerPort_Layer25PPPoERemove(self, inPPPoEClient)

    def Layer3IPv4Set(self):
        return _byteblower.ByteBlowerPort_Layer3IPv4Set(self)

    def Layer3IPv4Get(self):
        return _byteblower.ByteBlowerPort_Layer3IPv4Get(self)

    def Layer3IPv6Set(self):
        return _byteblower.ByteBlowerPort_Layer3IPv6Set(self)

    def Layer3IPv6Get(self):
        return _byteblower.ByteBlowerPort_Layer3IPv6Get(self)

    def ProtocolHttpServerAdd(self):
        return _byteblower.ByteBlowerPort_ProtocolHttpServerAdd(self)

    def ProtocolHttpServerGet(self):
        return _byteblower.ByteBlowerPort_ProtocolHttpServerGet(self)

    def ProtocolHttpServerRemove(self, arg2):
        return _byteblower.ByteBlowerPort_ProtocolHttpServerRemove(self, arg2)

    def ProtocolHttpClientAdd(self):
        return _byteblower.ByteBlowerPort_ProtocolHttpClientAdd(self)

    def ProtocolHttpClientGet(self):
        return _byteblower.ByteBlowerPort_ProtocolHttpClientGet(self)

    def ProtocolHttpClientRemove(self, arg2):
        return _byteblower.ByteBlowerPort_ProtocolHttpClientRemove(self, arg2)

    def ProtocolHttpMultiServerAdd(self):
        return _byteblower.ByteBlowerPort_ProtocolHttpMultiServerAdd(self)

    def ProtocolHttpMultiServerGet(self):
        return _byteblower.ByteBlowerPort_ProtocolHttpMultiServerGet(self)

    def ProtocolHttpMultiServerRemove(self, arg2):
        return _byteblower.ByteBlowerPort_ProtocolHttpMultiServerRemove(self, arg2)

    def ProtocolHttpMultiClientAdd(self):
        return _byteblower.ByteBlowerPort_ProtocolHttpMultiClientAdd(self)

    def ProtocolHttpMultiClientGet(self):
        return _byteblower.ByteBlowerPort_ProtocolHttpMultiClientGet(self)

    def ProtocolHttpMultiClientRemove(self, arg2):
        return _byteblower.ByteBlowerPort_ProtocolHttpMultiClientRemove(self, arg2)

    def TunnelTcpAdd(self):
        return _byteblower.ByteBlowerPort_TunnelTcpAdd(self)

    def TunnelTcpGet(self):
        return _byteblower.ByteBlowerPort_TunnelTcpGet(self)

    def TunnelTcpRemove(self, arg2):
        return _byteblower.ByteBlowerPort_TunnelTcpRemove(self, arg2)

    def ProtocolTelnetClientAdd(self):
        return _byteblower.ByteBlowerPort_ProtocolTelnetClientAdd(self)

    def ProtocolTelnetClientGet(self):
        return _byteblower.ByteBlowerPort_ProtocolTelnetClientGet(self)

    def ProtocolTelnetClientRemove(self, arg2):
        return _byteblower.ByteBlowerPort_ProtocolTelnetClientRemove(self, arg2)

    def TxStreamAdd(self):
        return _byteblower.ByteBlowerPort_TxStreamAdd(self)

    def TxStreamRemove(self, inStream):
        return _byteblower.ByteBlowerPort_TxStreamRemove(self, inStream)

    def TxStreamGet(self):
        return _byteblower.ByteBlowerPort_TxStreamGet(self)

    def RxTriggerBasicAdd(self):
        return _byteblower.ByteBlowerPort_RxTriggerBasicAdd(self)

    def RxTriggerBasicGet(self):
        return _byteblower.ByteBlowerPort_RxTriggerBasicGet(self)

    def RxTriggerBasicRemove(self, arg2):
        return _byteblower.ByteBlowerPort_RxTriggerBasicRemove(self, arg2)

    def RxTriggerSizeDistributionAdd(self):
        return _byteblower.ByteBlowerPort_RxTriggerSizeDistributionAdd(self)

    def RxTriggerSizeDistributionGet(self):
        return _byteblower.ByteBlowerPort_RxTriggerSizeDistributionGet(self)

    def RxTriggerSizeDistributionRemove(self, arg2):
        return _byteblower.ByteBlowerPort_RxTriggerSizeDistributionRemove(self, arg2)

    def RxLatencyBasicAdd(self):
        return _byteblower.ByteBlowerPort_RxLatencyBasicAdd(self)

    def RxLatencyBasicRemove(self, inLatency):
        return _byteblower.ByteBlowerPort_RxLatencyBasicRemove(self, inLatency)

    def RxLatencyBasicGet(self):
        return _byteblower.ByteBlowerPort_RxLatencyBasicGet(self)

    def RxLatencyDistributionAdd(self):
        return _byteblower.ByteBlowerPort_RxLatencyDistributionAdd(self)

    def RxLatencyDistributionRemove(self, inLatency):
        return _byteblower.ByteBlowerPort_RxLatencyDistributionRemove(self, inLatency)

    def RxLatencyDistributionGet(self):
        return _byteblower.ByteBlowerPort_RxLatencyDistributionGet(self)

    def RxOutOfSequenceBasicAdd(self):
        return _byteblower.ByteBlowerPort_RxOutOfSequenceBasicAdd(self)

    def RxOutOfSequenceBasicRemove(self, inOutOfSequence):
        return _byteblower.ByteBlowerPort_RxOutOfSequenceBasicRemove(self, inOutOfSequence)

    def RxOutOfSequenceBasicGet(self):
        return _byteblower.ByteBlowerPort_RxOutOfSequenceBasicGet(self)

    def Start(self):
        return _byteblower.ByteBlowerPort_Start(self)

    def Stop(self):
        return _byteblower.ByteBlowerPort_Stop(self)

    def ResultGet(self):
        return _byteblower.ByteBlowerPort_ResultGet(self)

    def ResultHistoryGet(self):
        return _byteblower.ByteBlowerPort_ResultHistoryGet(self)

    def ResultClear(self):
        return _byteblower.ByteBlowerPort_ResultClear(self)

    def RxCaptureBasicAdd(self):
        return _byteblower.ByteBlowerPort_RxCaptureBasicAdd(self)

    def RxCaptureBasicRemove(self, inCapture):
        return _byteblower.ByteBlowerPort_RxCaptureBasicRemove(self, inCapture)

    def RxCaptureBasicGet(self):
        return _byteblower.ByteBlowerPort_RxCaptureBasicGet(self)
ByteBlowerPort_swigregister = _byteblower.ByteBlowerPort_swigregister
ByteBlowerPort_swigregister(ByteBlowerPort)

class ByteBlowerPortResultRxData(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteBlowerPortResultRxData, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ByteBlowerPortResultRxData, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    CounterType_RxBroadcast = _byteblower.ByteBlowerPortResultRxData_CounterType_RxBroadcast
    CounterType_RxUnicast = _byteblower.ByteBlowerPortResultRxData_CounterType_RxUnicast
    CounterType_RxAll = _byteblower.ByteBlowerPortResultRxData_CounterType_RxAll

    def TimestampFirstGet(self):
        return _byteblower.ByteBlowerPortResultRxData_TimestampFirstGet(self)

    def TimestampLastGet(self):
        return _byteblower.ByteBlowerPortResultRxData_TimestampLastGet(self)

    def TimestampGet(self):
        return _byteblower.ByteBlowerPortResultRxData_TimestampGet(self)

    def PacketCountGet(self):
        return _byteblower.ByteBlowerPortResultRxData_PacketCountGet(self)

    def ByteCountGet(self):
        return _byteblower.ByteBlowerPortResultRxData_ByteCountGet(self)

    def ByteCountWithCRCGet(self):
        return _byteblower.ByteBlowerPortResultRxData_ByteCountWithCRCGet(self)

    def FramesizeMinimumGet(self):
        return _byteblower.ByteBlowerPortResultRxData_FramesizeMinimumGet(self)

    def FramesizeMaximumGet(self):
        return _byteblower.ByteBlowerPortResultRxData_FramesizeMaximumGet(self)

    def IntervalDurationGet(self):
        return _byteblower.ByteBlowerPortResultRxData_IntervalDurationGet(self)
ByteBlowerPortResultRxData_swigregister = _byteblower.ByteBlowerPortResultRxData_swigregister
ByteBlowerPortResultRxData_swigregister(ByteBlowerPortResultRxData)


def ConvertCounterType(inType):
    return _byteblower.ConvertCounterType(inType)
ConvertCounterType = _byteblower.ConvertCounterType
class ByteBlowerPortResultData(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteBlowerPortResultData, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ByteBlowerPortResultData, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def RxUnicastGet(self):
        return _byteblower.ByteBlowerPortResultData_RxUnicastGet(self)

    def RxBroadcastGet(self):
        return _byteblower.ByteBlowerPortResultData_RxBroadcastGet(self)

    def RxAllGet(self):
        return _byteblower.ByteBlowerPortResultData_RxAllGet(self)

    def TimestampGet(self):
        return _byteblower.ByteBlowerPortResultData_TimestampGet(self)

    def IntervalDurationGet(self):
        return _byteblower.ByteBlowerPortResultData_IntervalDurationGet(self)
ByteBlowerPortResultData_swigregister = _byteblower.ByteBlowerPortResultData_swigregister
ByteBlowerPortResultData_swigregister(ByteBlowerPortResultData)

class ByteBlowerPortResultSnapshot(AbstractRefreshableResult):
    __swig_setmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteBlowerPortResultSnapshot, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ByteBlowerPortResultSnapshot, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Clear(self):
        return _byteblower.ByteBlowerPortResultSnapshot_Clear(self)

    def RxUnicastGet(self):
        return _byteblower.ByteBlowerPortResultSnapshot_RxUnicastGet(self)

    def RxBroadcastGet(self):
        return _byteblower.ByteBlowerPortResultSnapshot_RxBroadcastGet(self)

    def RxAllGet(self):
        return _byteblower.ByteBlowerPortResultSnapshot_RxAllGet(self)

    def TimestampGet(self):
        return _byteblower.ByteBlowerPortResultSnapshot_TimestampGet(self)

    def IntervalDurationGet(self):
        return _byteblower.ByteBlowerPortResultSnapshot_IntervalDurationGet(self)

    def RefreshTimestampGet(self):
        return _byteblower.ByteBlowerPortResultSnapshot_RefreshTimestampGet(self)

    def RefreshImpl(self):
        return _byteblower.ByteBlowerPortResultSnapshot_RefreshImpl(self)
ByteBlowerPortResultSnapshot_swigregister = _byteblower.ByteBlowerPortResultSnapshot_swigregister
ByteBlowerPortResultSnapshot_swigregister(ByteBlowerPortResultSnapshot)

class ByteBlowerPortResultDataList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteBlowerPortResultDataList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ByteBlowerPortResultDataList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.ByteBlowerPortResultDataList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.ByteBlowerPortResultDataList___nonzero__(self)

    def __bool__(self):
        return _byteblower.ByteBlowerPortResultDataList___bool__(self)

    def __len__(self):
        return _byteblower.ByteBlowerPortResultDataList___len__(self)

    def pop(self):
        return _byteblower.ByteBlowerPortResultDataList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.ByteBlowerPortResultDataList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.ByteBlowerPortResultDataList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.ByteBlowerPortResultDataList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.ByteBlowerPortResultDataList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.ByteBlowerPortResultDataList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.ByteBlowerPortResultDataList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.ByteBlowerPortResultDataList_append(self, x)

    def empty(self):
        return _byteblower.ByteBlowerPortResultDataList_empty(self)

    def size(self):
        return _byteblower.ByteBlowerPortResultDataList_size(self)

    def clear(self):
        return _byteblower.ByteBlowerPortResultDataList_clear(self)

    def swap(self, v):
        return _byteblower.ByteBlowerPortResultDataList_swap(self, v)

    def get_allocator(self):
        return _byteblower.ByteBlowerPortResultDataList_get_allocator(self)

    def begin(self):
        return _byteblower.ByteBlowerPortResultDataList_begin(self)

    def end(self):
        return _byteblower.ByteBlowerPortResultDataList_end(self)

    def rbegin(self):
        return _byteblower.ByteBlowerPortResultDataList_rbegin(self)

    def rend(self):
        return _byteblower.ByteBlowerPortResultDataList_rend(self)

    def pop_back(self):
        return _byteblower.ByteBlowerPortResultDataList_pop_back(self)

    def erase(self, *args):
        return _byteblower.ByteBlowerPortResultDataList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_ByteBlowerPortResultDataList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.ByteBlowerPortResultDataList_push_back(self, x)

    def front(self):
        return _byteblower.ByteBlowerPortResultDataList_front(self)

    def back(self):
        return _byteblower.ByteBlowerPortResultDataList_back(self)

    def assign(self, n, x):
        return _byteblower.ByteBlowerPortResultDataList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.ByteBlowerPortResultDataList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.ByteBlowerPortResultDataList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.ByteBlowerPortResultDataList_reserve(self, n)

    def capacity(self):
        return _byteblower.ByteBlowerPortResultDataList_capacity(self)
    __swig_destroy__ = _byteblower.delete_ByteBlowerPortResultDataList
    __del__ = lambda self: None
ByteBlowerPortResultDataList_swigregister = _byteblower.ByteBlowerPortResultDataList_swigregister
ByteBlowerPortResultDataList_swigregister(ByteBlowerPortResultDataList)

class ByteBlowerPortResultHistory(AbstractRefreshableResult):
    __swig_setmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteBlowerPortResultHistory, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractRefreshableResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ByteBlowerPortResultHistory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Clear(self):
        return _byteblower.ByteBlowerPortResultHistory_Clear(self)

    def SamplingIntervalDurationGet(self):
        return _byteblower.ByteBlowerPortResultHistory_SamplingIntervalDurationGet(self)

    def SamplingIntervalDurationSet(self, inDuration):
        return _byteblower.ByteBlowerPortResultHistory_SamplingIntervalDurationSet(self, inDuration)

    def SamplingBufferLengthGet(self):
        return _byteblower.ByteBlowerPortResultHistory_SamplingBufferLengthGet(self)

    def SamplingBufferLengthSet(self, inCount):
        return _byteblower.ByteBlowerPortResultHistory_SamplingBufferLengthSet(self, inCount)

    def CumulativeGet(self):
        return _byteblower.ByteBlowerPortResultHistory_CumulativeGet(self)

    def IntervalGet(self):
        return _byteblower.ByteBlowerPortResultHistory_IntervalGet(self)

    def CumulativeGetByIndex(self, index):
        return _byteblower.ByteBlowerPortResultHistory_CumulativeGetByIndex(self, index)

    def IntervalGetByIndex(self, index):
        return _byteblower.ByteBlowerPortResultHistory_IntervalGetByIndex(self, index)

    def CumulativeGetByTime(self, timestamp):
        return _byteblower.ByteBlowerPortResultHistory_CumulativeGetByTime(self, timestamp)

    def IntervalGetByTime(self, timestamp):
        return _byteblower.ByteBlowerPortResultHistory_IntervalGetByTime(self, timestamp)

    def CumulativeLatestGet(self):
        return _byteblower.ByteBlowerPortResultHistory_CumulativeLatestGet(self)

    def IntervalLatestGet(self):
        return _byteblower.ByteBlowerPortResultHistory_IntervalLatestGet(self)

    def CumulativeLengthGet(self):
        return _byteblower.ByteBlowerPortResultHistory_CumulativeLengthGet(self)

    def IntervalLengthGet(self):
        return _byteblower.ByteBlowerPortResultHistory_IntervalLengthGet(self)

    def RefreshTimestampGet(self):
        return _byteblower.ByteBlowerPortResultHistory_RefreshTimestampGet(self)
ByteBlowerPortResultHistory_swigregister = _byteblower.ByteBlowerPortResultHistory_swigregister
ByteBlowerPortResultHistory_swigregister(ByteBlowerPortResultHistory)

class ByteBlowerServer(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteBlowerServer, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ByteBlowerServer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def PhysicalInterfacesGet(self):
        return _byteblower.ByteBlowerServer_PhysicalInterfacesGet(self)

    def PhysicalInterfacesGetByType(self, inPhysicalInterfaceType):
        return _byteblower.ByteBlowerServer_PhysicalInterfacesGetByType(self, inPhysicalInterfaceType)

    def InterfaceGetByName(self, name):
        return _byteblower.ByteBlowerServer_InterfaceGetByName(self, name)

    def InterfaceNamesGet(self):
        return _byteblower.ByteBlowerServer_InterfaceNamesGet(self)

    def PacketDumpCreate(self, *args):
        return _byteblower.ByteBlowerServer_PacketDumpCreate(self, *args)

    def PacketDumpDestroy(self, packet_dump):
        return _byteblower.ByteBlowerServer_PacketDumpDestroy(self, packet_dump)

    def PortCreate(self, *args):
        return _byteblower.ByteBlowerServer_PortCreate(self, *args)

    def PortDestroy(self, inPort):
        return _byteblower.ByteBlowerServer_PortDestroy(self, inPort)

    def PortGet(self):
        return _byteblower.ByteBlowerServer_PortGet(self)

    def UsersGet(self):
        return _byteblower.ByteBlowerServer_UsersGet(self)

    def Update(self):
        return _byteblower.ByteBlowerServer_Update(self)

    def TimestampGet(self):
        return _byteblower.ByteBlowerServer_TimestampGet(self)

    def PortsStart(self, inPorts):
        return _byteblower.ByteBlowerServer_PortsStart(self, inPorts)

    def PortsStop(self, inPorts):
        return _byteblower.ByteBlowerServer_PortsStop(self, inPorts)

    def PortsStartAll(self):
        return _byteblower.ByteBlowerServer_PortsStartAll(self)

    def PortsStopAll(self):
        return _byteblower.ByteBlowerServer_PortsStopAll(self)

    def ServiceInfoGet(self):
        return _byteblower.ByteBlowerServer_ServiceInfoGet(self)

    def ResultsRefreshAll(self):
        return _byteblower.ByteBlowerServer_ResultsRefreshAll(self)
ByteBlowerServer_swigregister = _byteblower.ByteBlowerServer_swigregister
ByteBlowerServer_swigregister(ByteBlowerServer)

class ByteBlowerServerServiceInfo(ServiceInfo):
    __swig_setmethods__ = {}
    for _s in [ServiceInfo]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteBlowerServerServiceInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [ServiceInfo]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ByteBlowerServerServiceInfo, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def LicenseGet(self):
        return _byteblower.ByteBlowerServerServiceInfo_LicenseGet(self)

    def ManagementIPAddressGet(self):
        return _byteblower.ByteBlowerServerServiceInfo_ManagementIPAddressGet(self)

    def ConnectionHostGet(self):
        return _byteblower.ByteBlowerServerServiceInfo_ConnectionHostGet(self)

    def ConnectionIPAddressGet(self):
        return _byteblower.ByteBlowerServerServiceInfo_ConnectionIPAddressGet(self)

    def ConnectionPortNumberGet(self):
        return _byteblower.ByteBlowerServerServiceInfo_ConnectionPortNumberGet(self)
ByteBlowerServerServiceInfo_swigregister = _byteblower.ByteBlowerServerServiceInfo_swigregister
ByteBlowerServerServiceInfo_swigregister(ByteBlowerServerServiceInfo)

class ByteBlowerLicense(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteBlowerLicense, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ByteBlowerLicense, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def VersionGet(self):
        return _byteblower.ByteBlowerLicense_VersionGet(self)

    def SerialGet(self):
        return _byteblower.ByteBlowerLicense_SerialGet(self)

    def NumberOfNonTrunksGet(self):
        return _byteblower.ByteBlowerLicense_NumberOfNonTrunksGet(self)

    def NumberOfTrunksGet(self):
        return _byteblower.ByteBlowerLicense_NumberOfTrunksGet(self)

    def NumberOfTrunkPortsGet(self, index):
        return _byteblower.ByteBlowerLicense_NumberOfTrunkPortsGet(self, index)

    def TimeConsumedGet(self):
        return _byteblower.ByteBlowerLicense_TimeConsumedGet(self)

    def TimeAllowedGet(self):
        return _byteblower.ByteBlowerLicense_TimeAllowedGet(self)
ByteBlowerLicense_swigregister = _byteblower.ByteBlowerLicense_swigregister
ByteBlowerLicense_swigregister(ByteBlowerLicense)

class GroupSchedulableObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroupSchedulableObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GroupSchedulableObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _byteblower.delete_GroupSchedulableObject
    __del__ = lambda self: None

    def SetScheduleGroup(self, group):
        return _byteblower.GroupSchedulableObject_SetScheduleGroup(self, group)

    def UnsetScheduleGroup(self):
        return _byteblower.GroupSchedulableObject_UnsetScheduleGroup(self)
GroupSchedulableObject_swigregister = _byteblower.GroupSchedulableObject_swigregister
GroupSchedulableObject_swigregister(GroupSchedulableObject)

class AbstractObjectList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractObjectList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractObjectList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.AbstractObjectList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.AbstractObjectList___nonzero__(self)

    def __bool__(self):
        return _byteblower.AbstractObjectList___bool__(self)

    def __len__(self):
        return _byteblower.AbstractObjectList___len__(self)

    def pop(self):
        return _byteblower.AbstractObjectList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.AbstractObjectList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.AbstractObjectList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.AbstractObjectList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.AbstractObjectList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.AbstractObjectList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.AbstractObjectList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.AbstractObjectList_append(self, x)

    def empty(self):
        return _byteblower.AbstractObjectList_empty(self)

    def size(self):
        return _byteblower.AbstractObjectList_size(self)

    def clear(self):
        return _byteblower.AbstractObjectList_clear(self)

    def swap(self, v):
        return _byteblower.AbstractObjectList_swap(self, v)

    def get_allocator(self):
        return _byteblower.AbstractObjectList_get_allocator(self)

    def begin(self):
        return _byteblower.AbstractObjectList_begin(self)

    def end(self):
        return _byteblower.AbstractObjectList_end(self)

    def rbegin(self):
        return _byteblower.AbstractObjectList_rbegin(self)

    def rend(self):
        return _byteblower.AbstractObjectList_rend(self)

    def pop_back(self):
        return _byteblower.AbstractObjectList_pop_back(self)

    def erase(self, *args):
        return _byteblower.AbstractObjectList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_AbstractObjectList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.AbstractObjectList_push_back(self, x)

    def front(self):
        return _byteblower.AbstractObjectList_front(self)

    def back(self):
        return _byteblower.AbstractObjectList_back(self)

    def assign(self, n, x):
        return _byteblower.AbstractObjectList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.AbstractObjectList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.AbstractObjectList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.AbstractObjectList_reserve(self, n)

    def capacity(self):
        return _byteblower.AbstractObjectList_capacity(self)
    __swig_destroy__ = _byteblower.delete_AbstractObjectList
    __del__ = lambda self: None
AbstractObjectList_swigregister = _byteblower.AbstractObjectList_swigregister
AbstractObjectList_swigregister(AbstractObjectList)


_byteblower.ScheduleGroupStatus_Configuration_swigconstant(_byteblower)
ScheduleGroupStatus_Configuration = _byteblower.ScheduleGroupStatus_Configuration

_byteblower.ScheduleGroupStatus_Prepared_swigconstant(_byteblower)
ScheduleGroupStatus_Prepared = _byteblower.ScheduleGroupStatus_Prepared

_byteblower.ScheduleGroupStatus_Started_swigconstant(_byteblower)
ScheduleGroupStatus_Started = _byteblower.ScheduleGroupStatus_Started

_byteblower.ScheduleGroupStatus_Stopped_swigconstant(_byteblower)
ScheduleGroupStatus_Stopped = _byteblower.ScheduleGroupStatus_Stopped

_byteblower.ScheduleGroupStatus_Error_swigconstant(_byteblower)
ScheduleGroupStatus_Error = _byteblower.ScheduleGroupStatus_Error
class ScheduleGroup(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleGroup, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def MembersGet(self):
        return _byteblower.ScheduleGroup_MembersGet(self)

    def MembersLengthGet(self):
        return _byteblower.ScheduleGroup_MembersLengthGet(self)

    def MembersAdd(self, *args):
        return _byteblower.ScheduleGroup_MembersAdd(self, *args)

    def MembersRemove(self, *args):
        return _byteblower.ScheduleGroup_MembersRemove(self, *args)

    def MembersClear(self):
        return _byteblower.ScheduleGroup_MembersClear(self)

    def Prepare(self):
        return _byteblower.ScheduleGroup_Prepare(self)

    def Start(self):
        return _byteblower.ScheduleGroup_Start(self)

    def Stop(self):
        return _byteblower.ScheduleGroup_Stop(self)

    def StatusGet(self):
        return _byteblower.ScheduleGroup_StatusGet(self)
ScheduleGroup_swigregister = _byteblower.ScheduleGroup_swigregister
ScheduleGroup_swigregister(ScheduleGroup)


def ConvertScheduleGroupStatusToString(inStatus):
    return _byteblower.ConvertScheduleGroupStatusToString(inStatus)
ConvertScheduleGroupStatusToString = _byteblower.ConvertScheduleGroupStatusToString
class ScheduleGroupList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleGroupList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleGroupList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.ScheduleGroupList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.ScheduleGroupList___nonzero__(self)

    def __bool__(self):
        return _byteblower.ScheduleGroupList___bool__(self)

    def __len__(self):
        return _byteblower.ScheduleGroupList___len__(self)

    def pop(self):
        return _byteblower.ScheduleGroupList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.ScheduleGroupList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.ScheduleGroupList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.ScheduleGroupList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.ScheduleGroupList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.ScheduleGroupList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.ScheduleGroupList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.ScheduleGroupList_append(self, x)

    def empty(self):
        return _byteblower.ScheduleGroupList_empty(self)

    def size(self):
        return _byteblower.ScheduleGroupList_size(self)

    def clear(self):
        return _byteblower.ScheduleGroupList_clear(self)

    def swap(self, v):
        return _byteblower.ScheduleGroupList_swap(self, v)

    def get_allocator(self):
        return _byteblower.ScheduleGroupList_get_allocator(self)

    def begin(self):
        return _byteblower.ScheduleGroupList_begin(self)

    def end(self):
        return _byteblower.ScheduleGroupList_end(self)

    def rbegin(self):
        return _byteblower.ScheduleGroupList_rbegin(self)

    def rend(self):
        return _byteblower.ScheduleGroupList_rend(self)

    def pop_back(self):
        return _byteblower.ScheduleGroupList_pop_back(self)

    def erase(self, *args):
        return _byteblower.ScheduleGroupList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_ScheduleGroupList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.ScheduleGroupList_push_back(self, x)

    def front(self):
        return _byteblower.ScheduleGroupList_front(self)

    def back(self):
        return _byteblower.ScheduleGroupList_back(self)

    def assign(self, n, x):
        return _byteblower.ScheduleGroupList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.ScheduleGroupList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.ScheduleGroupList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.ScheduleGroupList_reserve(self, n)

    def capacity(self):
        return _byteblower.ScheduleGroupList_capacity(self)
    __swig_destroy__ = _byteblower.delete_ScheduleGroupList
    __del__ = lambda self: None
ScheduleGroupList_swigregister = _byteblower.ScheduleGroupList_swigregister
ScheduleGroupList_swigregister(ScheduleGroupList)

class MeetingPoint(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeetingPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MeetingPoint, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def DeviceListLengthGet(self):
        return _byteblower.MeetingPoint_DeviceListLengthGet(self)

    def DeviceGet(self, mobileDeviceId):
        return _byteblower.MeetingPoint_DeviceGet(self, mobileDeviceId)

    def DeviceListGet(self):
        return _byteblower.MeetingPoint_DeviceListGet(self)

    def DeviceDestroy(self, device):
        return _byteblower.MeetingPoint_DeviceDestroy(self, device)

    def DeviceIdentifiersGet(self):
        return _byteblower.MeetingPoint_DeviceIdentifiersGet(self)

    def TimestampGet(self):
        return _byteblower.MeetingPoint_TimestampGet(self)

    def ServiceInfoGet(self):
        return _byteblower.MeetingPoint_ServiceInfoGet(self)

    def UsersGet(self):
        return _byteblower.MeetingPoint_UsersGet(self)

    def DevicesStart(self, inDevices):
        return _byteblower.MeetingPoint_DevicesStart(self, inDevices)

    def DevicesPrepare(self, inDevices):
        return _byteblower.MeetingPoint_DevicesPrepare(self, inDevices)

    def DevicesPrepareAsync(self, inDevices):
        return _byteblower.MeetingPoint_DevicesPrepareAsync(self, inDevices)

    def DevicesStartAll(self):
        return _byteblower.MeetingPoint_DevicesStartAll(self)
MeetingPoint_swigregister = _byteblower.MeetingPoint_swigregister
MeetingPoint_swigregister(MeetingPoint)

class MeetingPointServiceInfo(ServiceInfo):
    __swig_setmethods__ = {}
    for _s in [ServiceInfo]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeetingPointServiceInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [ServiceInfo]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MeetingPointServiceInfo, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def LicenseGet(self):
        return _byteblower.MeetingPointServiceInfo_LicenseGet(self)

    def ManagementIPAddressGet(self):
        return _byteblower.MeetingPointServiceInfo_ManagementIPAddressGet(self)

    def ConnectionHostGet(self):
        return _byteblower.MeetingPointServiceInfo_ConnectionHostGet(self)

    def ConnectionIPAddressGet(self):
        return _byteblower.MeetingPointServiceInfo_ConnectionIPAddressGet(self)

    def ConnectionPortNumberGet(self):
        return _byteblower.MeetingPointServiceInfo_ConnectionPortNumberGet(self)
MeetingPointServiceInfo_swigregister = _byteblower.MeetingPointServiceInfo_swigregister
MeetingPointServiceInfo_swigregister(MeetingPointServiceInfo)

class MeetingPointLicense(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeetingPointLicense, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MeetingPointLicense, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def VersionGet(self):
        return _byteblower.MeetingPointLicense_VersionGet(self)

    def SerialGet(self):
        return _byteblower.MeetingPointLicense_SerialGet(self)

    def NumberOfWirelessEndpointsGet(self):
        return _byteblower.MeetingPointLicense_NumberOfWirelessEndpointsGet(self)

    def TimeConsumedGet(self):
        return _byteblower.MeetingPointLicense_TimeConsumedGet(self)

    def TimeAllowedGet(self):
        return _byteblower.MeetingPointLicense_TimeAllowedGet(self)
MeetingPointLicense_swigregister = _byteblower.MeetingPointLicense_swigregister
MeetingPointLicense_swigregister(MeetingPointLicense)


_byteblower.LogLevel_Debug_swigconstant(_byteblower)
LogLevel_Debug = _byteblower.LogLevel_Debug

_byteblower.LogLevel_Info_swigconstant(_byteblower)
LogLevel_Info = _byteblower.LogLevel_Info

_byteblower.LogLevel_Warning_swigconstant(_byteblower)
LogLevel_Warning = _byteblower.LogLevel_Warning

_byteblower.LogLevel_Error_swigconstant(_byteblower)
LogLevel_Error = _byteblower.LogLevel_Error

_byteblower.LogLevel_Critical_swigconstant(_byteblower)
LogLevel_Critical = _byteblower.LogLevel_Critical

_byteblower.DeviceStatus_Unavailable_swigconstant(_byteblower)
DeviceStatus_Unavailable = _byteblower.DeviceStatus_Unavailable

_byteblower.DeviceStatus_Available_swigconstant(_byteblower)
DeviceStatus_Available = _byteblower.DeviceStatus_Available

_byteblower.DeviceStatus_Reserved_swigconstant(_byteblower)
DeviceStatus_Reserved = _byteblower.DeviceStatus_Reserved

_byteblower.DeviceStatus_Starting_swigconstant(_byteblower)
DeviceStatus_Starting = _byteblower.DeviceStatus_Starting

_byteblower.DeviceStatus_Running_swigconstant(_byteblower)
DeviceStatus_Running = _byteblower.DeviceStatus_Running

def ConvertLogLevelFromString(inLevel):
    return _byteblower.ConvertLogLevelFromString(inLevel)
ConvertLogLevelFromString = _byteblower.ConvertLogLevelFromString

def ConvertToString(inLevel):
    return _byteblower.ConvertToString(inLevel)
ConvertToString = _byteblower.ConvertToString
class WirelessEndpoint(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WirelessEndpoint, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WirelessEndpoint, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def MeetingPointGet(self):
        return _byteblower.WirelessEndpoint_MeetingPointGet(self)

    def AppVersionGet(self):
        return _byteblower.WirelessEndpoint_AppVersionGet(self)

    def DeviceIdentifierGet(self):
        return _byteblower.WirelessEndpoint_DeviceIdentifierGet(self)

    def CapabilityListGet(self):
        return _byteblower.WirelessEndpoint_CapabilityListGet(self)

    def CapabilityGetByName(self, name):
        return _byteblower.WirelessEndpoint_CapabilityGetByName(self, name)

    def CapabilityIsSupported(self, name):
        return _byteblower.WirelessEndpoint_CapabilityIsSupported(self, name)

    def DeviceInfoGet(self):
        return _byteblower.WirelessEndpoint_DeviceInfoGet(self)

    def HeartbeatCountGet(self):
        return _byteblower.WirelessEndpoint_HeartbeatCountGet(self)

    def HeartbeatIntervalGet(self):
        return _byteblower.WirelessEndpoint_HeartbeatIntervalGet(self)

    def HeartbeatIntervalSet(self, arg2):
        return _byteblower.WirelessEndpoint_HeartbeatIntervalSet(self, arg2)

    def HeartbeatMaxFailcountGet(self):
        return _byteblower.WirelessEndpoint_HeartbeatMaxFailcountGet(self)

    def HeartbeatMaxFailcountSet(self, arg2):
        return _byteblower.WirelessEndpoint_HeartbeatMaxFailcountSet(self, arg2)

    def HeartbeatTimestampLastGet(self):
        return _byteblower.WirelessEndpoint_HeartbeatTimestampLastGet(self)

    def Lock(self, arg2):
        return _byteblower.WirelessEndpoint_Lock(self, arg2)

    def LockGet(self):
        return _byteblower.WirelessEndpoint_LockGet(self)

    def LockOwnerGet(self):
        return _byteblower.WirelessEndpoint_LockOwnerGet(self)

    def LockIsOwner(self):
        return _byteblower.WirelessEndpoint_LockIsOwner(self)

    def LockTry(self, lock, expected):
        return _byteblower.WirelessEndpoint_LockTry(self, lock, expected)

    def LogGet(self):
        return _byteblower.WirelessEndpoint_LogGet(self)

    def LogClear(self):
        return _byteblower.WirelessEndpoint_LogClear(self)

    def LogLevelGet(self):
        return _byteblower.WirelessEndpoint_LogLevelGet(self)

    def LogLevelSet(self, l):
        return _byteblower.WirelessEndpoint_LogLevelSet(self, l)

    def ProtocolHttpClientAdd(self):
        return _byteblower.WirelessEndpoint_ProtocolHttpClientAdd(self)

    def ProtocolHttpClientGet(self):
        return _byteblower.WirelessEndpoint_ProtocolHttpClientGet(self)

    def ProtocolHttpClientRemove(self, arg2):
        return _byteblower.WirelessEndpoint_ProtocolHttpClientRemove(self, arg2)

    def RxTriggerBasicAdd(self):
        return _byteblower.WirelessEndpoint_RxTriggerBasicAdd(self)

    def RxTriggerBasicGet(self):
        return _byteblower.WirelessEndpoint_RxTriggerBasicGet(self)

    def RxTriggerBasicRemove(self, arg2):
        return _byteblower.WirelessEndpoint_RxTriggerBasicRemove(self, arg2)

    def RxLatencyBasicAdd(self):
        return _byteblower.WirelessEndpoint_RxLatencyBasicAdd(self)

    def RxLatencyBasicGet(self):
        return _byteblower.WirelessEndpoint_RxLatencyBasicGet(self)

    def RxLatencyBasicRemove(self, arg2):
        return _byteblower.WirelessEndpoint_RxLatencyBasicRemove(self, arg2)

    def TxStreamAdd(self):
        return _byteblower.WirelessEndpoint_TxStreamAdd(self)

    def TxStreamGet(self):
        return _byteblower.WirelessEndpoint_TxStreamGet(self)

    def TxStreamRemove(self, arg2):
        return _byteblower.WirelessEndpoint_TxStreamRemove(self, arg2)

    def Prepare(self):
        return _byteblower.WirelessEndpoint_Prepare(self)

    def PrepareAsync(self):
        return _byteblower.WirelessEndpoint_PrepareAsync(self)

    def Start(self):
        return _byteblower.WirelessEndpoint_Start(self)

    def StartAsync(self):
        return _byteblower.WirelessEndpoint_StartAsync(self)

    def ResultGet(self):
        return _byteblower.WirelessEndpoint_ResultGet(self)

    def ResultAsyncGet(self):
        return _byteblower.WirelessEndpoint_ResultAsyncGet(self)

    def ResultClear(self):
        return _byteblower.WirelessEndpoint_ResultClear(self)

    def StatusGet(self):
        return _byteblower.WirelessEndpoint_StatusGet(self)

    def ScenarioDurationGet(self):
        return _byteblower.WirelessEndpoint_ScenarioDurationGet(self)

    def ScenarioDurationSet(self, arg2):
        return _byteblower.WirelessEndpoint_ScenarioDurationSet(self, arg2)
WirelessEndpoint_swigregister = _byteblower.WirelessEndpoint_swigregister
WirelessEndpoint_swigregister(WirelessEndpoint)

class MeetingPointList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeetingPointList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MeetingPointList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.MeetingPointList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.MeetingPointList___nonzero__(self)

    def __bool__(self):
        return _byteblower.MeetingPointList___bool__(self)

    def __len__(self):
        return _byteblower.MeetingPointList___len__(self)

    def pop(self):
        return _byteblower.MeetingPointList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.MeetingPointList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.MeetingPointList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.MeetingPointList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.MeetingPointList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.MeetingPointList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.MeetingPointList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.MeetingPointList_append(self, x)

    def empty(self):
        return _byteblower.MeetingPointList_empty(self)

    def size(self):
        return _byteblower.MeetingPointList_size(self)

    def clear(self):
        return _byteblower.MeetingPointList_clear(self)

    def swap(self, v):
        return _byteblower.MeetingPointList_swap(self, v)

    def get_allocator(self):
        return _byteblower.MeetingPointList_get_allocator(self)

    def begin(self):
        return _byteblower.MeetingPointList_begin(self)

    def end(self):
        return _byteblower.MeetingPointList_end(self)

    def rbegin(self):
        return _byteblower.MeetingPointList_rbegin(self)

    def rend(self):
        return _byteblower.MeetingPointList_rend(self)

    def pop_back(self):
        return _byteblower.MeetingPointList_pop_back(self)

    def erase(self, *args):
        return _byteblower.MeetingPointList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_MeetingPointList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.MeetingPointList_push_back(self, x)

    def front(self):
        return _byteblower.MeetingPointList_front(self)

    def back(self):
        return _byteblower.MeetingPointList_back(self)

    def assign(self, n, x):
        return _byteblower.MeetingPointList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.MeetingPointList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.MeetingPointList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.MeetingPointList_reserve(self, n)

    def capacity(self):
        return _byteblower.MeetingPointList_capacity(self)
    __swig_destroy__ = _byteblower.delete_MeetingPointList
    __del__ = lambda self: None
MeetingPointList_swigregister = _byteblower.MeetingPointList_swigregister
MeetingPointList_swigregister(MeetingPointList)

class WirelessEndpointList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WirelessEndpointList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WirelessEndpointList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.WirelessEndpointList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.WirelessEndpointList___nonzero__(self)

    def __bool__(self):
        return _byteblower.WirelessEndpointList___bool__(self)

    def __len__(self):
        return _byteblower.WirelessEndpointList___len__(self)

    def pop(self):
        return _byteblower.WirelessEndpointList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.WirelessEndpointList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.WirelessEndpointList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.WirelessEndpointList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.WirelessEndpointList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.WirelessEndpointList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.WirelessEndpointList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.WirelessEndpointList_append(self, x)

    def empty(self):
        return _byteblower.WirelessEndpointList_empty(self)

    def size(self):
        return _byteblower.WirelessEndpointList_size(self)

    def clear(self):
        return _byteblower.WirelessEndpointList_clear(self)

    def swap(self, v):
        return _byteblower.WirelessEndpointList_swap(self, v)

    def get_allocator(self):
        return _byteblower.WirelessEndpointList_get_allocator(self)

    def begin(self):
        return _byteblower.WirelessEndpointList_begin(self)

    def end(self):
        return _byteblower.WirelessEndpointList_end(self)

    def rbegin(self):
        return _byteblower.WirelessEndpointList_rbegin(self)

    def rend(self):
        return _byteblower.WirelessEndpointList_rend(self)

    def pop_back(self):
        return _byteblower.WirelessEndpointList_pop_back(self)

    def erase(self, *args):
        return _byteblower.WirelessEndpointList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_WirelessEndpointList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.WirelessEndpointList_push_back(self, x)

    def front(self):
        return _byteblower.WirelessEndpointList_front(self)

    def back(self):
        return _byteblower.WirelessEndpointList_back(self)

    def assign(self, n, x):
        return _byteblower.WirelessEndpointList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.WirelessEndpointList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.WirelessEndpointList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.WirelessEndpointList_reserve(self, n)

    def capacity(self):
        return _byteblower.WirelessEndpointList_capacity(self)
    __swig_destroy__ = _byteblower.delete_WirelessEndpointList
    __del__ = lambda self: None
WirelessEndpointList_swigregister = _byteblower.WirelessEndpointList_swigregister
WirelessEndpointList_swigregister(WirelessEndpointList)

class CapabilityValue(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CapabilityValue, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CapabilityValue, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Type_BOOLEAN = _byteblower.CapabilityValue_Type_BOOLEAN
    Type_INTEGER = _byteblower.CapabilityValue_Type_INTEGER
    Type_STRING = _byteblower.CapabilityValue_Type_STRING

    def StringGet(self):
        return _byteblower.CapabilityValue_StringGet(self)

    def IntegerGet(self):
        return _byteblower.CapabilityValue_IntegerGet(self)

    def BooleanGet(self):
        return _byteblower.CapabilityValue_BooleanGet(self)

    def TypeGet(self):
        return _byteblower.CapabilityValue_TypeGet(self)
CapabilityValue_swigregister = _byteblower.CapabilityValue_swigregister
CapabilityValue_swigregister(CapabilityValue)

class Capability(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Capability, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Capability, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _byteblower.delete_Capability
    __del__ = lambda self: None

    def NameGet(self):
        return _byteblower.Capability_NameGet(self)

    def CapabilityDescriptionGet(self):
        return _byteblower.Capability_CapabilityDescriptionGet(self)

    def VersionAddedGet(self):
        return _byteblower.Capability_VersionAddedGet(self)

    def ValueGet(self):
        return _byteblower.Capability_ValueGet(self)

    def Initialize(self):
        return _byteblower.Capability_Initialize(self)

    def Finalize(self):
        return _byteblower.Capability_Finalize(self)
Capability_swigregister = _byteblower.Capability_swigregister
Capability_swigregister(Capability)


_byteblower.DeviceOsType_Android_swigconstant(_byteblower)
DeviceOsType_Android = _byteblower.DeviceOsType_Android

_byteblower.DeviceOsType_iOS_swigconstant(_byteblower)
DeviceOsType_iOS = _byteblower.DeviceOsType_iOS

_byteblower.DeviceOsType_OSx_swigconstant(_byteblower)
DeviceOsType_OSx = _byteblower.DeviceOsType_OSx

_byteblower.DeviceOsType_Linux_swigconstant(_byteblower)
DeviceOsType_Linux = _byteblower.DeviceOsType_Linux

_byteblower.DeviceOsType_Windows_swigconstant(_byteblower)
DeviceOsType_Windows = _byteblower.DeviceOsType_Windows

_byteblower.DeviceOsType_Unknown_swigconstant(_byteblower)
DeviceOsType_Unknown = _byteblower.DeviceOsType_Unknown

def __lshift__(*args):
    return _byteblower.__lshift__(*args)
__lshift__ = _byteblower.__lshift__
class DeviceInfo(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceInfo, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def BatteryLevelGet(self):
        return _byteblower.DeviceInfo_BatteryLevelGet(self)

    def GivenNameGet(self):
        return _byteblower.DeviceInfo_GivenNameGet(self)

    def TypeGet(self):
        return _byteblower.DeviceInfo_TypeGet(self)

    def OsTypeGet(self):
        return _byteblower.DeviceInfo_OsTypeGet(self)

    def NetworkInfoGet(self):
        return _byteblower.DeviceInfo_NetworkInfoGet(self)

    def OsVersionGet(self):
        return _byteblower.DeviceInfo_OsVersionGet(self)
DeviceInfo_swigregister = _byteblower.DeviceInfo_swigregister
DeviceInfo_swigregister(DeviceInfo)

class NetworkInfo(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkInfo, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def InterfaceGet(self):
        return _byteblower.NetworkInfo_InterfaceGet(self)

    def IPv4Get(self):
        return _byteblower.NetworkInfo_IPv4Get(self)

    def IPv6GlobalGet(self):
        return _byteblower.NetworkInfo_IPv6GlobalGet(self)

    def IPv6LinkLocalGet(self):
        return _byteblower.NetworkInfo_IPv6LinkLocalGet(self)

    def SSIDGet(self):
        return _byteblower.NetworkInfo_SSIDGet(self)

    def BSSIDGet(self):
        return _byteblower.NetworkInfo_BSSIDGet(self)
NetworkInfo_swigregister = _byteblower.NetworkInfo_swigregister
NetworkInfo_swigregister(NetworkInfo)

class NetworkInterface(AbstractObject):
    __swig_setmethods__ = {}
    for _s in [AbstractObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkInterface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def NameGet(self):
        return _byteblower.NetworkInterface_NameGet(self)

    def DisplayNameGet(self):
        return _byteblower.NetworkInterface_DisplayNameGet(self)

    def MacGet(self):
        return _byteblower.NetworkInterface_MacGet(self)

    def IPv4Get(self):
        return _byteblower.NetworkInterface_IPv4Get(self)

    def IPv6GlobalGet(self):
        return _byteblower.NetworkInterface_IPv6GlobalGet(self)

    def IPv6LinkLocalGet(self):
        return _byteblower.NetworkInterface_IPv6LinkLocalGet(self)
NetworkInterface_swigregister = _byteblower.NetworkInterface_swigregister
NetworkInterface_swigregister(NetworkInterface)

class NetworkInterfaceList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkInterfaceList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkInterfaceList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.NetworkInterfaceList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.NetworkInterfaceList___nonzero__(self)

    def __bool__(self):
        return _byteblower.NetworkInterfaceList___bool__(self)

    def __len__(self):
        return _byteblower.NetworkInterfaceList___len__(self)

    def pop(self):
        return _byteblower.NetworkInterfaceList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.NetworkInterfaceList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.NetworkInterfaceList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.NetworkInterfaceList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.NetworkInterfaceList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.NetworkInterfaceList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.NetworkInterfaceList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.NetworkInterfaceList_append(self, x)

    def empty(self):
        return _byteblower.NetworkInterfaceList_empty(self)

    def size(self):
        return _byteblower.NetworkInterfaceList_size(self)

    def clear(self):
        return _byteblower.NetworkInterfaceList_clear(self)

    def swap(self, v):
        return _byteblower.NetworkInterfaceList_swap(self, v)

    def get_allocator(self):
        return _byteblower.NetworkInterfaceList_get_allocator(self)

    def begin(self):
        return _byteblower.NetworkInterfaceList_begin(self)

    def end(self):
        return _byteblower.NetworkInterfaceList_end(self)

    def rbegin(self):
        return _byteblower.NetworkInterfaceList_rbegin(self)

    def rend(self):
        return _byteblower.NetworkInterfaceList_rend(self)

    def pop_back(self):
        return _byteblower.NetworkInterfaceList_pop_back(self)

    def erase(self, *args):
        return _byteblower.NetworkInterfaceList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_NetworkInterfaceList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.NetworkInterfaceList_push_back(self, x)

    def front(self):
        return _byteblower.NetworkInterfaceList_front(self)

    def back(self):
        return _byteblower.NetworkInterfaceList_back(self)

    def assign(self, n, x):
        return _byteblower.NetworkInterfaceList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.NetworkInterfaceList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.NetworkInterfaceList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.NetworkInterfaceList_reserve(self, n)

    def capacity(self):
        return _byteblower.NetworkInterfaceList_capacity(self)
    __swig_destroy__ = _byteblower.delete_NetworkInterfaceList
    __del__ = lambda self: None
NetworkInterfaceList_swigregister = _byteblower.NetworkInterfaceList_swigregister
NetworkInterfaceList_swigregister(NetworkInterfaceList)

class Stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stats, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.Stats_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.Stats___nonzero__(self)

    def __bool__(self):
        return _byteblower.Stats___bool__(self)

    def __len__(self):
        return _byteblower.Stats___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _byteblower.Stats___getitem__(self, key)

    def __delitem__(self, key):
        return _byteblower.Stats___delitem__(self, key)

    def has_key(self, key):
        return _byteblower.Stats_has_key(self, key)

    def keys(self):
        return _byteblower.Stats_keys(self)

    def values(self):
        return _byteblower.Stats_values(self)

    def items(self):
        return _byteblower.Stats_items(self)

    def __contains__(self, key):
        return _byteblower.Stats___contains__(self, key)

    def key_iterator(self):
        return _byteblower.Stats_key_iterator(self)

    def value_iterator(self):
        return _byteblower.Stats_value_iterator(self)

    def __setitem__(self, *args):
        return _byteblower.Stats___setitem__(self, *args)

    def asdict(self):
        return _byteblower.Stats_asdict(self)

    def __init__(self, *args):
        this = _byteblower.new_Stats(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        return _byteblower.Stats_empty(self)

    def size(self):
        return _byteblower.Stats_size(self)

    def clear(self):
        return _byteblower.Stats_clear(self)

    def swap(self, v):
        return _byteblower.Stats_swap(self, v)

    def get_allocator(self):
        return _byteblower.Stats_get_allocator(self)

    def begin(self):
        return _byteblower.Stats_begin(self)

    def end(self):
        return _byteblower.Stats_end(self)

    def rbegin(self):
        return _byteblower.Stats_rbegin(self)

    def rend(self):
        return _byteblower.Stats_rend(self)

    def count(self, x):
        return _byteblower.Stats_count(self, x)

    def erase(self, *args):
        return _byteblower.Stats_erase(self, *args)

    def find(self, x):
        return _byteblower.Stats_find(self, x)

    def lower_bound(self, x):
        return _byteblower.Stats_lower_bound(self, x)

    def upper_bound(self, x):
        return _byteblower.Stats_upper_bound(self, x)
    __swig_destroy__ = _byteblower.delete_Stats
    __del__ = lambda self: None
Stats_swigregister = _byteblower.Stats_swigregister
Stats_swigregister(Stats)

class StatsList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StatsList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StatsList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.StatsList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.StatsList___nonzero__(self)

    def __bool__(self):
        return _byteblower.StatsList___bool__(self)

    def __len__(self):
        return _byteblower.StatsList___len__(self)

    def pop(self):
        return _byteblower.StatsList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.StatsList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.StatsList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.StatsList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.StatsList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.StatsList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.StatsList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.StatsList_append(self, x)

    def empty(self):
        return _byteblower.StatsList_empty(self)

    def size(self):
        return _byteblower.StatsList_size(self)

    def clear(self):
        return _byteblower.StatsList_clear(self)

    def swap(self, v):
        return _byteblower.StatsList_swap(self, v)

    def get_allocator(self):
        return _byteblower.StatsList_get_allocator(self)

    def begin(self):
        return _byteblower.StatsList_begin(self)

    def end(self):
        return _byteblower.StatsList_end(self)

    def rbegin(self):
        return _byteblower.StatsList_rbegin(self)

    def rend(self):
        return _byteblower.StatsList_rend(self)

    def pop_back(self):
        return _byteblower.StatsList_pop_back(self)

    def erase(self, *args):
        return _byteblower.StatsList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_StatsList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.StatsList_push_back(self, x)

    def front(self):
        return _byteblower.StatsList_front(self)

    def back(self):
        return _byteblower.StatsList_back(self)

    def assign(self, n, x):
        return _byteblower.StatsList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.StatsList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.StatsList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.StatsList_reserve(self, n)

    def capacity(self):
        return _byteblower.StatsList_capacity(self)
    __swig_destroy__ = _byteblower.delete_StatsList
    __del__ = lambda self: None
StatsList_swigregister = _byteblower.StatsList_swigregister
StatsList_swigregister(StatsList)

class StatsByTime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StatsByTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StatsByTime, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.StatsByTime_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.StatsByTime___nonzero__(self)

    def __bool__(self):
        return _byteblower.StatsByTime___bool__(self)

    def __len__(self):
        return _byteblower.StatsByTime___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _byteblower.StatsByTime___getitem__(self, key)

    def __delitem__(self, key):
        return _byteblower.StatsByTime___delitem__(self, key)

    def has_key(self, key):
        return _byteblower.StatsByTime_has_key(self, key)

    def keys(self):
        return _byteblower.StatsByTime_keys(self)

    def values(self):
        return _byteblower.StatsByTime_values(self)

    def items(self):
        return _byteblower.StatsByTime_items(self)

    def __contains__(self, key):
        return _byteblower.StatsByTime___contains__(self, key)

    def key_iterator(self):
        return _byteblower.StatsByTime_key_iterator(self)

    def value_iterator(self):
        return _byteblower.StatsByTime_value_iterator(self)

    def __setitem__(self, *args):
        return _byteblower.StatsByTime___setitem__(self, *args)

    def asdict(self):
        return _byteblower.StatsByTime_asdict(self)

    def __init__(self, *args):
        this = _byteblower.new_StatsByTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        return _byteblower.StatsByTime_empty(self)

    def size(self):
        return _byteblower.StatsByTime_size(self)

    def clear(self):
        return _byteblower.StatsByTime_clear(self)

    def swap(self, v):
        return _byteblower.StatsByTime_swap(self, v)

    def get_allocator(self):
        return _byteblower.StatsByTime_get_allocator(self)

    def begin(self):
        return _byteblower.StatsByTime_begin(self)

    def end(self):
        return _byteblower.StatsByTime_end(self)

    def rbegin(self):
        return _byteblower.StatsByTime_rbegin(self)

    def rend(self):
        return _byteblower.StatsByTime_rend(self)

    def count(self, x):
        return _byteblower.StatsByTime_count(self, x)

    def erase(self, *args):
        return _byteblower.StatsByTime_erase(self, *args)

    def find(self, x):
        return _byteblower.StatsByTime_find(self, x)

    def lower_bound(self, x):
        return _byteblower.StatsByTime_lower_bound(self, x)

    def upper_bound(self, x):
        return _byteblower.StatsByTime_upper_bound(self, x)
    __swig_destroy__ = _byteblower.delete_StatsByTime
    __del__ = lambda self: None
StatsByTime_swigregister = _byteblower.StatsByTime_swigregister
StatsByTime_swigregister(StatsByTime)

class Int64StringMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Int64StringMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Int64StringMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.Int64StringMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.Int64StringMap___nonzero__(self)

    def __bool__(self):
        return _byteblower.Int64StringMap___bool__(self)

    def __len__(self):
        return _byteblower.Int64StringMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _byteblower.Int64StringMap___getitem__(self, key)

    def __delitem__(self, key):
        return _byteblower.Int64StringMap___delitem__(self, key)

    def has_key(self, key):
        return _byteblower.Int64StringMap_has_key(self, key)

    def keys(self):
        return _byteblower.Int64StringMap_keys(self)

    def values(self):
        return _byteblower.Int64StringMap_values(self)

    def items(self):
        return _byteblower.Int64StringMap_items(self)

    def __contains__(self, key):
        return _byteblower.Int64StringMap___contains__(self, key)

    def key_iterator(self):
        return _byteblower.Int64StringMap_key_iterator(self)

    def value_iterator(self):
        return _byteblower.Int64StringMap_value_iterator(self)

    def __setitem__(self, *args):
        return _byteblower.Int64StringMap___setitem__(self, *args)

    def asdict(self):
        return _byteblower.Int64StringMap_asdict(self)

    def __init__(self, *args):
        this = _byteblower.new_Int64StringMap(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        return _byteblower.Int64StringMap_empty(self)

    def size(self):
        return _byteblower.Int64StringMap_size(self)

    def clear(self):
        return _byteblower.Int64StringMap_clear(self)

    def swap(self, v):
        return _byteblower.Int64StringMap_swap(self, v)

    def get_allocator(self):
        return _byteblower.Int64StringMap_get_allocator(self)

    def begin(self):
        return _byteblower.Int64StringMap_begin(self)

    def end(self):
        return _byteblower.Int64StringMap_end(self)

    def rbegin(self):
        return _byteblower.Int64StringMap_rbegin(self)

    def rend(self):
        return _byteblower.Int64StringMap_rend(self)

    def count(self, x):
        return _byteblower.Int64StringMap_count(self, x)

    def erase(self, *args):
        return _byteblower.Int64StringMap_erase(self, *args)

    def find(self, x):
        return _byteblower.Int64StringMap_find(self, x)

    def lower_bound(self, x):
        return _byteblower.Int64StringMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _byteblower.Int64StringMap_upper_bound(self, x)
    __swig_destroy__ = _byteblower.delete_Int64StringMap
    __del__ = lambda self: None
Int64StringMap_swigregister = _byteblower.Int64StringMap_swigregister
Int64StringMap_swigregister(Int64StringMap)

class Buffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Buffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Buffer, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.Buffer_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.Buffer___nonzero__(self)

    def __bool__(self):
        return _byteblower.Buffer___bool__(self)

    def __len__(self):
        return _byteblower.Buffer___len__(self)

    def pop(self):
        return _byteblower.Buffer_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.Buffer___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.Buffer___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.Buffer___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.Buffer___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.Buffer___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.Buffer___setitem__(self, *args)

    def append(self, x):
        return _byteblower.Buffer_append(self, x)

    def empty(self):
        return _byteblower.Buffer_empty(self)

    def size(self):
        return _byteblower.Buffer_size(self)

    def clear(self):
        return _byteblower.Buffer_clear(self)

    def swap(self, v):
        return _byteblower.Buffer_swap(self, v)

    def get_allocator(self):
        return _byteblower.Buffer_get_allocator(self)

    def begin(self):
        return _byteblower.Buffer_begin(self)

    def end(self):
        return _byteblower.Buffer_end(self)

    def rbegin(self):
        return _byteblower.Buffer_rbegin(self)

    def rend(self):
        return _byteblower.Buffer_rend(self)

    def pop_back(self):
        return _byteblower.Buffer_pop_back(self)

    def erase(self, *args):
        return _byteblower.Buffer_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_Buffer(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.Buffer_push_back(self, x)

    def front(self):
        return _byteblower.Buffer_front(self)

    def back(self):
        return _byteblower.Buffer_back(self)

    def assign(self, n, x):
        return _byteblower.Buffer_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.Buffer_resize(self, *args)

    def insert(self, *args):
        return _byteblower.Buffer_insert(self, *args)

    def reserve(self, n):
        return _byteblower.Buffer_reserve(self, n)

    def capacity(self):
        return _byteblower.Buffer_capacity(self)
    __swig_destroy__ = _byteblower.delete_Buffer
    __del__ = lambda self: None
Buffer_swigregister = _byteblower.Buffer_swigregister
Buffer_swigregister(Buffer)

class BufferList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BufferList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.BufferList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.BufferList___nonzero__(self)

    def __bool__(self):
        return _byteblower.BufferList___bool__(self)

    def __len__(self):
        return _byteblower.BufferList___len__(self)

    def pop(self):
        return _byteblower.BufferList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.BufferList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.BufferList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.BufferList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.BufferList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.BufferList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.BufferList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.BufferList_append(self, x)

    def empty(self):
        return _byteblower.BufferList_empty(self)

    def size(self):
        return _byteblower.BufferList_size(self)

    def clear(self):
        return _byteblower.BufferList_clear(self)

    def swap(self, v):
        return _byteblower.BufferList_swap(self, v)

    def get_allocator(self):
        return _byteblower.BufferList_get_allocator(self)

    def begin(self):
        return _byteblower.BufferList_begin(self)

    def end(self):
        return _byteblower.BufferList_end(self)

    def rbegin(self):
        return _byteblower.BufferList_rbegin(self)

    def rend(self):
        return _byteblower.BufferList_rend(self)

    def pop_back(self):
        return _byteblower.BufferList_pop_back(self)

    def erase(self, *args):
        return _byteblower.BufferList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_BufferList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.BufferList_push_back(self, x)

    def front(self):
        return _byteblower.BufferList_front(self)

    def back(self):
        return _byteblower.BufferList_back(self)

    def assign(self, n, x):
        return _byteblower.BufferList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.BufferList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.BufferList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.BufferList_reserve(self, n)

    def capacity(self):
        return _byteblower.BufferList_capacity(self)
    __swig_destroy__ = _byteblower.delete_BufferList
    __del__ = lambda self: None
BufferList_swigregister = _byteblower.BufferList_swigregister
BufferList_swigregister(BufferList)

class Int64List(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Int64List, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Int64List, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.Int64List_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.Int64List___nonzero__(self)

    def __bool__(self):
        return _byteblower.Int64List___bool__(self)

    def __len__(self):
        return _byteblower.Int64List___len__(self)

    def pop(self):
        return _byteblower.Int64List_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.Int64List___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.Int64List___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.Int64List___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.Int64List___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.Int64List___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.Int64List___setitem__(self, *args)

    def append(self, x):
        return _byteblower.Int64List_append(self, x)

    def empty(self):
        return _byteblower.Int64List_empty(self)

    def size(self):
        return _byteblower.Int64List_size(self)

    def clear(self):
        return _byteblower.Int64List_clear(self)

    def swap(self, v):
        return _byteblower.Int64List_swap(self, v)

    def get_allocator(self):
        return _byteblower.Int64List_get_allocator(self)

    def begin(self):
        return _byteblower.Int64List_begin(self)

    def end(self):
        return _byteblower.Int64List_end(self)

    def rbegin(self):
        return _byteblower.Int64List_rbegin(self)

    def rend(self):
        return _byteblower.Int64List_rend(self)

    def pop_back(self):
        return _byteblower.Int64List_pop_back(self)

    def erase(self, *args):
        return _byteblower.Int64List_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_Int64List(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.Int64List_push_back(self, x)

    def front(self):
        return _byteblower.Int64List_front(self)

    def back(self):
        return _byteblower.Int64List_back(self)

    def assign(self, n, x):
        return _byteblower.Int64List_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.Int64List_resize(self, *args)

    def insert(self, *args):
        return _byteblower.Int64List_insert(self, *args)

    def reserve(self, n):
        return _byteblower.Int64List_reserve(self, n)

    def capacity(self):
        return _byteblower.Int64List_capacity(self)
    __swig_destroy__ = _byteblower.delete_Int64List
    __del__ = lambda self: None
Int64List_swigregister = _byteblower.Int64List_swigregister
Int64List_swigregister(Int64List)

class IntegerList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegerList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntegerList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.IntegerList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.IntegerList___nonzero__(self)

    def __bool__(self):
        return _byteblower.IntegerList___bool__(self)

    def __len__(self):
        return _byteblower.IntegerList___len__(self)

    def pop(self):
        return _byteblower.IntegerList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.IntegerList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.IntegerList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.IntegerList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.IntegerList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.IntegerList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.IntegerList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.IntegerList_append(self, x)

    def empty(self):
        return _byteblower.IntegerList_empty(self)

    def size(self):
        return _byteblower.IntegerList_size(self)

    def clear(self):
        return _byteblower.IntegerList_clear(self)

    def swap(self, v):
        return _byteblower.IntegerList_swap(self, v)

    def get_allocator(self):
        return _byteblower.IntegerList_get_allocator(self)

    def begin(self):
        return _byteblower.IntegerList_begin(self)

    def end(self):
        return _byteblower.IntegerList_end(self)

    def rbegin(self):
        return _byteblower.IntegerList_rbegin(self)

    def rend(self):
        return _byteblower.IntegerList_rend(self)

    def pop_back(self):
        return _byteblower.IntegerList_pop_back(self)

    def erase(self, *args):
        return _byteblower.IntegerList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_IntegerList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.IntegerList_push_back(self, x)

    def front(self):
        return _byteblower.IntegerList_front(self)

    def back(self):
        return _byteblower.IntegerList_back(self)

    def assign(self, n, x):
        return _byteblower.IntegerList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.IntegerList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.IntegerList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.IntegerList_reserve(self, n)

    def capacity(self):
        return _byteblower.IntegerList_capacity(self)
    __swig_destroy__ = _byteblower.delete_IntegerList
    __del__ = lambda self: None
IntegerList_swigregister = _byteblower.IntegerList_swigregister
IntegerList_swigregister(IntegerList)

class UnsignedIntegerList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsignedIntegerList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnsignedIntegerList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.UnsignedIntegerList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.UnsignedIntegerList___nonzero__(self)

    def __bool__(self):
        return _byteblower.UnsignedIntegerList___bool__(self)

    def __len__(self):
        return _byteblower.UnsignedIntegerList___len__(self)

    def pop(self):
        return _byteblower.UnsignedIntegerList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.UnsignedIntegerList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.UnsignedIntegerList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.UnsignedIntegerList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.UnsignedIntegerList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.UnsignedIntegerList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.UnsignedIntegerList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.UnsignedIntegerList_append(self, x)

    def empty(self):
        return _byteblower.UnsignedIntegerList_empty(self)

    def size(self):
        return _byteblower.UnsignedIntegerList_size(self)

    def clear(self):
        return _byteblower.UnsignedIntegerList_clear(self)

    def swap(self, v):
        return _byteblower.UnsignedIntegerList_swap(self, v)

    def get_allocator(self):
        return _byteblower.UnsignedIntegerList_get_allocator(self)

    def begin(self):
        return _byteblower.UnsignedIntegerList_begin(self)

    def end(self):
        return _byteblower.UnsignedIntegerList_end(self)

    def rbegin(self):
        return _byteblower.UnsignedIntegerList_rbegin(self)

    def rend(self):
        return _byteblower.UnsignedIntegerList_rend(self)

    def pop_back(self):
        return _byteblower.UnsignedIntegerList_pop_back(self)

    def erase(self, *args):
        return _byteblower.UnsignedIntegerList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_UnsignedIntegerList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.UnsignedIntegerList_push_back(self, x)

    def front(self):
        return _byteblower.UnsignedIntegerList_front(self)

    def back(self):
        return _byteblower.UnsignedIntegerList_back(self)

    def assign(self, n, x):
        return _byteblower.UnsignedIntegerList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.UnsignedIntegerList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.UnsignedIntegerList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.UnsignedIntegerList_reserve(self, n)

    def capacity(self):
        return _byteblower.UnsignedIntegerList_capacity(self)
    __swig_destroy__ = _byteblower.delete_UnsignedIntegerList
    __del__ = lambda self: None
UnsignedIntegerList_swigregister = _byteblower.UnsignedIntegerList_swigregister
UnsignedIntegerList_swigregister(UnsignedIntegerList)

class StringList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.StringList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.StringList___nonzero__(self)

    def __bool__(self):
        return _byteblower.StringList___bool__(self)

    def __len__(self):
        return _byteblower.StringList___len__(self)

    def pop(self):
        return _byteblower.StringList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.StringList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.StringList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.StringList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.StringList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.StringList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.StringList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.StringList_append(self, x)

    def empty(self):
        return _byteblower.StringList_empty(self)

    def size(self):
        return _byteblower.StringList_size(self)

    def clear(self):
        return _byteblower.StringList_clear(self)

    def swap(self, v):
        return _byteblower.StringList_swap(self, v)

    def get_allocator(self):
        return _byteblower.StringList_get_allocator(self)

    def begin(self):
        return _byteblower.StringList_begin(self)

    def end(self):
        return _byteblower.StringList_end(self)

    def rbegin(self):
        return _byteblower.StringList_rbegin(self)

    def rend(self):
        return _byteblower.StringList_rend(self)

    def pop_back(self):
        return _byteblower.StringList_pop_back(self)

    def erase(self, *args):
        return _byteblower.StringList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_StringList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.StringList_push_back(self, x)

    def front(self):
        return _byteblower.StringList_front(self)

    def back(self):
        return _byteblower.StringList_back(self)

    def assign(self, n, x):
        return _byteblower.StringList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.StringList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.StringList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.StringList_reserve(self, n)

    def capacity(self):
        return _byteblower.StringList_capacity(self)
    __swig_destroy__ = _byteblower.delete_StringList
    __del__ = lambda self: None
StringList_swigregister = _byteblower.StringList_swigregister
StringList_swigregister(StringList)

class Int64Pair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Int64Pair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Int64Pair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _byteblower.new_Int64Pair(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["first"] = _byteblower.Int64Pair_first_set
    __swig_getmethods__["first"] = _byteblower.Int64Pair_first_get
    if _newclass:
        first = _swig_property(_byteblower.Int64Pair_first_get, _byteblower.Int64Pair_first_set)
    __swig_setmethods__["second"] = _byteblower.Int64Pair_second_set
    __swig_getmethods__["second"] = _byteblower.Int64Pair_second_get
    if _newclass:
        second = _swig_property(_byteblower.Int64Pair_second_get, _byteblower.Int64Pair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _byteblower.delete_Int64Pair
    __del__ = lambda self: None
Int64Pair_swigregister = _byteblower.Int64Pair_swigregister
Int64Pair_swigregister(Int64Pair)

class AbstractRefreshableResultList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractRefreshableResultList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractRefreshableResultList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.AbstractRefreshableResultList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.AbstractRefreshableResultList___nonzero__(self)

    def __bool__(self):
        return _byteblower.AbstractRefreshableResultList___bool__(self)

    def __len__(self):
        return _byteblower.AbstractRefreshableResultList___len__(self)

    def pop(self):
        return _byteblower.AbstractRefreshableResultList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.AbstractRefreshableResultList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.AbstractRefreshableResultList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.AbstractRefreshableResultList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.AbstractRefreshableResultList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.AbstractRefreshableResultList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.AbstractRefreshableResultList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.AbstractRefreshableResultList_append(self, x)

    def empty(self):
        return _byteblower.AbstractRefreshableResultList_empty(self)

    def size(self):
        return _byteblower.AbstractRefreshableResultList_size(self)

    def clear(self):
        return _byteblower.AbstractRefreshableResultList_clear(self)

    def swap(self, v):
        return _byteblower.AbstractRefreshableResultList_swap(self, v)

    def get_allocator(self):
        return _byteblower.AbstractRefreshableResultList_get_allocator(self)

    def begin(self):
        return _byteblower.AbstractRefreshableResultList_begin(self)

    def end(self):
        return _byteblower.AbstractRefreshableResultList_end(self)

    def rbegin(self):
        return _byteblower.AbstractRefreshableResultList_rbegin(self)

    def rend(self):
        return _byteblower.AbstractRefreshableResultList_rend(self)

    def pop_back(self):
        return _byteblower.AbstractRefreshableResultList_pop_back(self)

    def erase(self, *args):
        return _byteblower.AbstractRefreshableResultList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_AbstractRefreshableResultList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.AbstractRefreshableResultList_push_back(self, x)

    def front(self):
        return _byteblower.AbstractRefreshableResultList_front(self)

    def back(self):
        return _byteblower.AbstractRefreshableResultList_back(self)

    def assign(self, n, x):
        return _byteblower.AbstractRefreshableResultList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.AbstractRefreshableResultList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.AbstractRefreshableResultList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.AbstractRefreshableResultList_reserve(self, n)

    def capacity(self):
        return _byteblower.AbstractRefreshableResultList_capacity(self)
    __swig_destroy__ = _byteblower.delete_AbstractRefreshableResultList
    __del__ = lambda self: None
AbstractRefreshableResultList_swigregister = _byteblower.AbstractRefreshableResultList_swigregister
AbstractRefreshableResultList_swigregister(AbstractRefreshableResultList)

class UserList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UserList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.UserList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.UserList___nonzero__(self)

    def __bool__(self):
        return _byteblower.UserList___bool__(self)

    def __len__(self):
        return _byteblower.UserList___len__(self)

    def pop(self):
        return _byteblower.UserList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.UserList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.UserList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.UserList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.UserList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.UserList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.UserList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.UserList_append(self, x)

    def empty(self):
        return _byteblower.UserList_empty(self)

    def size(self):
        return _byteblower.UserList_size(self)

    def clear(self):
        return _byteblower.UserList_clear(self)

    def swap(self, v):
        return _byteblower.UserList_swap(self, v)

    def get_allocator(self):
        return _byteblower.UserList_get_allocator(self)

    def begin(self):
        return _byteblower.UserList_begin(self)

    def end(self):
        return _byteblower.UserList_end(self)

    def rbegin(self):
        return _byteblower.UserList_rbegin(self)

    def rend(self):
        return _byteblower.UserList_rend(self)

    def pop_back(self):
        return _byteblower.UserList_pop_back(self)

    def erase(self, *args):
        return _byteblower.UserList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_UserList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.UserList_push_back(self, x)

    def front(self):
        return _byteblower.UserList_front(self)

    def back(self):
        return _byteblower.UserList_back(self)

    def assign(self, n, x):
        return _byteblower.UserList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.UserList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.UserList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.UserList_reserve(self, n)

    def capacity(self):
        return _byteblower.UserList_capacity(self)
    __swig_destroy__ = _byteblower.delete_UserList
    __del__ = lambda self: None
UserList_swigregister = _byteblower.UserList_swigregister
UserList_swigregister(UserList)

class UserMobileList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserMobileList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UserMobileList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.UserMobileList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.UserMobileList___nonzero__(self)

    def __bool__(self):
        return _byteblower.UserMobileList___bool__(self)

    def __len__(self):
        return _byteblower.UserMobileList___len__(self)

    def pop(self):
        return _byteblower.UserMobileList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.UserMobileList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.UserMobileList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.UserMobileList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.UserMobileList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.UserMobileList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.UserMobileList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.UserMobileList_append(self, x)

    def empty(self):
        return _byteblower.UserMobileList_empty(self)

    def size(self):
        return _byteblower.UserMobileList_size(self)

    def clear(self):
        return _byteblower.UserMobileList_clear(self)

    def swap(self, v):
        return _byteblower.UserMobileList_swap(self, v)

    def get_allocator(self):
        return _byteblower.UserMobileList_get_allocator(self)

    def begin(self):
        return _byteblower.UserMobileList_begin(self)

    def end(self):
        return _byteblower.UserMobileList_end(self)

    def rbegin(self):
        return _byteblower.UserMobileList_rbegin(self)

    def rend(self):
        return _byteblower.UserMobileList_rend(self)

    def pop_back(self):
        return _byteblower.UserMobileList_pop_back(self)

    def erase(self, *args):
        return _byteblower.UserMobileList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_UserMobileList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.UserMobileList_push_back(self, x)

    def front(self):
        return _byteblower.UserMobileList_front(self)

    def back(self):
        return _byteblower.UserMobileList_back(self)

    def assign(self, n, x):
        return _byteblower.UserMobileList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.UserMobileList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.UserMobileList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.UserMobileList_reserve(self, n)

    def capacity(self):
        return _byteblower.UserMobileList_capacity(self)
    __swig_destroy__ = _byteblower.delete_UserMobileList
    __del__ = lambda self: None
UserMobileList_swigregister = _byteblower.UserMobileList_swigregister
UserMobileList_swigregister(UserMobileList)

class ByteBlowerServerList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteBlowerServerList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ByteBlowerServerList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.ByteBlowerServerList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.ByteBlowerServerList___nonzero__(self)

    def __bool__(self):
        return _byteblower.ByteBlowerServerList___bool__(self)

    def __len__(self):
        return _byteblower.ByteBlowerServerList___len__(self)

    def pop(self):
        return _byteblower.ByteBlowerServerList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.ByteBlowerServerList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.ByteBlowerServerList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.ByteBlowerServerList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.ByteBlowerServerList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.ByteBlowerServerList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.ByteBlowerServerList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.ByteBlowerServerList_append(self, x)

    def empty(self):
        return _byteblower.ByteBlowerServerList_empty(self)

    def size(self):
        return _byteblower.ByteBlowerServerList_size(self)

    def clear(self):
        return _byteblower.ByteBlowerServerList_clear(self)

    def swap(self, v):
        return _byteblower.ByteBlowerServerList_swap(self, v)

    def get_allocator(self):
        return _byteblower.ByteBlowerServerList_get_allocator(self)

    def begin(self):
        return _byteblower.ByteBlowerServerList_begin(self)

    def end(self):
        return _byteblower.ByteBlowerServerList_end(self)

    def rbegin(self):
        return _byteblower.ByteBlowerServerList_rbegin(self)

    def rend(self):
        return _byteblower.ByteBlowerServerList_rend(self)

    def pop_back(self):
        return _byteblower.ByteBlowerServerList_pop_back(self)

    def erase(self, *args):
        return _byteblower.ByteBlowerServerList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_ByteBlowerServerList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.ByteBlowerServerList_push_back(self, x)

    def front(self):
        return _byteblower.ByteBlowerServerList_front(self)

    def back(self):
        return _byteblower.ByteBlowerServerList_back(self)

    def assign(self, n, x):
        return _byteblower.ByteBlowerServerList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.ByteBlowerServerList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.ByteBlowerServerList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.ByteBlowerServerList_reserve(self, n)

    def capacity(self):
        return _byteblower.ByteBlowerServerList_capacity(self)
    __swig_destroy__ = _byteblower.delete_ByteBlowerServerList
    __del__ = lambda self: None
ByteBlowerServerList_swigregister = _byteblower.ByteBlowerServerList_swigregister
ByteBlowerServerList_swigregister(ByteBlowerServerList)

class PhysicalInterfaceList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PhysicalInterfaceList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PhysicalInterfaceList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.PhysicalInterfaceList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.PhysicalInterfaceList___nonzero__(self)

    def __bool__(self):
        return _byteblower.PhysicalInterfaceList___bool__(self)

    def __len__(self):
        return _byteblower.PhysicalInterfaceList___len__(self)

    def pop(self):
        return _byteblower.PhysicalInterfaceList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.PhysicalInterfaceList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.PhysicalInterfaceList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.PhysicalInterfaceList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.PhysicalInterfaceList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.PhysicalInterfaceList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.PhysicalInterfaceList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.PhysicalInterfaceList_append(self, x)

    def empty(self):
        return _byteblower.PhysicalInterfaceList_empty(self)

    def size(self):
        return _byteblower.PhysicalInterfaceList_size(self)

    def clear(self):
        return _byteblower.PhysicalInterfaceList_clear(self)

    def swap(self, v):
        return _byteblower.PhysicalInterfaceList_swap(self, v)

    def get_allocator(self):
        return _byteblower.PhysicalInterfaceList_get_allocator(self)

    def begin(self):
        return _byteblower.PhysicalInterfaceList_begin(self)

    def end(self):
        return _byteblower.PhysicalInterfaceList_end(self)

    def rbegin(self):
        return _byteblower.PhysicalInterfaceList_rbegin(self)

    def rend(self):
        return _byteblower.PhysicalInterfaceList_rend(self)

    def pop_back(self):
        return _byteblower.PhysicalInterfaceList_pop_back(self)

    def erase(self, *args):
        return _byteblower.PhysicalInterfaceList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_PhysicalInterfaceList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.PhysicalInterfaceList_push_back(self, x)

    def front(self):
        return _byteblower.PhysicalInterfaceList_front(self)

    def back(self):
        return _byteblower.PhysicalInterfaceList_back(self)

    def assign(self, n, x):
        return _byteblower.PhysicalInterfaceList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.PhysicalInterfaceList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.PhysicalInterfaceList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.PhysicalInterfaceList_reserve(self, n)

    def capacity(self):
        return _byteblower.PhysicalInterfaceList_capacity(self)
    __swig_destroy__ = _byteblower.delete_PhysicalInterfaceList
    __del__ = lambda self: None
PhysicalInterfaceList_swigregister = _byteblower.PhysicalInterfaceList_swigregister
PhysicalInterfaceList_swigregister(PhysicalInterfaceList)

class ByteBlowerInterfaceList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteBlowerInterfaceList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ByteBlowerInterfaceList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.ByteBlowerInterfaceList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.ByteBlowerInterfaceList___nonzero__(self)

    def __bool__(self):
        return _byteblower.ByteBlowerInterfaceList___bool__(self)

    def __len__(self):
        return _byteblower.ByteBlowerInterfaceList___len__(self)

    def pop(self):
        return _byteblower.ByteBlowerInterfaceList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.ByteBlowerInterfaceList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.ByteBlowerInterfaceList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.ByteBlowerInterfaceList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.ByteBlowerInterfaceList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.ByteBlowerInterfaceList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.ByteBlowerInterfaceList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.ByteBlowerInterfaceList_append(self, x)

    def empty(self):
        return _byteblower.ByteBlowerInterfaceList_empty(self)

    def size(self):
        return _byteblower.ByteBlowerInterfaceList_size(self)

    def clear(self):
        return _byteblower.ByteBlowerInterfaceList_clear(self)

    def swap(self, v):
        return _byteblower.ByteBlowerInterfaceList_swap(self, v)

    def get_allocator(self):
        return _byteblower.ByteBlowerInterfaceList_get_allocator(self)

    def begin(self):
        return _byteblower.ByteBlowerInterfaceList_begin(self)

    def end(self):
        return _byteblower.ByteBlowerInterfaceList_end(self)

    def rbegin(self):
        return _byteblower.ByteBlowerInterfaceList_rbegin(self)

    def rend(self):
        return _byteblower.ByteBlowerInterfaceList_rend(self)

    def pop_back(self):
        return _byteblower.ByteBlowerInterfaceList_pop_back(self)

    def erase(self, *args):
        return _byteblower.ByteBlowerInterfaceList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_ByteBlowerInterfaceList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.ByteBlowerInterfaceList_push_back(self, x)

    def front(self):
        return _byteblower.ByteBlowerInterfaceList_front(self)

    def back(self):
        return _byteblower.ByteBlowerInterfaceList_back(self)

    def assign(self, n, x):
        return _byteblower.ByteBlowerInterfaceList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.ByteBlowerInterfaceList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.ByteBlowerInterfaceList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.ByteBlowerInterfaceList_reserve(self, n)

    def capacity(self):
        return _byteblower.ByteBlowerInterfaceList_capacity(self)
    __swig_destroy__ = _byteblower.delete_ByteBlowerInterfaceList
    __del__ = lambda self: None
ByteBlowerInterfaceList_swigregister = _byteblower.ByteBlowerInterfaceList_swigregister
ByteBlowerInterfaceList_swigregister(ByteBlowerInterfaceList)

class ByteBlowerPortList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteBlowerPortList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ByteBlowerPortList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.ByteBlowerPortList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.ByteBlowerPortList___nonzero__(self)

    def __bool__(self):
        return _byteblower.ByteBlowerPortList___bool__(self)

    def __len__(self):
        return _byteblower.ByteBlowerPortList___len__(self)

    def pop(self):
        return _byteblower.ByteBlowerPortList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.ByteBlowerPortList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.ByteBlowerPortList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.ByteBlowerPortList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.ByteBlowerPortList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.ByteBlowerPortList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.ByteBlowerPortList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.ByteBlowerPortList_append(self, x)

    def empty(self):
        return _byteblower.ByteBlowerPortList_empty(self)

    def size(self):
        return _byteblower.ByteBlowerPortList_size(self)

    def clear(self):
        return _byteblower.ByteBlowerPortList_clear(self)

    def swap(self, v):
        return _byteblower.ByteBlowerPortList_swap(self, v)

    def get_allocator(self):
        return _byteblower.ByteBlowerPortList_get_allocator(self)

    def begin(self):
        return _byteblower.ByteBlowerPortList_begin(self)

    def end(self):
        return _byteblower.ByteBlowerPortList_end(self)

    def rbegin(self):
        return _byteblower.ByteBlowerPortList_rbegin(self)

    def rend(self):
        return _byteblower.ByteBlowerPortList_rend(self)

    def pop_back(self):
        return _byteblower.ByteBlowerPortList_pop_back(self)

    def erase(self, *args):
        return _byteblower.ByteBlowerPortList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_ByteBlowerPortList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.ByteBlowerPortList_push_back(self, x)

    def front(self):
        return _byteblower.ByteBlowerPortList_front(self)

    def back(self):
        return _byteblower.ByteBlowerPortList_back(self)

    def assign(self, n, x):
        return _byteblower.ByteBlowerPortList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.ByteBlowerPortList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.ByteBlowerPortList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.ByteBlowerPortList_reserve(self, n)

    def capacity(self):
        return _byteblower.ByteBlowerPortList_capacity(self)
    __swig_destroy__ = _byteblower.delete_ByteBlowerPortList
    __del__ = lambda self: None
ByteBlowerPortList_swigregister = _byteblower.ByteBlowerPortList_swigregister
ByteBlowerPortList_swigregister(ByteBlowerPortList)

class Layer25VlanList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Layer25VlanList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Layer25VlanList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.Layer25VlanList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.Layer25VlanList___nonzero__(self)

    def __bool__(self):
        return _byteblower.Layer25VlanList___bool__(self)

    def __len__(self):
        return _byteblower.Layer25VlanList___len__(self)

    def pop(self):
        return _byteblower.Layer25VlanList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.Layer25VlanList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.Layer25VlanList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.Layer25VlanList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.Layer25VlanList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.Layer25VlanList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.Layer25VlanList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.Layer25VlanList_append(self, x)

    def empty(self):
        return _byteblower.Layer25VlanList_empty(self)

    def size(self):
        return _byteblower.Layer25VlanList_size(self)

    def clear(self):
        return _byteblower.Layer25VlanList_clear(self)

    def swap(self, v):
        return _byteblower.Layer25VlanList_swap(self, v)

    def get_allocator(self):
        return _byteblower.Layer25VlanList_get_allocator(self)

    def begin(self):
        return _byteblower.Layer25VlanList_begin(self)

    def end(self):
        return _byteblower.Layer25VlanList_end(self)

    def rbegin(self):
        return _byteblower.Layer25VlanList_rbegin(self)

    def rend(self):
        return _byteblower.Layer25VlanList_rend(self)

    def pop_back(self):
        return _byteblower.Layer25VlanList_pop_back(self)

    def erase(self, *args):
        return _byteblower.Layer25VlanList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_Layer25VlanList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.Layer25VlanList_push_back(self, x)

    def front(self):
        return _byteblower.Layer25VlanList_front(self)

    def back(self):
        return _byteblower.Layer25VlanList_back(self)

    def assign(self, n, x):
        return _byteblower.Layer25VlanList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.Layer25VlanList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.Layer25VlanList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.Layer25VlanList_reserve(self, n)

    def capacity(self):
        return _byteblower.Layer25VlanList_capacity(self)
    __swig_destroy__ = _byteblower.delete_Layer25VlanList
    __del__ = lambda self: None
Layer25VlanList_swigregister = _byteblower.Layer25VlanList_swigregister
Layer25VlanList_swigregister(Layer25VlanList)

class Layer25PPPoEList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Layer25PPPoEList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Layer25PPPoEList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.Layer25PPPoEList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.Layer25PPPoEList___nonzero__(self)

    def __bool__(self):
        return _byteblower.Layer25PPPoEList___bool__(self)

    def __len__(self):
        return _byteblower.Layer25PPPoEList___len__(self)

    def pop(self):
        return _byteblower.Layer25PPPoEList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.Layer25PPPoEList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.Layer25PPPoEList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.Layer25PPPoEList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.Layer25PPPoEList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.Layer25PPPoEList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.Layer25PPPoEList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.Layer25PPPoEList_append(self, x)

    def empty(self):
        return _byteblower.Layer25PPPoEList_empty(self)

    def size(self):
        return _byteblower.Layer25PPPoEList_size(self)

    def clear(self):
        return _byteblower.Layer25PPPoEList_clear(self)

    def swap(self, v):
        return _byteblower.Layer25PPPoEList_swap(self, v)

    def get_allocator(self):
        return _byteblower.Layer25PPPoEList_get_allocator(self)

    def begin(self):
        return _byteblower.Layer25PPPoEList_begin(self)

    def end(self):
        return _byteblower.Layer25PPPoEList_end(self)

    def rbegin(self):
        return _byteblower.Layer25PPPoEList_rbegin(self)

    def rend(self):
        return _byteblower.Layer25PPPoEList_rend(self)

    def pop_back(self):
        return _byteblower.Layer25PPPoEList_pop_back(self)

    def erase(self, *args):
        return _byteblower.Layer25PPPoEList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_Layer25PPPoEList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.Layer25PPPoEList_push_back(self, x)

    def front(self):
        return _byteblower.Layer25PPPoEList_front(self)

    def back(self):
        return _byteblower.Layer25PPPoEList_back(self)

    def assign(self, n, x):
        return _byteblower.Layer25PPPoEList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.Layer25PPPoEList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.Layer25PPPoEList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.Layer25PPPoEList_reserve(self, n)

    def capacity(self):
        return _byteblower.Layer25PPPoEList_capacity(self)
    __swig_destroy__ = _byteblower.delete_Layer25PPPoEList
    __del__ = lambda self: None
Layer25PPPoEList_swigregister = _byteblower.Layer25PPPoEList_swigregister
Layer25PPPoEList_swigregister(Layer25PPPoEList)

class ScheduleList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.ScheduleList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.ScheduleList___nonzero__(self)

    def __bool__(self):
        return _byteblower.ScheduleList___bool__(self)

    def __len__(self):
        return _byteblower.ScheduleList___len__(self)

    def pop(self):
        return _byteblower.ScheduleList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.ScheduleList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.ScheduleList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.ScheduleList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.ScheduleList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.ScheduleList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.ScheduleList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.ScheduleList_append(self, x)

    def empty(self):
        return _byteblower.ScheduleList_empty(self)

    def size(self):
        return _byteblower.ScheduleList_size(self)

    def clear(self):
        return _byteblower.ScheduleList_clear(self)

    def swap(self, v):
        return _byteblower.ScheduleList_swap(self, v)

    def get_allocator(self):
        return _byteblower.ScheduleList_get_allocator(self)

    def begin(self):
        return _byteblower.ScheduleList_begin(self)

    def end(self):
        return _byteblower.ScheduleList_end(self)

    def rbegin(self):
        return _byteblower.ScheduleList_rbegin(self)

    def rend(self):
        return _byteblower.ScheduleList_rend(self)

    def pop_back(self):
        return _byteblower.ScheduleList_pop_back(self)

    def erase(self, *args):
        return _byteblower.ScheduleList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_ScheduleList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.ScheduleList_push_back(self, x)

    def front(self):
        return _byteblower.ScheduleList_front(self)

    def back(self):
        return _byteblower.ScheduleList_back(self)

    def assign(self, n, x):
        return _byteblower.ScheduleList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.ScheduleList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.ScheduleList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.ScheduleList_reserve(self, n)

    def capacity(self):
        return _byteblower.ScheduleList_capacity(self)
    __swig_destroy__ = _byteblower.delete_ScheduleList
    __del__ = lambda self: None
ScheduleList_swigregister = _byteblower.ScheduleList_swigregister
ScheduleList_swigregister(ScheduleList)

class StreamList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.StreamList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.StreamList___nonzero__(self)

    def __bool__(self):
        return _byteblower.StreamList___bool__(self)

    def __len__(self):
        return _byteblower.StreamList___len__(self)

    def pop(self):
        return _byteblower.StreamList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.StreamList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.StreamList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.StreamList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.StreamList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.StreamList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.StreamList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.StreamList_append(self, x)

    def empty(self):
        return _byteblower.StreamList_empty(self)

    def size(self):
        return _byteblower.StreamList_size(self)

    def clear(self):
        return _byteblower.StreamList_clear(self)

    def swap(self, v):
        return _byteblower.StreamList_swap(self, v)

    def get_allocator(self):
        return _byteblower.StreamList_get_allocator(self)

    def begin(self):
        return _byteblower.StreamList_begin(self)

    def end(self):
        return _byteblower.StreamList_end(self)

    def rbegin(self):
        return _byteblower.StreamList_rbegin(self)

    def rend(self):
        return _byteblower.StreamList_rend(self)

    def pop_back(self):
        return _byteblower.StreamList_pop_back(self)

    def erase(self, *args):
        return _byteblower.StreamList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_StreamList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.StreamList_push_back(self, x)

    def front(self):
        return _byteblower.StreamList_front(self)

    def back(self):
        return _byteblower.StreamList_back(self)

    def assign(self, n, x):
        return _byteblower.StreamList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.StreamList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.StreamList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.StreamList_reserve(self, n)

    def capacity(self):
        return _byteblower.StreamList_capacity(self)
    __swig_destroy__ = _byteblower.delete_StreamList
    __del__ = lambda self: None
StreamList_swigregister = _byteblower.StreamList_swigregister
StreamList_swigregister(StreamList)

class StreamMobileList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamMobileList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamMobileList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.StreamMobileList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.StreamMobileList___nonzero__(self)

    def __bool__(self):
        return _byteblower.StreamMobileList___bool__(self)

    def __len__(self):
        return _byteblower.StreamMobileList___len__(self)

    def pop(self):
        return _byteblower.StreamMobileList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.StreamMobileList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.StreamMobileList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.StreamMobileList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.StreamMobileList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.StreamMobileList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.StreamMobileList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.StreamMobileList_append(self, x)

    def empty(self):
        return _byteblower.StreamMobileList_empty(self)

    def size(self):
        return _byteblower.StreamMobileList_size(self)

    def clear(self):
        return _byteblower.StreamMobileList_clear(self)

    def swap(self, v):
        return _byteblower.StreamMobileList_swap(self, v)

    def get_allocator(self):
        return _byteblower.StreamMobileList_get_allocator(self)

    def begin(self):
        return _byteblower.StreamMobileList_begin(self)

    def end(self):
        return _byteblower.StreamMobileList_end(self)

    def rbegin(self):
        return _byteblower.StreamMobileList_rbegin(self)

    def rend(self):
        return _byteblower.StreamMobileList_rend(self)

    def pop_back(self):
        return _byteblower.StreamMobileList_pop_back(self)

    def erase(self, *args):
        return _byteblower.StreamMobileList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_StreamMobileList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.StreamMobileList_push_back(self, x)

    def front(self):
        return _byteblower.StreamMobileList_front(self)

    def back(self):
        return _byteblower.StreamMobileList_back(self)

    def assign(self, n, x):
        return _byteblower.StreamMobileList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.StreamMobileList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.StreamMobileList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.StreamMobileList_reserve(self, n)

    def capacity(self):
        return _byteblower.StreamMobileList_capacity(self)
    __swig_destroy__ = _byteblower.delete_StreamMobileList
    __del__ = lambda self: None
StreamMobileList_swigregister = _byteblower.StreamMobileList_swigregister
StreamMobileList_swigregister(StreamMobileList)

class FrameList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FrameList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.FrameList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.FrameList___nonzero__(self)

    def __bool__(self):
        return _byteblower.FrameList___bool__(self)

    def __len__(self):
        return _byteblower.FrameList___len__(self)

    def pop(self):
        return _byteblower.FrameList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.FrameList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.FrameList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.FrameList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.FrameList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.FrameList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.FrameList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.FrameList_append(self, x)

    def empty(self):
        return _byteblower.FrameList_empty(self)

    def size(self):
        return _byteblower.FrameList_size(self)

    def clear(self):
        return _byteblower.FrameList_clear(self)

    def swap(self, v):
        return _byteblower.FrameList_swap(self, v)

    def get_allocator(self):
        return _byteblower.FrameList_get_allocator(self)

    def begin(self):
        return _byteblower.FrameList_begin(self)

    def end(self):
        return _byteblower.FrameList_end(self)

    def rbegin(self):
        return _byteblower.FrameList_rbegin(self)

    def rend(self):
        return _byteblower.FrameList_rend(self)

    def pop_back(self):
        return _byteblower.FrameList_pop_back(self)

    def erase(self, *args):
        return _byteblower.FrameList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_FrameList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.FrameList_push_back(self, x)

    def front(self):
        return _byteblower.FrameList_front(self)

    def back(self):
        return _byteblower.FrameList_back(self)

    def assign(self, n, x):
        return _byteblower.FrameList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.FrameList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.FrameList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.FrameList_reserve(self, n)

    def capacity(self):
        return _byteblower.FrameList_capacity(self)
    __swig_destroy__ = _byteblower.delete_FrameList
    __del__ = lambda self: None
FrameList_swigregister = _byteblower.FrameList_swigregister
FrameList_swigregister(FrameList)

class FrameMobileList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameMobileList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FrameMobileList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.FrameMobileList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.FrameMobileList___nonzero__(self)

    def __bool__(self):
        return _byteblower.FrameMobileList___bool__(self)

    def __len__(self):
        return _byteblower.FrameMobileList___len__(self)

    def pop(self):
        return _byteblower.FrameMobileList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.FrameMobileList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.FrameMobileList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.FrameMobileList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.FrameMobileList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.FrameMobileList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.FrameMobileList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.FrameMobileList_append(self, x)

    def empty(self):
        return _byteblower.FrameMobileList_empty(self)

    def size(self):
        return _byteblower.FrameMobileList_size(self)

    def clear(self):
        return _byteblower.FrameMobileList_clear(self)

    def swap(self, v):
        return _byteblower.FrameMobileList_swap(self, v)

    def get_allocator(self):
        return _byteblower.FrameMobileList_get_allocator(self)

    def begin(self):
        return _byteblower.FrameMobileList_begin(self)

    def end(self):
        return _byteblower.FrameMobileList_end(self)

    def rbegin(self):
        return _byteblower.FrameMobileList_rbegin(self)

    def rend(self):
        return _byteblower.FrameMobileList_rend(self)

    def pop_back(self):
        return _byteblower.FrameMobileList_pop_back(self)

    def erase(self, *args):
        return _byteblower.FrameMobileList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_FrameMobileList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.FrameMobileList_push_back(self, x)

    def front(self):
        return _byteblower.FrameMobileList_front(self)

    def back(self):
        return _byteblower.FrameMobileList_back(self)

    def assign(self, n, x):
        return _byteblower.FrameMobileList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.FrameMobileList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.FrameMobileList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.FrameMobileList_reserve(self, n)

    def capacity(self):
        return _byteblower.FrameMobileList_capacity(self)
    __swig_destroy__ = _byteblower.delete_FrameMobileList
    __del__ = lambda self: None
FrameMobileList_swigregister = _byteblower.FrameMobileList_swigregister
FrameMobileList_swigregister(FrameMobileList)

class FrameModifierFieldRandomList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameModifierFieldRandomList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FrameModifierFieldRandomList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.FrameModifierFieldRandomList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.FrameModifierFieldRandomList___nonzero__(self)

    def __bool__(self):
        return _byteblower.FrameModifierFieldRandomList___bool__(self)

    def __len__(self):
        return _byteblower.FrameModifierFieldRandomList___len__(self)

    def pop(self):
        return _byteblower.FrameModifierFieldRandomList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.FrameModifierFieldRandomList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.FrameModifierFieldRandomList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.FrameModifierFieldRandomList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.FrameModifierFieldRandomList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.FrameModifierFieldRandomList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.FrameModifierFieldRandomList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.FrameModifierFieldRandomList_append(self, x)

    def empty(self):
        return _byteblower.FrameModifierFieldRandomList_empty(self)

    def size(self):
        return _byteblower.FrameModifierFieldRandomList_size(self)

    def clear(self):
        return _byteblower.FrameModifierFieldRandomList_clear(self)

    def swap(self, v):
        return _byteblower.FrameModifierFieldRandomList_swap(self, v)

    def get_allocator(self):
        return _byteblower.FrameModifierFieldRandomList_get_allocator(self)

    def begin(self):
        return _byteblower.FrameModifierFieldRandomList_begin(self)

    def end(self):
        return _byteblower.FrameModifierFieldRandomList_end(self)

    def rbegin(self):
        return _byteblower.FrameModifierFieldRandomList_rbegin(self)

    def rend(self):
        return _byteblower.FrameModifierFieldRandomList_rend(self)

    def pop_back(self):
        return _byteblower.FrameModifierFieldRandomList_pop_back(self)

    def erase(self, *args):
        return _byteblower.FrameModifierFieldRandomList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_FrameModifierFieldRandomList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.FrameModifierFieldRandomList_push_back(self, x)

    def front(self):
        return _byteblower.FrameModifierFieldRandomList_front(self)

    def back(self):
        return _byteblower.FrameModifierFieldRandomList_back(self)

    def assign(self, n, x):
        return _byteblower.FrameModifierFieldRandomList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.FrameModifierFieldRandomList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.FrameModifierFieldRandomList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.FrameModifierFieldRandomList_reserve(self, n)

    def capacity(self):
        return _byteblower.FrameModifierFieldRandomList_capacity(self)
    __swig_destroy__ = _byteblower.delete_FrameModifierFieldRandomList
    __del__ = lambda self: None
FrameModifierFieldRandomList_swigregister = _byteblower.FrameModifierFieldRandomList_swigregister
FrameModifierFieldRandomList_swigregister(FrameModifierFieldRandomList)

class FrameModifierFieldIncrementalList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameModifierFieldIncrementalList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FrameModifierFieldIncrementalList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.FrameModifierFieldIncrementalList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.FrameModifierFieldIncrementalList___nonzero__(self)

    def __bool__(self):
        return _byteblower.FrameModifierFieldIncrementalList___bool__(self)

    def __len__(self):
        return _byteblower.FrameModifierFieldIncrementalList___len__(self)

    def pop(self):
        return _byteblower.FrameModifierFieldIncrementalList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.FrameModifierFieldIncrementalList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.FrameModifierFieldIncrementalList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.FrameModifierFieldIncrementalList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.FrameModifierFieldIncrementalList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.FrameModifierFieldIncrementalList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.FrameModifierFieldIncrementalList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.FrameModifierFieldIncrementalList_append(self, x)

    def empty(self):
        return _byteblower.FrameModifierFieldIncrementalList_empty(self)

    def size(self):
        return _byteblower.FrameModifierFieldIncrementalList_size(self)

    def clear(self):
        return _byteblower.FrameModifierFieldIncrementalList_clear(self)

    def swap(self, v):
        return _byteblower.FrameModifierFieldIncrementalList_swap(self, v)

    def get_allocator(self):
        return _byteblower.FrameModifierFieldIncrementalList_get_allocator(self)

    def begin(self):
        return _byteblower.FrameModifierFieldIncrementalList_begin(self)

    def end(self):
        return _byteblower.FrameModifierFieldIncrementalList_end(self)

    def rbegin(self):
        return _byteblower.FrameModifierFieldIncrementalList_rbegin(self)

    def rend(self):
        return _byteblower.FrameModifierFieldIncrementalList_rend(self)

    def pop_back(self):
        return _byteblower.FrameModifierFieldIncrementalList_pop_back(self)

    def erase(self, *args):
        return _byteblower.FrameModifierFieldIncrementalList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_FrameModifierFieldIncrementalList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.FrameModifierFieldIncrementalList_push_back(self, x)

    def front(self):
        return _byteblower.FrameModifierFieldIncrementalList_front(self)

    def back(self):
        return _byteblower.FrameModifierFieldIncrementalList_back(self)

    def assign(self, n, x):
        return _byteblower.FrameModifierFieldIncrementalList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.FrameModifierFieldIncrementalList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.FrameModifierFieldIncrementalList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.FrameModifierFieldIncrementalList_reserve(self, n)

    def capacity(self):
        return _byteblower.FrameModifierFieldIncrementalList_capacity(self)
    __swig_destroy__ = _byteblower.delete_FrameModifierFieldIncrementalList
    __del__ = lambda self: None
FrameModifierFieldIncrementalList_swigregister = _byteblower.FrameModifierFieldIncrementalList_swigregister
FrameModifierFieldIncrementalList_swigregister(FrameModifierFieldIncrementalList)

class TriggerBasicList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerBasicList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerBasicList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.TriggerBasicList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.TriggerBasicList___nonzero__(self)

    def __bool__(self):
        return _byteblower.TriggerBasicList___bool__(self)

    def __len__(self):
        return _byteblower.TriggerBasicList___len__(self)

    def pop(self):
        return _byteblower.TriggerBasicList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.TriggerBasicList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.TriggerBasicList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.TriggerBasicList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.TriggerBasicList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.TriggerBasicList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.TriggerBasicList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.TriggerBasicList_append(self, x)

    def empty(self):
        return _byteblower.TriggerBasicList_empty(self)

    def size(self):
        return _byteblower.TriggerBasicList_size(self)

    def clear(self):
        return _byteblower.TriggerBasicList_clear(self)

    def swap(self, v):
        return _byteblower.TriggerBasicList_swap(self, v)

    def get_allocator(self):
        return _byteblower.TriggerBasicList_get_allocator(self)

    def begin(self):
        return _byteblower.TriggerBasicList_begin(self)

    def end(self):
        return _byteblower.TriggerBasicList_end(self)

    def rbegin(self):
        return _byteblower.TriggerBasicList_rbegin(self)

    def rend(self):
        return _byteblower.TriggerBasicList_rend(self)

    def pop_back(self):
        return _byteblower.TriggerBasicList_pop_back(self)

    def erase(self, *args):
        return _byteblower.TriggerBasicList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_TriggerBasicList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.TriggerBasicList_push_back(self, x)

    def front(self):
        return _byteblower.TriggerBasicList_front(self)

    def back(self):
        return _byteblower.TriggerBasicList_back(self)

    def assign(self, n, x):
        return _byteblower.TriggerBasicList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.TriggerBasicList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.TriggerBasicList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.TriggerBasicList_reserve(self, n)

    def capacity(self):
        return _byteblower.TriggerBasicList_capacity(self)
    __swig_destroy__ = _byteblower.delete_TriggerBasicList
    __del__ = lambda self: None
TriggerBasicList_swigregister = _byteblower.TriggerBasicList_swigregister
TriggerBasicList_swigregister(TriggerBasicList)

class TriggerBasicMobileList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerBasicMobileList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerBasicMobileList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.TriggerBasicMobileList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.TriggerBasicMobileList___nonzero__(self)

    def __bool__(self):
        return _byteblower.TriggerBasicMobileList___bool__(self)

    def __len__(self):
        return _byteblower.TriggerBasicMobileList___len__(self)

    def pop(self):
        return _byteblower.TriggerBasicMobileList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.TriggerBasicMobileList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.TriggerBasicMobileList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.TriggerBasicMobileList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.TriggerBasicMobileList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.TriggerBasicMobileList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.TriggerBasicMobileList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.TriggerBasicMobileList_append(self, x)

    def empty(self):
        return _byteblower.TriggerBasicMobileList_empty(self)

    def size(self):
        return _byteblower.TriggerBasicMobileList_size(self)

    def clear(self):
        return _byteblower.TriggerBasicMobileList_clear(self)

    def swap(self, v):
        return _byteblower.TriggerBasicMobileList_swap(self, v)

    def get_allocator(self):
        return _byteblower.TriggerBasicMobileList_get_allocator(self)

    def begin(self):
        return _byteblower.TriggerBasicMobileList_begin(self)

    def end(self):
        return _byteblower.TriggerBasicMobileList_end(self)

    def rbegin(self):
        return _byteblower.TriggerBasicMobileList_rbegin(self)

    def rend(self):
        return _byteblower.TriggerBasicMobileList_rend(self)

    def pop_back(self):
        return _byteblower.TriggerBasicMobileList_pop_back(self)

    def erase(self, *args):
        return _byteblower.TriggerBasicMobileList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_TriggerBasicMobileList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.TriggerBasicMobileList_push_back(self, x)

    def front(self):
        return _byteblower.TriggerBasicMobileList_front(self)

    def back(self):
        return _byteblower.TriggerBasicMobileList_back(self)

    def assign(self, n, x):
        return _byteblower.TriggerBasicMobileList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.TriggerBasicMobileList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.TriggerBasicMobileList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.TriggerBasicMobileList_reserve(self, n)

    def capacity(self):
        return _byteblower.TriggerBasicMobileList_capacity(self)
    __swig_destroy__ = _byteblower.delete_TriggerBasicMobileList
    __del__ = lambda self: None
TriggerBasicMobileList_swigregister = _byteblower.TriggerBasicMobileList_swigregister
TriggerBasicMobileList_swigregister(TriggerBasicMobileList)

class TriggerSizeDistributionList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerSizeDistributionList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerSizeDistributionList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.TriggerSizeDistributionList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.TriggerSizeDistributionList___nonzero__(self)

    def __bool__(self):
        return _byteblower.TriggerSizeDistributionList___bool__(self)

    def __len__(self):
        return _byteblower.TriggerSizeDistributionList___len__(self)

    def pop(self):
        return _byteblower.TriggerSizeDistributionList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.TriggerSizeDistributionList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.TriggerSizeDistributionList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.TriggerSizeDistributionList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.TriggerSizeDistributionList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.TriggerSizeDistributionList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.TriggerSizeDistributionList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.TriggerSizeDistributionList_append(self, x)

    def empty(self):
        return _byteblower.TriggerSizeDistributionList_empty(self)

    def size(self):
        return _byteblower.TriggerSizeDistributionList_size(self)

    def clear(self):
        return _byteblower.TriggerSizeDistributionList_clear(self)

    def swap(self, v):
        return _byteblower.TriggerSizeDistributionList_swap(self, v)

    def get_allocator(self):
        return _byteblower.TriggerSizeDistributionList_get_allocator(self)

    def begin(self):
        return _byteblower.TriggerSizeDistributionList_begin(self)

    def end(self):
        return _byteblower.TriggerSizeDistributionList_end(self)

    def rbegin(self):
        return _byteblower.TriggerSizeDistributionList_rbegin(self)

    def rend(self):
        return _byteblower.TriggerSizeDistributionList_rend(self)

    def pop_back(self):
        return _byteblower.TriggerSizeDistributionList_pop_back(self)

    def erase(self, *args):
        return _byteblower.TriggerSizeDistributionList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_TriggerSizeDistributionList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.TriggerSizeDistributionList_push_back(self, x)

    def front(self):
        return _byteblower.TriggerSizeDistributionList_front(self)

    def back(self):
        return _byteblower.TriggerSizeDistributionList_back(self)

    def assign(self, n, x):
        return _byteblower.TriggerSizeDistributionList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.TriggerSizeDistributionList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.TriggerSizeDistributionList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.TriggerSizeDistributionList_reserve(self, n)

    def capacity(self):
        return _byteblower.TriggerSizeDistributionList_capacity(self)
    __swig_destroy__ = _byteblower.delete_TriggerSizeDistributionList
    __del__ = lambda self: None
TriggerSizeDistributionList_swigregister = _byteblower.TriggerSizeDistributionList_swigregister
TriggerSizeDistributionList_swigregister(TriggerSizeDistributionList)

class LatencyBasicList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LatencyBasicList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LatencyBasicList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.LatencyBasicList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.LatencyBasicList___nonzero__(self)

    def __bool__(self):
        return _byteblower.LatencyBasicList___bool__(self)

    def __len__(self):
        return _byteblower.LatencyBasicList___len__(self)

    def pop(self):
        return _byteblower.LatencyBasicList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.LatencyBasicList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.LatencyBasicList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.LatencyBasicList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.LatencyBasicList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.LatencyBasicList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.LatencyBasicList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.LatencyBasicList_append(self, x)

    def empty(self):
        return _byteblower.LatencyBasicList_empty(self)

    def size(self):
        return _byteblower.LatencyBasicList_size(self)

    def clear(self):
        return _byteblower.LatencyBasicList_clear(self)

    def swap(self, v):
        return _byteblower.LatencyBasicList_swap(self, v)

    def get_allocator(self):
        return _byteblower.LatencyBasicList_get_allocator(self)

    def begin(self):
        return _byteblower.LatencyBasicList_begin(self)

    def end(self):
        return _byteblower.LatencyBasicList_end(self)

    def rbegin(self):
        return _byteblower.LatencyBasicList_rbegin(self)

    def rend(self):
        return _byteblower.LatencyBasicList_rend(self)

    def pop_back(self):
        return _byteblower.LatencyBasicList_pop_back(self)

    def erase(self, *args):
        return _byteblower.LatencyBasicList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_LatencyBasicList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.LatencyBasicList_push_back(self, x)

    def front(self):
        return _byteblower.LatencyBasicList_front(self)

    def back(self):
        return _byteblower.LatencyBasicList_back(self)

    def assign(self, n, x):
        return _byteblower.LatencyBasicList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.LatencyBasicList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.LatencyBasicList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.LatencyBasicList_reserve(self, n)

    def capacity(self):
        return _byteblower.LatencyBasicList_capacity(self)
    __swig_destroy__ = _byteblower.delete_LatencyBasicList
    __del__ = lambda self: None
LatencyBasicList_swigregister = _byteblower.LatencyBasicList_swigregister
LatencyBasicList_swigregister(LatencyBasicList)

class LatencyBasicMobileList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LatencyBasicMobileList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LatencyBasicMobileList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.LatencyBasicMobileList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.LatencyBasicMobileList___nonzero__(self)

    def __bool__(self):
        return _byteblower.LatencyBasicMobileList___bool__(self)

    def __len__(self):
        return _byteblower.LatencyBasicMobileList___len__(self)

    def pop(self):
        return _byteblower.LatencyBasicMobileList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.LatencyBasicMobileList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.LatencyBasicMobileList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.LatencyBasicMobileList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.LatencyBasicMobileList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.LatencyBasicMobileList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.LatencyBasicMobileList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.LatencyBasicMobileList_append(self, x)

    def empty(self):
        return _byteblower.LatencyBasicMobileList_empty(self)

    def size(self):
        return _byteblower.LatencyBasicMobileList_size(self)

    def clear(self):
        return _byteblower.LatencyBasicMobileList_clear(self)

    def swap(self, v):
        return _byteblower.LatencyBasicMobileList_swap(self, v)

    def get_allocator(self):
        return _byteblower.LatencyBasicMobileList_get_allocator(self)

    def begin(self):
        return _byteblower.LatencyBasicMobileList_begin(self)

    def end(self):
        return _byteblower.LatencyBasicMobileList_end(self)

    def rbegin(self):
        return _byteblower.LatencyBasicMobileList_rbegin(self)

    def rend(self):
        return _byteblower.LatencyBasicMobileList_rend(self)

    def pop_back(self):
        return _byteblower.LatencyBasicMobileList_pop_back(self)

    def erase(self, *args):
        return _byteblower.LatencyBasicMobileList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_LatencyBasicMobileList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.LatencyBasicMobileList_push_back(self, x)

    def front(self):
        return _byteblower.LatencyBasicMobileList_front(self)

    def back(self):
        return _byteblower.LatencyBasicMobileList_back(self)

    def assign(self, n, x):
        return _byteblower.LatencyBasicMobileList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.LatencyBasicMobileList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.LatencyBasicMobileList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.LatencyBasicMobileList_reserve(self, n)

    def capacity(self):
        return _byteblower.LatencyBasicMobileList_capacity(self)
    __swig_destroy__ = _byteblower.delete_LatencyBasicMobileList
    __del__ = lambda self: None
LatencyBasicMobileList_swigregister = _byteblower.LatencyBasicMobileList_swigregister
LatencyBasicMobileList_swigregister(LatencyBasicMobileList)

class LatencyDistributionList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LatencyDistributionList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LatencyDistributionList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.LatencyDistributionList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.LatencyDistributionList___nonzero__(self)

    def __bool__(self):
        return _byteblower.LatencyDistributionList___bool__(self)

    def __len__(self):
        return _byteblower.LatencyDistributionList___len__(self)

    def pop(self):
        return _byteblower.LatencyDistributionList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.LatencyDistributionList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.LatencyDistributionList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.LatencyDistributionList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.LatencyDistributionList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.LatencyDistributionList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.LatencyDistributionList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.LatencyDistributionList_append(self, x)

    def empty(self):
        return _byteblower.LatencyDistributionList_empty(self)

    def size(self):
        return _byteblower.LatencyDistributionList_size(self)

    def clear(self):
        return _byteblower.LatencyDistributionList_clear(self)

    def swap(self, v):
        return _byteblower.LatencyDistributionList_swap(self, v)

    def get_allocator(self):
        return _byteblower.LatencyDistributionList_get_allocator(self)

    def begin(self):
        return _byteblower.LatencyDistributionList_begin(self)

    def end(self):
        return _byteblower.LatencyDistributionList_end(self)

    def rbegin(self):
        return _byteblower.LatencyDistributionList_rbegin(self)

    def rend(self):
        return _byteblower.LatencyDistributionList_rend(self)

    def pop_back(self):
        return _byteblower.LatencyDistributionList_pop_back(self)

    def erase(self, *args):
        return _byteblower.LatencyDistributionList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_LatencyDistributionList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.LatencyDistributionList_push_back(self, x)

    def front(self):
        return _byteblower.LatencyDistributionList_front(self)

    def back(self):
        return _byteblower.LatencyDistributionList_back(self)

    def assign(self, n, x):
        return _byteblower.LatencyDistributionList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.LatencyDistributionList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.LatencyDistributionList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.LatencyDistributionList_reserve(self, n)

    def capacity(self):
        return _byteblower.LatencyDistributionList_capacity(self)
    __swig_destroy__ = _byteblower.delete_LatencyDistributionList
    __del__ = lambda self: None
LatencyDistributionList_swigregister = _byteblower.LatencyDistributionList_swigregister
LatencyDistributionList_swigregister(LatencyDistributionList)

class OutOfSequenceList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutOfSequenceList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutOfSequenceList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.OutOfSequenceList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.OutOfSequenceList___nonzero__(self)

    def __bool__(self):
        return _byteblower.OutOfSequenceList___bool__(self)

    def __len__(self):
        return _byteblower.OutOfSequenceList___len__(self)

    def pop(self):
        return _byteblower.OutOfSequenceList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.OutOfSequenceList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.OutOfSequenceList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.OutOfSequenceList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.OutOfSequenceList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.OutOfSequenceList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.OutOfSequenceList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.OutOfSequenceList_append(self, x)

    def empty(self):
        return _byteblower.OutOfSequenceList_empty(self)

    def size(self):
        return _byteblower.OutOfSequenceList_size(self)

    def clear(self):
        return _byteblower.OutOfSequenceList_clear(self)

    def swap(self, v):
        return _byteblower.OutOfSequenceList_swap(self, v)

    def get_allocator(self):
        return _byteblower.OutOfSequenceList_get_allocator(self)

    def begin(self):
        return _byteblower.OutOfSequenceList_begin(self)

    def end(self):
        return _byteblower.OutOfSequenceList_end(self)

    def rbegin(self):
        return _byteblower.OutOfSequenceList_rbegin(self)

    def rend(self):
        return _byteblower.OutOfSequenceList_rend(self)

    def pop_back(self):
        return _byteblower.OutOfSequenceList_pop_back(self)

    def erase(self, *args):
        return _byteblower.OutOfSequenceList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_OutOfSequenceList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.OutOfSequenceList_push_back(self, x)

    def front(self):
        return _byteblower.OutOfSequenceList_front(self)

    def back(self):
        return _byteblower.OutOfSequenceList_back(self)

    def assign(self, n, x):
        return _byteblower.OutOfSequenceList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.OutOfSequenceList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.OutOfSequenceList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.OutOfSequenceList_reserve(self, n)

    def capacity(self):
        return _byteblower.OutOfSequenceList_capacity(self)
    __swig_destroy__ = _byteblower.delete_OutOfSequenceList
    __del__ = lambda self: None
OutOfSequenceList_swigregister = _byteblower.OutOfSequenceList_swigregister
OutOfSequenceList_swigregister(OutOfSequenceList)

class HTTPClientList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HTTPClientList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HTTPClientList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.HTTPClientList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.HTTPClientList___nonzero__(self)

    def __bool__(self):
        return _byteblower.HTTPClientList___bool__(self)

    def __len__(self):
        return _byteblower.HTTPClientList___len__(self)

    def pop(self):
        return _byteblower.HTTPClientList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.HTTPClientList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.HTTPClientList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.HTTPClientList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.HTTPClientList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.HTTPClientList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.HTTPClientList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.HTTPClientList_append(self, x)

    def empty(self):
        return _byteblower.HTTPClientList_empty(self)

    def size(self):
        return _byteblower.HTTPClientList_size(self)

    def clear(self):
        return _byteblower.HTTPClientList_clear(self)

    def swap(self, v):
        return _byteblower.HTTPClientList_swap(self, v)

    def get_allocator(self):
        return _byteblower.HTTPClientList_get_allocator(self)

    def begin(self):
        return _byteblower.HTTPClientList_begin(self)

    def end(self):
        return _byteblower.HTTPClientList_end(self)

    def rbegin(self):
        return _byteblower.HTTPClientList_rbegin(self)

    def rend(self):
        return _byteblower.HTTPClientList_rend(self)

    def pop_back(self):
        return _byteblower.HTTPClientList_pop_back(self)

    def erase(self, *args):
        return _byteblower.HTTPClientList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_HTTPClientList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.HTTPClientList_push_back(self, x)

    def front(self):
        return _byteblower.HTTPClientList_front(self)

    def back(self):
        return _byteblower.HTTPClientList_back(self)

    def assign(self, n, x):
        return _byteblower.HTTPClientList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.HTTPClientList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.HTTPClientList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.HTTPClientList_reserve(self, n)

    def capacity(self):
        return _byteblower.HTTPClientList_capacity(self)
    __swig_destroy__ = _byteblower.delete_HTTPClientList
    __del__ = lambda self: None
HTTPClientList_swigregister = _byteblower.HTTPClientList_swigregister
HTTPClientList_swigregister(HTTPClientList)

class HTTPMultiDataList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HTTPMultiDataList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HTTPMultiDataList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.HTTPMultiDataList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.HTTPMultiDataList___nonzero__(self)

    def __bool__(self):
        return _byteblower.HTTPMultiDataList___bool__(self)

    def __len__(self):
        return _byteblower.HTTPMultiDataList___len__(self)

    def pop(self):
        return _byteblower.HTTPMultiDataList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.HTTPMultiDataList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.HTTPMultiDataList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.HTTPMultiDataList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.HTTPMultiDataList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.HTTPMultiDataList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.HTTPMultiDataList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.HTTPMultiDataList_append(self, x)

    def empty(self):
        return _byteblower.HTTPMultiDataList_empty(self)

    def size(self):
        return _byteblower.HTTPMultiDataList_size(self)

    def clear(self):
        return _byteblower.HTTPMultiDataList_clear(self)

    def swap(self, v):
        return _byteblower.HTTPMultiDataList_swap(self, v)

    def get_allocator(self):
        return _byteblower.HTTPMultiDataList_get_allocator(self)

    def begin(self):
        return _byteblower.HTTPMultiDataList_begin(self)

    def end(self):
        return _byteblower.HTTPMultiDataList_end(self)

    def rbegin(self):
        return _byteblower.HTTPMultiDataList_rbegin(self)

    def rend(self):
        return _byteblower.HTTPMultiDataList_rend(self)

    def pop_back(self):
        return _byteblower.HTTPMultiDataList_pop_back(self)

    def erase(self, *args):
        return _byteblower.HTTPMultiDataList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_HTTPMultiDataList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.HTTPMultiDataList_push_back(self, x)

    def front(self):
        return _byteblower.HTTPMultiDataList_front(self)

    def back(self):
        return _byteblower.HTTPMultiDataList_back(self)

    def assign(self, n, x):
        return _byteblower.HTTPMultiDataList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.HTTPMultiDataList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.HTTPMultiDataList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.HTTPMultiDataList_reserve(self, n)

    def capacity(self):
        return _byteblower.HTTPMultiDataList_capacity(self)
    __swig_destroy__ = _byteblower.delete_HTTPMultiDataList
    __del__ = lambda self: None
HTTPMultiDataList_swigregister = _byteblower.HTTPMultiDataList_swigregister
HTTPMultiDataList_swigregister(HTTPMultiDataList)

class HTTPMultiClientList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HTTPMultiClientList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HTTPMultiClientList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.HTTPMultiClientList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.HTTPMultiClientList___nonzero__(self)

    def __bool__(self):
        return _byteblower.HTTPMultiClientList___bool__(self)

    def __len__(self):
        return _byteblower.HTTPMultiClientList___len__(self)

    def pop(self):
        return _byteblower.HTTPMultiClientList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.HTTPMultiClientList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.HTTPMultiClientList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.HTTPMultiClientList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.HTTPMultiClientList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.HTTPMultiClientList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.HTTPMultiClientList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.HTTPMultiClientList_append(self, x)

    def empty(self):
        return _byteblower.HTTPMultiClientList_empty(self)

    def size(self):
        return _byteblower.HTTPMultiClientList_size(self)

    def clear(self):
        return _byteblower.HTTPMultiClientList_clear(self)

    def swap(self, v):
        return _byteblower.HTTPMultiClientList_swap(self, v)

    def get_allocator(self):
        return _byteblower.HTTPMultiClientList_get_allocator(self)

    def begin(self):
        return _byteblower.HTTPMultiClientList_begin(self)

    def end(self):
        return _byteblower.HTTPMultiClientList_end(self)

    def rbegin(self):
        return _byteblower.HTTPMultiClientList_rbegin(self)

    def rend(self):
        return _byteblower.HTTPMultiClientList_rend(self)

    def pop_back(self):
        return _byteblower.HTTPMultiClientList_pop_back(self)

    def erase(self, *args):
        return _byteblower.HTTPMultiClientList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_HTTPMultiClientList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.HTTPMultiClientList_push_back(self, x)

    def front(self):
        return _byteblower.HTTPMultiClientList_front(self)

    def back(self):
        return _byteblower.HTTPMultiClientList_back(self)

    def assign(self, n, x):
        return _byteblower.HTTPMultiClientList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.HTTPMultiClientList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.HTTPMultiClientList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.HTTPMultiClientList_reserve(self, n)

    def capacity(self):
        return _byteblower.HTTPMultiClientList_capacity(self)
    __swig_destroy__ = _byteblower.delete_HTTPMultiClientList
    __del__ = lambda self: None
HTTPMultiClientList_swigregister = _byteblower.HTTPMultiClientList_swigregister
HTTPMultiClientList_swigregister(HTTPMultiClientList)

class HTTPClientMobileList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HTTPClientMobileList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HTTPClientMobileList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.HTTPClientMobileList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.HTTPClientMobileList___nonzero__(self)

    def __bool__(self):
        return _byteblower.HTTPClientMobileList___bool__(self)

    def __len__(self):
        return _byteblower.HTTPClientMobileList___len__(self)

    def pop(self):
        return _byteblower.HTTPClientMobileList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.HTTPClientMobileList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.HTTPClientMobileList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.HTTPClientMobileList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.HTTPClientMobileList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.HTTPClientMobileList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.HTTPClientMobileList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.HTTPClientMobileList_append(self, x)

    def empty(self):
        return _byteblower.HTTPClientMobileList_empty(self)

    def size(self):
        return _byteblower.HTTPClientMobileList_size(self)

    def clear(self):
        return _byteblower.HTTPClientMobileList_clear(self)

    def swap(self, v):
        return _byteblower.HTTPClientMobileList_swap(self, v)

    def get_allocator(self):
        return _byteblower.HTTPClientMobileList_get_allocator(self)

    def begin(self):
        return _byteblower.HTTPClientMobileList_begin(self)

    def end(self):
        return _byteblower.HTTPClientMobileList_end(self)

    def rbegin(self):
        return _byteblower.HTTPClientMobileList_rbegin(self)

    def rend(self):
        return _byteblower.HTTPClientMobileList_rend(self)

    def pop_back(self):
        return _byteblower.HTTPClientMobileList_pop_back(self)

    def erase(self, *args):
        return _byteblower.HTTPClientMobileList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_HTTPClientMobileList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.HTTPClientMobileList_push_back(self, x)

    def front(self):
        return _byteblower.HTTPClientMobileList_front(self)

    def back(self):
        return _byteblower.HTTPClientMobileList_back(self)

    def assign(self, n, x):
        return _byteblower.HTTPClientMobileList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.HTTPClientMobileList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.HTTPClientMobileList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.HTTPClientMobileList_reserve(self, n)

    def capacity(self):
        return _byteblower.HTTPClientMobileList_capacity(self)
    __swig_destroy__ = _byteblower.delete_HTTPClientMobileList
    __del__ = lambda self: None
HTTPClientMobileList_swigregister = _byteblower.HTTPClientMobileList_swigregister
HTTPClientMobileList_swigregister(HTTPClientMobileList)

class HTTPServerList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HTTPServerList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HTTPServerList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.HTTPServerList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.HTTPServerList___nonzero__(self)

    def __bool__(self):
        return _byteblower.HTTPServerList___bool__(self)

    def __len__(self):
        return _byteblower.HTTPServerList___len__(self)

    def pop(self):
        return _byteblower.HTTPServerList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.HTTPServerList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.HTTPServerList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.HTTPServerList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.HTTPServerList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.HTTPServerList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.HTTPServerList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.HTTPServerList_append(self, x)

    def empty(self):
        return _byteblower.HTTPServerList_empty(self)

    def size(self):
        return _byteblower.HTTPServerList_size(self)

    def clear(self):
        return _byteblower.HTTPServerList_clear(self)

    def swap(self, v):
        return _byteblower.HTTPServerList_swap(self, v)

    def get_allocator(self):
        return _byteblower.HTTPServerList_get_allocator(self)

    def begin(self):
        return _byteblower.HTTPServerList_begin(self)

    def end(self):
        return _byteblower.HTTPServerList_end(self)

    def rbegin(self):
        return _byteblower.HTTPServerList_rbegin(self)

    def rend(self):
        return _byteblower.HTTPServerList_rend(self)

    def pop_back(self):
        return _byteblower.HTTPServerList_pop_back(self)

    def erase(self, *args):
        return _byteblower.HTTPServerList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_HTTPServerList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.HTTPServerList_push_back(self, x)

    def front(self):
        return _byteblower.HTTPServerList_front(self)

    def back(self):
        return _byteblower.HTTPServerList_back(self)

    def assign(self, n, x):
        return _byteblower.HTTPServerList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.HTTPServerList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.HTTPServerList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.HTTPServerList_reserve(self, n)

    def capacity(self):
        return _byteblower.HTTPServerList_capacity(self)
    __swig_destroy__ = _byteblower.delete_HTTPServerList
    __del__ = lambda self: None
HTTPServerList_swigregister = _byteblower.HTTPServerList_swigregister
HTTPServerList_swigregister(HTTPServerList)

class HTTPMultiServerList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HTTPMultiServerList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HTTPMultiServerList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.HTTPMultiServerList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.HTTPMultiServerList___nonzero__(self)

    def __bool__(self):
        return _byteblower.HTTPMultiServerList___bool__(self)

    def __len__(self):
        return _byteblower.HTTPMultiServerList___len__(self)

    def pop(self):
        return _byteblower.HTTPMultiServerList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.HTTPMultiServerList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.HTTPMultiServerList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.HTTPMultiServerList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.HTTPMultiServerList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.HTTPMultiServerList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.HTTPMultiServerList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.HTTPMultiServerList_append(self, x)

    def empty(self):
        return _byteblower.HTTPMultiServerList_empty(self)

    def size(self):
        return _byteblower.HTTPMultiServerList_size(self)

    def clear(self):
        return _byteblower.HTTPMultiServerList_clear(self)

    def swap(self, v):
        return _byteblower.HTTPMultiServerList_swap(self, v)

    def get_allocator(self):
        return _byteblower.HTTPMultiServerList_get_allocator(self)

    def begin(self):
        return _byteblower.HTTPMultiServerList_begin(self)

    def end(self):
        return _byteblower.HTTPMultiServerList_end(self)

    def rbegin(self):
        return _byteblower.HTTPMultiServerList_rbegin(self)

    def rend(self):
        return _byteblower.HTTPMultiServerList_rend(self)

    def pop_back(self):
        return _byteblower.HTTPMultiServerList_pop_back(self)

    def erase(self, *args):
        return _byteblower.HTTPMultiServerList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_HTTPMultiServerList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.HTTPMultiServerList_push_back(self, x)

    def front(self):
        return _byteblower.HTTPMultiServerList_front(self)

    def back(self):
        return _byteblower.HTTPMultiServerList_back(self)

    def assign(self, n, x):
        return _byteblower.HTTPMultiServerList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.HTTPMultiServerList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.HTTPMultiServerList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.HTTPMultiServerList_reserve(self, n)

    def capacity(self):
        return _byteblower.HTTPMultiServerList_capacity(self)
    __swig_destroy__ = _byteblower.delete_HTTPMultiServerList
    __del__ = lambda self: None
HTTPMultiServerList_swigregister = _byteblower.HTTPMultiServerList_swigregister
HTTPMultiServerList_swigregister(HTTPMultiServerList)

class TelnetClientList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TelnetClientList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TelnetClientList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.TelnetClientList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.TelnetClientList___nonzero__(self)

    def __bool__(self):
        return _byteblower.TelnetClientList___bool__(self)

    def __len__(self):
        return _byteblower.TelnetClientList___len__(self)

    def pop(self):
        return _byteblower.TelnetClientList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.TelnetClientList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.TelnetClientList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.TelnetClientList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.TelnetClientList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.TelnetClientList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.TelnetClientList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.TelnetClientList_append(self, x)

    def empty(self):
        return _byteblower.TelnetClientList_empty(self)

    def size(self):
        return _byteblower.TelnetClientList_size(self)

    def clear(self):
        return _byteblower.TelnetClientList_clear(self)

    def swap(self, v):
        return _byteblower.TelnetClientList_swap(self, v)

    def get_allocator(self):
        return _byteblower.TelnetClientList_get_allocator(self)

    def begin(self):
        return _byteblower.TelnetClientList_begin(self)

    def end(self):
        return _byteblower.TelnetClientList_end(self)

    def rbegin(self):
        return _byteblower.TelnetClientList_rbegin(self)

    def rend(self):
        return _byteblower.TelnetClientList_rend(self)

    def pop_back(self):
        return _byteblower.TelnetClientList_pop_back(self)

    def erase(self, *args):
        return _byteblower.TelnetClientList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_TelnetClientList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.TelnetClientList_push_back(self, x)

    def front(self):
        return _byteblower.TelnetClientList_front(self)

    def back(self):
        return _byteblower.TelnetClientList_back(self)

    def assign(self, n, x):
        return _byteblower.TelnetClientList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.TelnetClientList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.TelnetClientList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.TelnetClientList_reserve(self, n)

    def capacity(self):
        return _byteblower.TelnetClientList_capacity(self)
    __swig_destroy__ = _byteblower.delete_TelnetClientList
    __del__ = lambda self: None
TelnetClientList_swigregister = _byteblower.TelnetClientList_swigregister
TelnetClientList_swigregister(TelnetClientList)

class TCPTunnelList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TCPTunnelList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TCPTunnelList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.TCPTunnelList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.TCPTunnelList___nonzero__(self)

    def __bool__(self):
        return _byteblower.TCPTunnelList___bool__(self)

    def __len__(self):
        return _byteblower.TCPTunnelList___len__(self)

    def pop(self):
        return _byteblower.TCPTunnelList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.TCPTunnelList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.TCPTunnelList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.TCPTunnelList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.TCPTunnelList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.TCPTunnelList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.TCPTunnelList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.TCPTunnelList_append(self, x)

    def empty(self):
        return _byteblower.TCPTunnelList_empty(self)

    def size(self):
        return _byteblower.TCPTunnelList_size(self)

    def clear(self):
        return _byteblower.TCPTunnelList_clear(self)

    def swap(self, v):
        return _byteblower.TCPTunnelList_swap(self, v)

    def get_allocator(self):
        return _byteblower.TCPTunnelList_get_allocator(self)

    def begin(self):
        return _byteblower.TCPTunnelList_begin(self)

    def end(self):
        return _byteblower.TCPTunnelList_end(self)

    def rbegin(self):
        return _byteblower.TCPTunnelList_rbegin(self)

    def rend(self):
        return _byteblower.TCPTunnelList_rend(self)

    def pop_back(self):
        return _byteblower.TCPTunnelList_pop_back(self)

    def erase(self, *args):
        return _byteblower.TCPTunnelList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_TCPTunnelList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.TCPTunnelList_push_back(self, x)

    def front(self):
        return _byteblower.TCPTunnelList_front(self)

    def back(self):
        return _byteblower.TCPTunnelList_back(self)

    def assign(self, n, x):
        return _byteblower.TCPTunnelList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.TCPTunnelList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.TCPTunnelList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.TCPTunnelList_reserve(self, n)

    def capacity(self):
        return _byteblower.TCPTunnelList_capacity(self)
    __swig_destroy__ = _byteblower.delete_TCPTunnelList
    __del__ = lambda self: None
TCPTunnelList_swigregister = _byteblower.TCPTunnelList_swigregister
TCPTunnelList_swigregister(TCPTunnelList)

class ICMPEchoSessionList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICMPEchoSessionList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICMPEchoSessionList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.ICMPEchoSessionList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.ICMPEchoSessionList___nonzero__(self)

    def __bool__(self):
        return _byteblower.ICMPEchoSessionList___bool__(self)

    def __len__(self):
        return _byteblower.ICMPEchoSessionList___len__(self)

    def pop(self):
        return _byteblower.ICMPEchoSessionList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.ICMPEchoSessionList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.ICMPEchoSessionList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.ICMPEchoSessionList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.ICMPEchoSessionList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.ICMPEchoSessionList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.ICMPEchoSessionList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.ICMPEchoSessionList_append(self, x)

    def empty(self):
        return _byteblower.ICMPEchoSessionList_empty(self)

    def size(self):
        return _byteblower.ICMPEchoSessionList_size(self)

    def clear(self):
        return _byteblower.ICMPEchoSessionList_clear(self)

    def swap(self, v):
        return _byteblower.ICMPEchoSessionList_swap(self, v)

    def get_allocator(self):
        return _byteblower.ICMPEchoSessionList_get_allocator(self)

    def begin(self):
        return _byteblower.ICMPEchoSessionList_begin(self)

    def end(self):
        return _byteblower.ICMPEchoSessionList_end(self)

    def rbegin(self):
        return _byteblower.ICMPEchoSessionList_rbegin(self)

    def rend(self):
        return _byteblower.ICMPEchoSessionList_rend(self)

    def pop_back(self):
        return _byteblower.ICMPEchoSessionList_pop_back(self)

    def erase(self, *args):
        return _byteblower.ICMPEchoSessionList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_ICMPEchoSessionList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.ICMPEchoSessionList_push_back(self, x)

    def front(self):
        return _byteblower.ICMPEchoSessionList_front(self)

    def back(self):
        return _byteblower.ICMPEchoSessionList_back(self)

    def assign(self, n, x):
        return _byteblower.ICMPEchoSessionList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.ICMPEchoSessionList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.ICMPEchoSessionList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.ICMPEchoSessionList_reserve(self, n)

    def capacity(self):
        return _byteblower.ICMPEchoSessionList_capacity(self)
    __swig_destroy__ = _byteblower.delete_ICMPEchoSessionList
    __del__ = lambda self: None
ICMPEchoSessionList_swigregister = _byteblower.ICMPEchoSessionList_swigregister
ICMPEchoSessionList_swigregister(ICMPEchoSessionList)

class ICMPv6EchoSessionList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICMPv6EchoSessionList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICMPv6EchoSessionList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.ICMPv6EchoSessionList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.ICMPv6EchoSessionList___nonzero__(self)

    def __bool__(self):
        return _byteblower.ICMPv6EchoSessionList___bool__(self)

    def __len__(self):
        return _byteblower.ICMPv6EchoSessionList___len__(self)

    def pop(self):
        return _byteblower.ICMPv6EchoSessionList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.ICMPv6EchoSessionList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.ICMPv6EchoSessionList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.ICMPv6EchoSessionList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.ICMPv6EchoSessionList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.ICMPv6EchoSessionList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.ICMPv6EchoSessionList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.ICMPv6EchoSessionList_append(self, x)

    def empty(self):
        return _byteblower.ICMPv6EchoSessionList_empty(self)

    def size(self):
        return _byteblower.ICMPv6EchoSessionList_size(self)

    def clear(self):
        return _byteblower.ICMPv6EchoSessionList_clear(self)

    def swap(self, v):
        return _byteblower.ICMPv6EchoSessionList_swap(self, v)

    def get_allocator(self):
        return _byteblower.ICMPv6EchoSessionList_get_allocator(self)

    def begin(self):
        return _byteblower.ICMPv6EchoSessionList_begin(self)

    def end(self):
        return _byteblower.ICMPv6EchoSessionList_end(self)

    def rbegin(self):
        return _byteblower.ICMPv6EchoSessionList_rbegin(self)

    def rend(self):
        return _byteblower.ICMPv6EchoSessionList_rend(self)

    def pop_back(self):
        return _byteblower.ICMPv6EchoSessionList_pop_back(self)

    def erase(self, *args):
        return _byteblower.ICMPv6EchoSessionList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_ICMPv6EchoSessionList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.ICMPv6EchoSessionList_push_back(self, x)

    def front(self):
        return _byteblower.ICMPv6EchoSessionList_front(self)

    def back(self):
        return _byteblower.ICMPv6EchoSessionList_back(self)

    def assign(self, n, x):
        return _byteblower.ICMPv6EchoSessionList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.ICMPv6EchoSessionList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.ICMPv6EchoSessionList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.ICMPv6EchoSessionList_reserve(self, n)

    def capacity(self):
        return _byteblower.ICMPv6EchoSessionList_capacity(self)
    __swig_destroy__ = _byteblower.delete_ICMPv6EchoSessionList
    __del__ = lambda self: None
ICMPv6EchoSessionList_swigregister = _byteblower.ICMPv6EchoSessionList_swigregister
ICMPv6EchoSessionList_swigregister(ICMPv6EchoSessionList)

class CaptureRawPacketList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CaptureRawPacketList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CaptureRawPacketList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.CaptureRawPacketList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.CaptureRawPacketList___nonzero__(self)

    def __bool__(self):
        return _byteblower.CaptureRawPacketList___bool__(self)

    def __len__(self):
        return _byteblower.CaptureRawPacketList___len__(self)

    def pop(self):
        return _byteblower.CaptureRawPacketList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.CaptureRawPacketList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.CaptureRawPacketList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.CaptureRawPacketList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.CaptureRawPacketList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.CaptureRawPacketList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.CaptureRawPacketList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.CaptureRawPacketList_append(self, x)

    def empty(self):
        return _byteblower.CaptureRawPacketList_empty(self)

    def size(self):
        return _byteblower.CaptureRawPacketList_size(self)

    def clear(self):
        return _byteblower.CaptureRawPacketList_clear(self)

    def swap(self, v):
        return _byteblower.CaptureRawPacketList_swap(self, v)

    def get_allocator(self):
        return _byteblower.CaptureRawPacketList_get_allocator(self)

    def begin(self):
        return _byteblower.CaptureRawPacketList_begin(self)

    def end(self):
        return _byteblower.CaptureRawPacketList_end(self)

    def rbegin(self):
        return _byteblower.CaptureRawPacketList_rbegin(self)

    def rend(self):
        return _byteblower.CaptureRawPacketList_rend(self)

    def pop_back(self):
        return _byteblower.CaptureRawPacketList_pop_back(self)

    def erase(self, *args):
        return _byteblower.CaptureRawPacketList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_CaptureRawPacketList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.CaptureRawPacketList_push_back(self, x)

    def front(self):
        return _byteblower.CaptureRawPacketList_front(self)

    def back(self):
        return _byteblower.CaptureRawPacketList_back(self)

    def assign(self, n, x):
        return _byteblower.CaptureRawPacketList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.CaptureRawPacketList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.CaptureRawPacketList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.CaptureRawPacketList_reserve(self, n)

    def capacity(self):
        return _byteblower.CaptureRawPacketList_capacity(self)
    __swig_destroy__ = _byteblower.delete_CaptureRawPacketList
    __del__ = lambda self: None
CaptureRawPacketList_swigregister = _byteblower.CaptureRawPacketList_swigregister
CaptureRawPacketList_swigregister(CaptureRawPacketList)

class CapturedFrameList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CapturedFrameList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CapturedFrameList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.CapturedFrameList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.CapturedFrameList___nonzero__(self)

    def __bool__(self):
        return _byteblower.CapturedFrameList___bool__(self)

    def __len__(self):
        return _byteblower.CapturedFrameList___len__(self)

    def pop(self):
        return _byteblower.CapturedFrameList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.CapturedFrameList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.CapturedFrameList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.CapturedFrameList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.CapturedFrameList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.CapturedFrameList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.CapturedFrameList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.CapturedFrameList_append(self, x)

    def empty(self):
        return _byteblower.CapturedFrameList_empty(self)

    def size(self):
        return _byteblower.CapturedFrameList_size(self)

    def clear(self):
        return _byteblower.CapturedFrameList_clear(self)

    def swap(self, v):
        return _byteblower.CapturedFrameList_swap(self, v)

    def get_allocator(self):
        return _byteblower.CapturedFrameList_get_allocator(self)

    def begin(self):
        return _byteblower.CapturedFrameList_begin(self)

    def end(self):
        return _byteblower.CapturedFrameList_end(self)

    def rbegin(self):
        return _byteblower.CapturedFrameList_rbegin(self)

    def rend(self):
        return _byteblower.CapturedFrameList_rend(self)

    def pop_back(self):
        return _byteblower.CapturedFrameList_pop_back(self)

    def erase(self, *args):
        return _byteblower.CapturedFrameList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_CapturedFrameList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.CapturedFrameList_push_back(self, x)

    def front(self):
        return _byteblower.CapturedFrameList_front(self)

    def back(self):
        return _byteblower.CapturedFrameList_back(self)

    def assign(self, n, x):
        return _byteblower.CapturedFrameList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.CapturedFrameList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.CapturedFrameList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.CapturedFrameList_reserve(self, n)

    def capacity(self):
        return _byteblower.CapturedFrameList_capacity(self)
    __swig_destroy__ = _byteblower.delete_CapturedFrameList
    __del__ = lambda self: None
CapturedFrameList_swigregister = _byteblower.CapturedFrameList_swigregister
CapturedFrameList_swigregister(CapturedFrameList)

class CapabilityList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CapabilityList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CapabilityList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _byteblower.CapabilityList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _byteblower.CapabilityList___nonzero__(self)

    def __bool__(self):
        return _byteblower.CapabilityList___bool__(self)

    def __len__(self):
        return _byteblower.CapabilityList___len__(self)

    def pop(self):
        return _byteblower.CapabilityList_pop(self)

    def __getslice__(self, i, j):
        return _byteblower.CapabilityList___getslice__(self, i, j)

    def __setslice__(self, *args, **kwargs):
        return _byteblower.CapabilityList___setslice__(self, *args, **kwargs)

    def __delslice__(self, i, j):
        return _byteblower.CapabilityList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _byteblower.CapabilityList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _byteblower.CapabilityList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _byteblower.CapabilityList___setitem__(self, *args)

    def append(self, x):
        return _byteblower.CapabilityList_append(self, x)

    def empty(self):
        return _byteblower.CapabilityList_empty(self)

    def size(self):
        return _byteblower.CapabilityList_size(self)

    def clear(self):
        return _byteblower.CapabilityList_clear(self)

    def swap(self, v):
        return _byteblower.CapabilityList_swap(self, v)

    def get_allocator(self):
        return _byteblower.CapabilityList_get_allocator(self)

    def begin(self):
        return _byteblower.CapabilityList_begin(self)

    def end(self):
        return _byteblower.CapabilityList_end(self)

    def rbegin(self):
        return _byteblower.CapabilityList_rbegin(self)

    def rend(self):
        return _byteblower.CapabilityList_rend(self)

    def pop_back(self):
        return _byteblower.CapabilityList_pop_back(self)

    def erase(self, *args):
        return _byteblower.CapabilityList_erase(self, *args)

    def __init__(self, *args):
        this = _byteblower.new_CapabilityList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _byteblower.CapabilityList_push_back(self, x)

    def front(self):
        return _byteblower.CapabilityList_front(self)

    def back(self):
        return _byteblower.CapabilityList_back(self)

    def assign(self, n, x):
        return _byteblower.CapabilityList_assign(self, n, x)

    def resize(self, *args):
        return _byteblower.CapabilityList_resize(self, *args)

    def insert(self, *args):
        return _byteblower.CapabilityList_insert(self, *args)

    def reserve(self, n):
        return _byteblower.CapabilityList_reserve(self, n)

    def capacity(self):
        return _byteblower.CapabilityList_capacity(self)
    __swig_destroy__ = _byteblower.delete_CapabilityList
    __del__ = lambda self: None
CapabilityList_swigregister = _byteblower.CapabilityList_swigregister
CapabilityList_swigregister(CapabilityList)

# This file is compatible with both classic and new-style classes.


